{
  "readme": "# Parser combinator\n\nA simple parser combinator 简单的语法分析组合子\n\nSupport any stream with `Seq` 利用`Seq`支持各类流\n\n## Usage 使用方法\n\n```moonbit\ntest {\n  let parser = pstring(\"Hello\").and_then(pint)\n  let Some(result, _) = parser.parse(Seq::from_string(\"Hello1234\"))\n  inspect(result, content=\"Hello\")\n}\n```",
  "name": "peter-jerry-ye/parser-combinator",
  "traits": [],
  "types": [
    {
      "name": "Parser",
      "docstring": " A parser combinator",
      "signature": "pub type Parser (<a href=\"peter-jerry-ye/parser-combinator#Seq\">Seq</a>[Token]) -> (Value, <a href=\"peter-jerry-ye/parser-combinator#Seq\">Seq</a>[Token])?",
      "loc": { "line": 2, "column": 10 },
      "methods": [
        {
          "name": "and_then",
          "docstring": "",
          "signature": "fn <a href=\"peter-jerry-ye/parser-combinator#Parser\">Parser</a>::and_then[Token, A, B](self : <a href=\"peter-jerry-ye/parser-combinator#Parser\">Parser</a>[Token, A], other : <a href=\"peter-jerry-ye/parser-combinator#Parser\">Parser</a>[Token, B]) -> <a href=\"peter-jerry-ye/parser-combinator#Parser\">Parser</a>[Token, (A, B)]",
          "loc": { "line": 93, "column": 16 }
        },
        {
          "name": "apply",
          "docstring": "",
          "signature": "fn <a href=\"peter-jerry-ye/parser-combinator#Parser\">Parser</a>::apply[Token, A, B](self : <a href=\"peter-jerry-ye/parser-combinator#Parser\">Parser</a>[Token, A], f : <a href=\"peter-jerry-ye/parser-combinator#Parser\">Parser</a>[Token, (A) -> B]) -> <a href=\"peter-jerry-ye/parser-combinator#Parser\">Parser</a>[Token, B]",
          "loc": { "line": 151, "column": 16 }
        },
        {
          "name": "between",
          "docstring": "",
          "signature": "fn <a href=\"peter-jerry-ye/parser-combinator#Parser\">Parser</a>::between[Token, A, B](self : <a href=\"peter-jerry-ye/parser-combinator#Parser\">Parser</a>[Token, A], around : <a href=\"peter-jerry-ye/parser-combinator#Parser\">Parser</a>[Token, B]) -> <a href=\"peter-jerry-ye/parser-combinator#Parser\">Parser</a>[Token, A]",
          "loc": { "line": 325, "column": 16 }
        },
        {
          "name": "map",
          "docstring": "",
          "signature": "fn <a href=\"peter-jerry-ye/parser-combinator#Parser\">Parser</a>::map[Token, A, B](self : <a href=\"peter-jerry-ye/parser-combinator#Parser\">Parser</a>[Token, A], f : (A) -> B) -> <a href=\"peter-jerry-ye/parser-combinator#Parser\">Parser</a>[Token, B]",
          "loc": { "line": 136, "column": 16 }
        },
        {
          "name": "omit_first",
          "docstring": "",
          "signature": "fn <a href=\"peter-jerry-ye/parser-combinator#Parser\">Parser</a>::omit_first[Token, A, B](parser : <a href=\"peter-jerry-ye/parser-combinator#Parser\">Parser</a>[Token, (A, B)]) -> <a href=\"peter-jerry-ye/parser-combinator#Parser\">Parser</a>[Token, B]",
          "loc": { "line": 313, "column": 16 }
        },
        {
          "name": "omit_second",
          "docstring": "",
          "signature": "fn <a href=\"peter-jerry-ye/parser-combinator#Parser\">Parser</a>::omit_second[Token, A, B](parser : <a href=\"peter-jerry-ye/parser-combinator#Parser\">Parser</a>[Token, (A, B)]) -> <a href=\"peter-jerry-ye/parser-combinator#Parser\">Parser</a>[Token, A]",
          "loc": { "line": 319, "column": 16 }
        },
        {
          "name": "optional",
          "docstring": "",
          "signature": "fn <a href=\"peter-jerry-ye/parser-combinator#Parser\">Parser</a>::optional[Token, A](self : <a href=\"peter-jerry-ye/parser-combinator#Parser\">Parser</a>[Token, A]) -> <a href=\"peter-jerry-ye/parser-combinator#Parser\">Parser</a>[Token, A?]",
          "loc": { "line": 309, "column": 16 }
        },
        {
          "name": "or_else",
          "docstring": "",
          "signature": "fn <a href=\"peter-jerry-ye/parser-combinator#Parser\">Parser</a>::or_else[Token, A](self : <a href=\"peter-jerry-ye/parser-combinator#Parser\">Parser</a>[Token, A], other : <a href=\"peter-jerry-ye/parser-combinator#Parser\">Parser</a>[Token, A]) -> <a href=\"peter-jerry-ye/parser-combinator#Parser\">Parser</a>[Token, A]",
          "loc": { "line": 112, "column": 16 }
        },
        {
          "name": "or_others",
          "docstring": "",
          "signature": "fn <a href=\"peter-jerry-ye/parser-combinator#Parser\">Parser</a>::or_others[Token, A](self : <a href=\"peter-jerry-ye/parser-combinator#Parser\">Parser</a>[Token, A], others : <a href=\"moonbitlang/core/array#ArrayView\">ArrayView</a>[<a href=\"peter-jerry-ye/parser-combinator#Parser\">Parser</a>[Token, A]]) -> <a href=\"peter-jerry-ye/parser-combinator#Parser\">Parser</a>[Token, A]",
          "loc": { "line": 126, "column": 16 }
        },
        {
          "name": "parse",
          "docstring": " Parses a sequence of tokens\n\n If the parsing succeeds, `Some(result, rest)` is returned  \n Otherwise, `None` is returned.\n TODO: Move to `Result[A, B]`",
          "signature": "fn <a href=\"peter-jerry-ye/parser-combinator#Parser\">Parser</a>::parse[Token, Value](self : <a href=\"peter-jerry-ye/parser-combinator#Parser\">Parser</a>[Token, Value], sequence : <a href=\"peter-jerry-ye/parser-combinator#Seq\">Seq</a>[Token]) -> (Value, <a href=\"peter-jerry-ye/parser-combinator#Seq\">Seq</a>[Token])?",
          "loc": { "line": 9, "column": 16 }
        },
        {
          "name": "ref",
          "docstring": "",
          "signature": "fn <a href=\"peter-jerry-ye/parser-combinator#Parser\">Parser</a>::ref[Token, A](self : <a href=\"moonbitlang/core/ref#Ref\">Ref</a>[<a href=\"peter-jerry-ye/parser-combinator#Parser\">Parser</a>[Token, A]]) -> <a href=\"peter-jerry-ye/parser-combinator#Parser\">Parser</a>[Token, A]",
          "loc": { "line": 332, "column": 16 }
        },
        {
          "name": "repeat",
          "docstring": "",
          "signature": "fn <a href=\"peter-jerry-ye/parser-combinator#Parser\">Parser</a>::repeat[Token, A](self : <a href=\"peter-jerry-ye/parser-combinator#Parser\">Parser</a>[Token, A]) -> <a href=\"peter-jerry-ye/parser-combinator#Parser\">Parser</a>[Token, <a href=\"moonbitlang/core/array#Array\">Array</a>[A]]",
          "loc": { "line": 242, "column": 16 }
        },
        {
          "name": "repeat_0_to_n",
          "docstring": "",
          "signature": "fn <a href=\"peter-jerry-ye/parser-combinator#Parser\">Parser</a>::repeat_0_to_n[Token, A](self : <a href=\"peter-jerry-ye/parser-combinator#Parser\">Parser</a>[Token, A], n : Int) -> <a href=\"peter-jerry-ye/parser-combinator#Parser\">Parser</a>[Token, <a href=\"moonbitlang/core/array#Array\">Array</a>[A]]",
          "loc": { "line": 200, "column": 16 }
        },
        {
          "name": "repeat_0_to_n_with_sep",
          "docstring": "",
          "signature": "fn <a href=\"peter-jerry-ye/parser-combinator#Parser\">Parser</a>::repeat_0_to_n_with_sep[Token, A, B](self : <a href=\"peter-jerry-ye/parser-combinator#Parser\">Parser</a>[Token, A], n : Int, separator : <a href=\"peter-jerry-ye/parser-combinator#Parser\">Parser</a>[Token, B]) -> <a href=\"peter-jerry-ye/parser-combinator#Parser\">Parser</a>[Token, <a href=\"moonbitlang/core/array#Array\">Array</a>[A]]",
          "loc": { "line": 207, "column": 16 }
        },
        {
          "name": "repeat_n",
          "docstring": "",
          "signature": "fn <a href=\"peter-jerry-ye/parser-combinator#Parser\">Parser</a>::repeat_n[Token, A](self : <a href=\"peter-jerry-ye/parser-combinator#Parser\">Parser</a>[Token, A], n : Int) -> <a href=\"peter-jerry-ye/parser-combinator#Parser\">Parser</a>[Token, <a href=\"moonbitlang/core/array#Array\">Array</a>[A]]",
          "loc": { "line": 158, "column": 16 }
        },
        {
          "name": "repeat_n_with_sep",
          "docstring": "",
          "signature": "fn <a href=\"peter-jerry-ye/parser-combinator#Parser\">Parser</a>::repeat_n_with_sep[Token, A, B](self : <a href=\"peter-jerry-ye/parser-combinator#Parser\">Parser</a>[Token, A], n : Int, sep : <a href=\"peter-jerry-ye/parser-combinator#Parser\">Parser</a>[Token, B]) -> <a href=\"peter-jerry-ye/parser-combinator#Parser\">Parser</a>[Token, <a href=\"moonbitlang/core/array#Array\">Array</a>[A]]",
          "loc": { "line": 165, "column": 16 }
        },
        {
          "name": "repeat_with_sep",
          "docstring": "",
          "signature": "fn <a href=\"peter-jerry-ye/parser-combinator#Parser\">Parser</a>::repeat_with_sep[Token, A, B](self : <a href=\"peter-jerry-ye/parser-combinator#Parser\">Parser</a>[Token, A], separator : <a href=\"peter-jerry-ye/parser-combinator#Parser\">Parser</a>[Token, B]) -> <a href=\"peter-jerry-ye/parser-combinator#Parser\">Parser</a>[Token, <a href=\"moonbitlang/core/array#Array\">Array</a>[A]]",
          "loc": { "line": 248, "column": 16 }
        }
      ],
      "impls": []
    },
    {
      "name": "Seq",
      "docstring": " A possibily infinate lazy list",
      "signature": "pub type Seq () -> (T, <a href=\"peter-jerry-ye/parser-combinator#Seq\">Seq</a>[T])?",
      "loc": { "line": 2, "column": 10 },
      "methods": [
        {
          "name": "default",
          "docstring": "",
          "signature": "fn <a href=\"peter-jerry-ye/parser-combinator#Seq\">Seq</a>::default[T]() -> <a href=\"peter-jerry-ye/parser-combinator#Seq\">Seq</a>[T]",
          "loc": { "line": 12, "column": 13 }
        },
        {
          "name": "from_array",
          "docstring": " Construct a sequence from array",
          "signature": "fn <a href=\"peter-jerry-ye/parser-combinator#Seq\">Seq</a>::from_array[T](array : <a href=\"moonbitlang/core/array#ArrayView\">ArrayView</a>[T]) -> <a href=\"peter-jerry-ye/parser-combinator#Seq\">Seq</a>[T]",
          "loc": { "line": 74, "column": 13 }
        },
        {
          "name": "from_list",
          "docstring": " Construct a sequence from list",
          "signature": "fn <a href=\"peter-jerry-ye/parser-combinator#Seq\">Seq</a>::from_list[T](list : <a href=\"moonbitlang/core/immut/list#T\">@moonbitlang/core/immut/list.T</a>[T]) -> <a href=\"peter-jerry-ye/parser-combinator#Seq\">Seq</a>[T]",
          "loc": { "line": 33, "column": 13 }
        },
        {
          "name": "from_string",
          "docstring": " Construct a sequence from string",
          "signature": "fn <a href=\"peter-jerry-ye/parser-combinator#Seq\">Seq</a>::from_string(str : String) -> <a href=\"peter-jerry-ye/parser-combinator#Seq\">Seq</a>[Char]",
          "loc": { "line": 45, "column": 13 }
        },
        {
          "name": "is_empty",
          "docstring": " Checks if the sequence is empty",
          "signature": "fn <a href=\"peter-jerry-ye/parser-combinator#Seq\">Seq</a>::is_empty[T](seq : <a href=\"peter-jerry-ye/parser-combinator#Seq\">Seq</a>[T]) -> Bool",
          "loc": { "line": 5, "column": 13 }
        },
        {
          "name": "length",
          "docstring": "",
          "signature": "fn <a href=\"peter-jerry-ye/parser-combinator#Seq\">Seq</a>::length[T](self : <a href=\"peter-jerry-ye/parser-combinator#Seq\">Seq</a>[T]) -> Int",
          "loc": { "line": 85, "column": 8 }
        },
        {
          "name": "map",
          "docstring": " Map the sequence\n\n If the sequence is x0, x1, ... then `seq.map(f)` is f(x0), f(x1), ...",
          "signature": "fn <a href=\"peter-jerry-ye/parser-combinator#Seq\">Seq</a>::map[T1, T2](seq : <a href=\"peter-jerry-ye/parser-combinator#Seq\">Seq</a>[T1], f : (T1) -> T2) -> <a href=\"peter-jerry-ye/parser-combinator#Seq\">Seq</a>[T2]",
          "loc": { "line": 28, "column": 13 }
        },
        {
          "name": "output",
          "docstring": "",
          "signature": "fn <a href=\"peter-jerry-ye/parser-combinator#Seq\">Seq</a>::output[T : <a href=\"moonbitlang/core/builtin#Show\">Show</a>](self : <a href=\"peter-jerry-ye/parser-combinator#Seq\">Seq</a>[T], log : <a href=\"moonbitlang/core/builtin#Logger\">Logger</a>) -> Unit",
          "loc": { "line": 99, "column": 13 }
        },
        {
          "name": "to_string",
          "docstring": "",
          "signature": "fn <a href=\"peter-jerry-ye/parser-combinator#Seq\">Seq</a>::to_string[T : <a href=\"moonbitlang/core/builtin#Show\">Show</a>](self : <a href=\"peter-jerry-ye/parser-combinator#Seq\">Seq</a>[T]) -> String",
          "loc": { "line": 92, "column": 8 }
        },
        {
          "name": "uncons",
          "docstring": " Unwrap a sequence\n\n If `seq` is empty, then `seq.uncons()` is `None`  \n Else is `Some(hd, tl)` where `hd` is the head of the sequence\n and `tl` is the tail",
          "signature": "fn <a href=\"peter-jerry-ye/parser-combinator#Seq\">Seq</a>::uncons[T](seq : <a href=\"peter-jerry-ye/parser-combinator#Seq\">Seq</a>[T]) -> (T, <a href=\"peter-jerry-ye/parser-combinator#Seq\">Seq</a>[T])?",
          "loc": { "line": 21, "column": 13 }
        }
      ],
      "impls": []
    }
  ],
  "typealias": [],
  "values": [
    {
      "name": "lift2",
      "docstring": "",
      "signature": "fn lift2[Token, A, B, C](f : (A, B) -> C) -> ((<a href=\"peter-jerry-ye/parser-combinator#Parser\">Parser</a>[Token, A], <a href=\"peter-jerry-ye/parser-combinator#Parser\">Parser</a>[Token, B]) -> <a href=\"peter-jerry-ye/parser-combinator#Parser\">Parser</a>[Token, C])",
      "loc": { "line": 48, "column": 8 }
    },
    {
      "name": "one_of",
      "docstring": "",
      "signature": "fn one_of[A : <a href=\"moonbitlang/core/builtin#Show\">Show</a>](array : <a href=\"moonbitlang/core/array#Array\">Array</a>[A]) -> <a href=\"peter-jerry-ye/parser-combinator#Parser\">Parser</a>[Char, A]",
      "loc": { "line": 350, "column": 8 }
    },
    {
      "name": "pchar",
      "docstring": "",
      "signature": "fn pchar(char : Char) -> <a href=\"peter-jerry-ye/parser-combinator#Parser\">Parser</a>[Char, Char]",
      "loc": { "line": 341, "column": 8 }
    },
    {
      "name": "pchar_such_that",
      "docstring": "",
      "signature": "fn pchar_such_that(predicate : (Char) -> Bool) -> <a href=\"peter-jerry-ye/parser-combinator#Parser\">Parser</a>[Char, Char]",
      "loc": { "line": 337, "column": 8 }
    },
    {
      "name": "pconst",
      "docstring": " Parser that always succeed with given value",
      "signature": "fn pconst[Token, A](a : A) -> <a href=\"peter-jerry-ye/parser-combinator#Parser\">Parser</a>[Token, A]",
      "loc": { "line": 44, "column": 8 }
    },
    {
      "name": "pdigit",
      "docstring": " parse digit\n\n %x30-39",
      "signature": "let pdigit : <a href=\"peter-jerry-ye/parser-combinator#Parser\">Parser</a>[Char, Int]",
      "loc": { "line": 348, "column": 9 }
    },
    {
      "name": "pfail",
      "docstring": " Parser that always fail",
      "signature": "fn pfail[Token, A]() -> <a href=\"peter-jerry-ye/parser-combinator#Parser\">Parser</a>[Token, A]",
      "loc": { "line": 39, "column": 8 }
    },
    {
      "name": "pint",
      "docstring": " parser for integer\n\n [ \"-\" ] ( %x30 / (%x31-39) *(%x30-39)",
      "signature": "let pint : <a href=\"peter-jerry-ye/parser-combinator#Parser\">Parser</a>[Char, Int]",
      "loc": { "line": 376, "column": 9 }
    },
    {
      "name": "pint64",
      "docstring": " parser for integer 64 bits\n\n [ \"-\" ] ( %x30 / (%x31-39) *(%x30-39)",
      "signature": "let pint64 : <a href=\"peter-jerry-ye/parser-combinator#Parser\">Parser</a>[Char, Int64]",
      "loc": { "line": 391, "column": 9 }
    },
    {
      "name": "pstring",
      "docstring": " parser that tries to match the given string",
      "signature": "fn pstring(string : String) -> <a href=\"peter-jerry-ye/parser-combinator#Parser\">Parser</a>[Char, String]",
      "loc": { "line": 415, "column": 8 }
    },
    {
      "name": "pvalue",
      "docstring": " Parses a token with predicate\n\n The predicate should return `Some(value)` if the tokens fulfills\n or `None` otherwise",
      "signature": "fn pvalue[Token, Value](predicate : (Token) -> Value?) -> <a href=\"peter-jerry-ye/parser-combinator#Parser\">Parser</a>[Token, Value]",
      "loc": { "line": 20, "column": 8 }
    },
    {
      "name": "sequence",
      "docstring": "",
      "signature": "fn sequence[Token, A](parsers : <a href=\"moonbitlang/core/array#Array\">Array</a>[<a href=\"peter-jerry-ye/parser-combinator#Parser\">Parser</a>[Token, A]]) -> <a href=\"peter-jerry-ye/parser-combinator#Parser\">Parser</a>[Token, <a href=\"moonbitlang/core/array#Array\">Array</a>[A]]",
      "loc": { "line": 54, "column": 8 }
    }
  ],
  "misc": []
}