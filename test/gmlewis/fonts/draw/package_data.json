{
  "readme": "",
  "name": "gmlewis/fonts/draw",
  "traits": [
    {
      "name": "@gmlewis/fonts/draw.Clonable",
      "docstring": "",
      "signature": "trait @gmlewis/fonts/draw.Clonable",
      "loc": { "line": 46, "column": 1 },
      "default_impls": [],
      "impls": []
    }
  ],
  "types": [
    {
      "name": "AffineMatrix",
      "docstring": " AffineMatrix represents a 2D affine transform that preserves parallel lines.\n See: https://en.wikipedia.org/wiki/Affine_transformation",
      "signature": "pub(all) struct AffineMatrix {\n  a : Double\n  b : Double\n  c : Double\n  d : Double\n  tx : Double\n  ty : Double\n}",
      "loc": { "line": 6, "column": 17 },
      "methods": [
        {
          "name": "clone",
          "docstring": " clone returns a copy of this 2D affine matrix.",
          "signature": "fn <a href=\"gmlewis/fonts/draw#AffineMatrix\">AffineMatrix</a>::clone(self : <a href=\"gmlewis/fonts/draw#AffineMatrix\">AffineMatrix</a>) -> <a href=\"gmlewis/fonts/draw#AffineMatrix\">AffineMatrix</a>",
          "loc": { "line": 87, "column": 8 }
        },
        {
          "name": "copy",
          "docstring": " copy copies another 2D affine matrix into itself and returns itself.",
          "signature": "fn <a href=\"gmlewis/fonts/draw#AffineMatrix\">AffineMatrix</a>::copy(self : <a href=\"gmlewis/fonts/draw#AffineMatrix\">AffineMatrix</a>, other : <a href=\"gmlewis/fonts/draw#AffineMatrix\">AffineMatrix</a>) -> <a href=\"gmlewis/fonts/draw#AffineMatrix\">AffineMatrix</a>",
          "loc": { "line": 93, "column": 8 }
        },
        {
          "name": "determinant",
          "docstring": " determinant returns the determinant of the 2D affine matrix.",
          "signature": "fn <a href=\"gmlewis/fonts/draw#AffineMatrix\">AffineMatrix</a>::determinant(self : <a href=\"gmlewis/fonts/draw#AffineMatrix\">AffineMatrix</a>) -> Double",
          "loc": { "line": 249, "column": 8 }
        },
        {
          "name": "from_center_scale",
          "docstring": " AffineMatrix::from_center_scale returns a new 2D affine matrix that scales\n from the provided center point.",
          "signature": "fn <a href=\"gmlewis/fonts/draw#AffineMatrix\">AffineMatrix</a>::from_center_scale(center : <a href=\"gmlewis/fonts/draw#Vec2\">Vec2</a>, scale : <a href=\"gmlewis/fonts/draw#Vec2\">Vec2</a>) -> <a href=\"gmlewis/fonts/draw#AffineMatrix\">AffineMatrix</a>",
          "loc": { "line": 73, "column": 22 }
        },
        {
          "name": "from_rotation",
          "docstring": " AffineMatrix::from_rotation returns a new 2D affine matrix from a rotation `angle`\n in degrees.",
          "signature": "fn <a href=\"gmlewis/fonts/draw#AffineMatrix\">AffineMatrix</a>::from_rotation(angle : Double) -> <a href=\"gmlewis/fonts/draw#AffineMatrix\">AffineMatrix</a>",
          "loc": { "line": 54, "column": 22 }
        },
        {
          "name": "from_scale",
          "docstring": " AffineMatrix::from_scale returns a new 2D affine matrix from scale `v`.",
          "signature": "fn <a href=\"gmlewis/fonts/draw#AffineMatrix\">AffineMatrix</a>::from_scale(v : <a href=\"gmlewis/fonts/draw#Vec2\">Vec2</a>) -> <a href=\"gmlewis/fonts/draw#AffineMatrix\">AffineMatrix</a>",
          "loc": { "line": 62, "column": 22 }
        },
        {
          "name": "from_scale_scalar",
          "docstring": " AffineMatrix::from_scale_scalar returns a new 2D affine matrix from uniform scale `s`.",
          "signature": "fn <a href=\"gmlewis/fonts/draw#AffineMatrix\">AffineMatrix</a>::from_scale_scalar(s : Double) -> <a href=\"gmlewis/fonts/draw#AffineMatrix\">AffineMatrix</a>",
          "loc": { "line": 67, "column": 22 }
        },
        {
          "name": "from_transform",
          "docstring": " AffineMatrix::from_transform returns a new 2D affine matrix from a Transform.",
          "signature": "fn <a href=\"gmlewis/fonts/draw#AffineMatrix\">AffineMatrix</a>::from_transform(transform : <a href=\"gmlewis/fonts/draw#Transform\">Transform</a>) -> <a href=\"gmlewis/fonts/draw#AffineMatrix\">AffineMatrix</a>",
          "loc": { "line": 28, "column": 22 }
        },
        {
          "name": "from_translation",
          "docstring": " AffineMatrix::from_translation returns a new 2D affine matrix from translation `v`.",
          "signature": "fn <a href=\"gmlewis/fonts/draw#AffineMatrix\">AffineMatrix</a>::from_translation(v : <a href=\"gmlewis/fonts/draw#Vec2\">Vec2</a>) -> <a href=\"gmlewis/fonts/draw#AffineMatrix\">AffineMatrix</a>",
          "loc": { "line": 39, "column": 22 }
        },
        {
          "name": "from_translation_points",
          "docstring": " AffineMatrix::from_translation_points returns a new 2D affine matrix that\n translates from p1 to p2.",
          "signature": "fn <a href=\"gmlewis/fonts/draw#AffineMatrix\">AffineMatrix</a>::from_translation_points(p1 : <a href=\"gmlewis/fonts/draw#Vec2\">Vec2</a>, p2 : <a href=\"gmlewis/fonts/draw#Vec2\">Vec2</a>) -> <a href=\"gmlewis/fonts/draw#AffineMatrix\">AffineMatrix</a>",
          "loc": { "line": 45, "column": 22 }
        },
        {
          "name": "invert",
          "docstring": " invert inverts this 2D affine matrix.",
          "signature": "fn <a href=\"gmlewis/fonts/draw#AffineMatrix\">AffineMatrix</a>::invert(self : <a href=\"gmlewis/fonts/draw#AffineMatrix\">AffineMatrix</a>) -> <a href=\"gmlewis/fonts/draw#AffineMatrix\">AffineMatrix</a>",
          "loc": { "line": 104, "column": 8 }
        },
        {
          "name": "is_identity",
          "docstring": " is_identity returns true if this 2D affine matrix is the identity matrix.",
          "signature": "fn <a href=\"gmlewis/fonts/draw#AffineMatrix\">AffineMatrix</a>::is_identity(self : <a href=\"gmlewis/fonts/draw#AffineMatrix\">AffineMatrix</a>) -> Bool",
          "loc": { "line": 285, "column": 8 }
        },
        {
          "name": "is_inf",
          "docstring": " is_inf returns true if any elements of this 2D affine matrix are infinite.",
          "signature": "fn <a href=\"gmlewis/fonts/draw#AffineMatrix\">AffineMatrix</a>::is_inf(self : <a href=\"gmlewis/fonts/draw#AffineMatrix\">AffineMatrix</a>) -> Bool",
          "loc": { "line": 305, "column": 8 }
        },
        {
          "name": "is_invertible",
          "docstring": " is_invertible returns true if this 2D affine matrix is invertible.",
          "signature": "fn <a href=\"gmlewis/fonts/draw#AffineMatrix\">AffineMatrix</a>::is_invertible(self : <a href=\"gmlewis/fonts/draw#AffineMatrix\">AffineMatrix</a>) -> Bool",
          "loc": { "line": 265, "column": 8 }
        },
        {
          "name": "is_mirror",
          "docstring": " is_mirror returns true if this 2D affine matrix mirrors either axis.",
          "signature": "fn <a href=\"gmlewis/fonts/draw#AffineMatrix\">AffineMatrix</a>::is_mirror(self : <a href=\"gmlewis/fonts/draw#AffineMatrix\">AffineMatrix</a>) -> Bool",
          "loc": { "line": 280, "column": 8 }
        },
        {
          "name": "is_nan",
          "docstring": " is_nan returns true if any elements of this 2D affine matrix are NaN (not a number).",
          "signature": "fn <a href=\"gmlewis/fonts/draw#AffineMatrix\">AffineMatrix</a>::is_nan(self : <a href=\"gmlewis/fonts/draw#AffineMatrix\">AffineMatrix</a>) -> Bool",
          "loc": { "line": 295, "column": 8 }
        },
        {
          "name": "is_orthogonal",
          "docstring": " is_orthogonal returns true if the two basis vectors of the 2D affine matrix\n are orthogonal within the provided tolerance.",
          "signature": "fn <a href=\"gmlewis/fonts/draw#AffineMatrix\">AffineMatrix</a>::is_orthogonal(self : <a href=\"gmlewis/fonts/draw#AffineMatrix\">AffineMatrix</a>, tolerance~ : Double = ..) -> Bool",
          "loc": { "line": 256, "column": 8 }
        },
        {
          "name": "is_uniform_scale",
          "docstring": " is_uniform_scale returns true if both basis vectors of this 2D affine matrix\n are of the same length.",
          "signature": "fn <a href=\"gmlewis/fonts/draw#AffineMatrix\">AffineMatrix</a>::is_uniform_scale(self : <a href=\"gmlewis/fonts/draw#AffineMatrix\">AffineMatrix</a>, tolerance~ : Double = ..) -> Bool",
          "loc": { "line": 271, "column": 8 }
        },
        {
          "name": "mul",
          "docstring": " mul multiplies this 2D affine matrix with another.",
          "signature": "fn <a href=\"gmlewis/fonts/draw#AffineMatrix\">AffineMatrix</a>::mul(self : <a href=\"gmlewis/fonts/draw#AffineMatrix\">AffineMatrix</a>, m : <a href=\"gmlewis/fonts/draw#AffineMatrix\">AffineMatrix</a>) -> <a href=\"gmlewis/fonts/draw#AffineMatrix\">AffineMatrix</a>",
          "loc": { "line": 118, "column": 8 }
        },
        {
          "name": "mul_without_translation",
          "docstring": " mul_without_translation multiplies this 2D affine matrix with another,\n discarding the transation.",
          "signature": "fn <a href=\"gmlewis/fonts/draw#AffineMatrix\">AffineMatrix</a>::mul_without_translation(self : <a href=\"gmlewis/fonts/draw#AffineMatrix\">AffineMatrix</a>, m : <a href=\"gmlewis/fonts/draw#AffineMatrix\">AffineMatrix</a>) -> <a href=\"gmlewis/fonts/draw#AffineMatrix\">AffineMatrix</a>",
          "loc": { "line": 138, "column": 8 }
        },
        {
          "name": "new",
          "docstring": " AffineMatrix::new returns a new 2D affine matrix.",
          "signature": "fn <a href=\"gmlewis/fonts/draw#AffineMatrix\">AffineMatrix</a>::new(a~ : Double = .., b~ : Double = .., c~ : Double = .., d~ : Double = .., tx~ : Double = .., ty~ : Double = ..) -> <a href=\"gmlewis/fonts/draw#AffineMatrix\">AffineMatrix</a>",
          "loc": { "line": 16, "column": 22 }
        },
        {
          "name": "normalize",
          "docstring": " normalize scales the basis vectors of this 2D affine matrix\n so that they have unit length.",
          "signature": "fn <a href=\"gmlewis/fonts/draw#AffineMatrix\">AffineMatrix</a>::normalize(self : <a href=\"gmlewis/fonts/draw#AffineMatrix\">AffineMatrix</a>) -> <a href=\"gmlewis/fonts/draw#AffineMatrix\">AffineMatrix</a>",
          "loc": { "line": 231, "column": 8 }
        },
        {
          "name": "op_mul",
          "docstring": " op_mul multiplies two 2D affine matrices together, returning a new one.",
          "signature": "fn <a href=\"gmlewis/fonts/draw#AffineMatrix\">AffineMatrix</a>::op_mul(self : <a href=\"gmlewis/fonts/draw#AffineMatrix\">AffineMatrix</a>, b : <a href=\"gmlewis/fonts/draw#AffineMatrix\">AffineMatrix</a>) -> <a href=\"gmlewis/fonts/draw#AffineMatrix\">AffineMatrix</a>",
          "loc": { "line": 131, "column": 8 }
        },
        {
          "name": "origin",
          "docstring": " origin translates the matrix such that the center of future\n scale, rotate, and skew transformations will be `v`.",
          "signature": "fn <a href=\"gmlewis/fonts/draw#AffineMatrix\">AffineMatrix</a>::origin(self : <a href=\"gmlewis/fonts/draw#AffineMatrix\">AffineMatrix</a>, v : <a href=\"gmlewis/fonts/draw#Vec2\">Vec2</a>) -> <a href=\"gmlewis/fonts/draw#AffineMatrix\">AffineMatrix</a>",
          "loc": { "line": 222, "column": 8 }
        },
        {
          "name": "pre_mul",
          "docstring": " pre_mul multiplies another matrix `m` by this 2D affine matrix, then\n stores and returns the result.",
          "signature": "fn <a href=\"gmlewis/fonts/draw#AffineMatrix\">AffineMatrix</a>::pre_mul(self : <a href=\"gmlewis/fonts/draw#AffineMatrix\">AffineMatrix</a>, m : <a href=\"gmlewis/fonts/draw#AffineMatrix\">AffineMatrix</a>) -> <a href=\"gmlewis/fonts/draw#AffineMatrix\">AffineMatrix</a>",
          "loc": { "line": 153, "column": 8 }
        },
        {
          "name": "pre_mul_without_translation",
          "docstring": " pre_mul_without_translation multiplies another matrix `m` by this 2D affine matrix,\n discarding the translate, then stores and returns the result.",
          "signature": "fn <a href=\"gmlewis/fonts/draw#AffineMatrix\">AffineMatrix</a>::pre_mul_without_translation(self : <a href=\"gmlewis/fonts/draw#AffineMatrix\">AffineMatrix</a>, m : <a href=\"gmlewis/fonts/draw#AffineMatrix\">AffineMatrix</a>) -> <a href=\"gmlewis/fonts/draw#AffineMatrix\">AffineMatrix</a>",
          "loc": { "line": 167, "column": 8 }
        },
        {
          "name": "rotate",
          "docstring": " rotate rotates this 2D affine matrix by `angle` degrees.",
          "signature": "fn <a href=\"gmlewis/fonts/draw#AffineMatrix\">AffineMatrix</a>::rotate(self : <a href=\"gmlewis/fonts/draw#AffineMatrix\">AffineMatrix</a>, angle : Double) -> <a href=\"gmlewis/fonts/draw#AffineMatrix\">AffineMatrix</a>",
          "loc": { "line": 189, "column": 8 }
        },
        {
          "name": "scale",
          "docstring": " scale scales this 2D affine matrix by `v`.",
          "signature": "fn <a href=\"gmlewis/fonts/draw#AffineMatrix\">AffineMatrix</a>::scale(self : <a href=\"gmlewis/fonts/draw#AffineMatrix\">AffineMatrix</a>, v : <a href=\"gmlewis/fonts/draw#Vec2\">Vec2</a>) -> <a href=\"gmlewis/fonts/draw#AffineMatrix\">AffineMatrix</a>",
          "loc": { "line": 203, "column": 8 }
        },
        {
          "name": "scale_scalar",
          "docstring": " scale_scalar scales this 2D affine matrix uniformly by `s`.",
          "signature": "fn <a href=\"gmlewis/fonts/draw#AffineMatrix\">AffineMatrix</a>::scale_scalar(self : <a href=\"gmlewis/fonts/draw#AffineMatrix\">AffineMatrix</a>, s : Double) -> <a href=\"gmlewis/fonts/draw#AffineMatrix\">AffineMatrix</a>",
          "loc": { "line": 212, "column": 8 }
        },
        {
          "name": "skew",
          "docstring": " skew skews the Y basis vector of this 2D affine matrix by `angle` degrees.",
          "signature": "fn <a href=\"gmlewis/fonts/draw#AffineMatrix\">AffineMatrix</a>::skew(self : <a href=\"gmlewis/fonts/draw#AffineMatrix\">AffineMatrix</a>, angle : Double) -> <a href=\"gmlewis/fonts/draw#AffineMatrix\">AffineMatrix</a>",
          "loc": { "line": 194, "column": 8 }
        },
        {
          "name": "to_transform",
          "docstring": " to_transform converts this 2D affine matrix to a Transform.",
          "signature": "fn <a href=\"gmlewis/fonts/draw#AffineMatrix\">AffineMatrix</a>::to_transform(self : <a href=\"gmlewis/fonts/draw#AffineMatrix\">AffineMatrix</a>, origin~ : <a href=\"gmlewis/fonts/draw#Vec2\">Vec2</a> = ..) -> <a href=\"gmlewis/fonts/draw#Transform\">Transform</a>",
          "loc": { "line": 329, "column": 8 }
        },
        {
          "name": "translate",
          "docstring": " translate translates this 2D affine matrix by position `v`.",
          "signature": "fn <a href=\"gmlewis/fonts/draw#AffineMatrix\">AffineMatrix</a>::translate(self : <a href=\"gmlewis/fonts/draw#AffineMatrix\">AffineMatrix</a>, v : <a href=\"gmlewis/fonts/draw#Vec2\">Vec2</a>) -> <a href=\"gmlewis/fonts/draw#AffineMatrix\">AffineMatrix</a>",
          "loc": { "line": 181, "column": 8 }
        }
      ],
      "impls": [
        {
          "docstring": "",
          "signature": "impl <a href=\"moonbitlang/core/builtin#Eq\">Eq</a> for <a href=\"gmlewis/fonts/draw#AffineMatrix\">AffineMatrix</a>",
          "methods": [
            {
              "name": "op_equal",
              "docstring": "automatically derived",
              "signature": "fn op_equal(<a href=\"gmlewis/fonts/draw#AffineMatrix\">AffineMatrix</a>, <a href=\"gmlewis/fonts/draw#AffineMatrix\">AffineMatrix</a>) -> Bool",
              "loc": { "line": 13, "column": 16 }
            }
          ],
          "loc": { "line": 13, "column": 16 }
        },
        {
          "docstring": "",
          "signature": "impl <a href=\"moonbitlang/core/builtin#Show\">Show</a> for <a href=\"gmlewis/fonts/draw#AffineMatrix\">AffineMatrix</a>",
          "methods": [
            {
              "name": "output",
              "docstring": "automatically derived",
              "signature": "fn output(<a href=\"gmlewis/fonts/draw#AffineMatrix\">AffineMatrix</a>, <a href=\"moonbitlang/core/builtin#Logger\">Logger</a>) -> Unit",
              "loc": { "line": 13, "column": 10 }
            }
          ],
          "loc": { "line": 13, "column": 10 }
        }
      ]
    },
    {
      "name": "Anchor",
      "docstring": " Anchor represents a single point in a path. Two anchors form a segment.\n The position of an Anchor is absolute and the handles are both relative.",
      "signature": "pub(all) struct Anchor {\n  position : <a href=\"gmlewis/fonts/draw#Vec2\">Vec2</a>\n  handle_in : <a href=\"gmlewis/fonts/draw#Vec2\">Vec2</a>\n  handle_out : <a href=\"gmlewis/fonts/draw#Vec2\">Vec2</a>\n}",
      "loc": { "line": 3, "column": 17 },
      "methods": [
        {
          "name": "affine_transform",
          "docstring": " affine_transform transforms this Anchor by the provided `affine_matrix`.",
          "signature": "fn <a href=\"gmlewis/fonts/draw#Anchor\">Anchor</a>::affine_transform(self : <a href=\"gmlewis/fonts/draw#Anchor\">Anchor</a>, affine_matrix : <a href=\"gmlewis/fonts/draw#AffineMatrix\">AffineMatrix</a>) -> <a href=\"gmlewis/fonts/draw#Anchor\">Anchor</a>",
          "loc": { "line": 29, "column": 8 }
        },
        {
          "name": "affine_transform_without_translation",
          "docstring": " affine_transform_without_translation transforms this Anchor's rotation, scale,\n and skew, without affecting its translation.",
          "signature": "fn <a href=\"gmlewis/fonts/draw#Anchor\">Anchor</a>::affine_transform_without_translation(self : <a href=\"gmlewis/fonts/draw#Anchor\">Anchor</a>, affine_matrix : <a href=\"gmlewis/fonts/draw#AffineMatrix\">AffineMatrix</a>) -> <a href=\"gmlewis/fonts/draw#Anchor\">Anchor</a>",
          "loc": { "line": 38, "column": 8 }
        },
        {
          "name": "all_anchors",
          "docstring": " all_anchors returns all anchors.",
          "signature": "fn <a href=\"gmlewis/fonts/draw#Anchor\">Anchor</a>::all_anchors(self : <a href=\"gmlewis/fonts/draw#Anchor\">Anchor</a>) -> <a href=\"moonbitlang/core/array#Array\">Array</a>[<a href=\"gmlewis/fonts/draw#Anchor\">Anchor</a>]",
          "loc": { "line": 142, "column": 8 }
        },
        {
          "name": "bounding_box",
          "docstring": " bounding_box returns a BoundingBox for this Anchor.",
          "signature": "fn <a href=\"gmlewis/fonts/draw#Anchor\">Anchor</a>::bounding_box(self : <a href=\"gmlewis/fonts/draw#Anchor\">Anchor</a>) -> <a href=\"gmlewis/fonts/draw#BoundingBox\">BoundingBox</a>?",
          "loc": { "line": 70, "column": 8 }
        },
        {
          "name": "clone",
          "docstring": " clone makes a new copy of this Anchor.",
          "signature": "fn <a href=\"gmlewis/fonts/draw#Anchor\">Anchor</a>::clone(self : <a href=\"gmlewis/fonts/draw#Anchor\">Anchor</a>) -> <a href=\"gmlewis/fonts/draw#Anchor\">Anchor</a>",
          "loc": { "line": 20, "column": 8 }
        },
        {
          "name": "closest_point",
          "docstring": " closest_point returns the closest point to `point` or None if no point is found.\n area_of_interest is used to focus the computation within a smaller region.",
          "signature": "fn <a href=\"gmlewis/fonts/draw#Anchor\">Anchor</a>::closest_point(self : <a href=\"gmlewis/fonts/draw#Anchor\">Anchor</a>, point : <a href=\"gmlewis/fonts/draw#Vec2\">Vec2</a>, area_of_interest? : <a href=\"gmlewis/fonts/draw#BoundingBox\">BoundingBox</a>) -> <a href=\"gmlewis/fonts/draw#Vec2\">Vec2</a>?",
          "loc": { "line": 95, "column": 8 }
        },
        {
          "name": "has_tangent_handles",
          "docstring": " has_tangent_handles returns true if this Anchor has handles that\n are tangent to each other.",
          "signature": "fn <a href=\"gmlewis/fonts/draw#Anchor\">Anchor</a>::has_tangent_handles(self : <a href=\"gmlewis/fonts/draw#Anchor\">Anchor</a>, tolerance~ : Double = ..) -> Bool",
          "loc": { "line": 127, "column": 8 }
        },
        {
          "name": "has_zero_handles",
          "docstring": " has_zero_handles returns true if this Anchor has handles that are both zero.",
          "signature": "fn <a href=\"gmlewis/fonts/draw#Anchor\">Anchor</a>::has_zero_handles(self : <a href=\"gmlewis/fonts/draw#Anchor\">Anchor</a>) -> Bool",
          "loc": { "line": 137, "column": 8 }
        },
        {
          "name": "is_contained_by_bounding_box",
          "docstring": " is_contained_by_bounding_box returns true if this Anchor lies within `box`.",
          "signature": "fn <a href=\"gmlewis/fonts/draw#Anchor\">Anchor</a>::is_contained_by_bounding_box(self : <a href=\"gmlewis/fonts/draw#Anchor\">Anchor</a>, box : <a href=\"gmlewis/fonts/draw#BoundingBox\">BoundingBox</a>) -> Bool",
          "loc": { "line": 75, "column": 8 }
        },
        {
          "name": "is_intersected_by_bounding_box",
          "docstring": " is_intersected_by_bounding_box returns true if the Anchor lies on the\n boundary of `box`.",
          "signature": "fn <a href=\"gmlewis/fonts/draw#Anchor\">Anchor</a>::is_intersected_by_bounding_box(self : <a href=\"gmlewis/fonts/draw#Anchor\">Anchor</a>, box : <a href=\"gmlewis/fonts/draw#BoundingBox\">BoundingBox</a>) -> Bool",
          "loc": { "line": 81, "column": 8 }
        },
        {
          "name": "is_overlapped_by_bounding_box",
          "docstring": " is_overlapped_by_bounding_box returns true if the Anchor is within `box`.",
          "signature": "fn <a href=\"gmlewis/fonts/draw#Anchor\">Anchor</a>::is_overlapped_by_bounding_box(self : <a href=\"gmlewis/fonts/draw#Anchor\">Anchor</a>, box : <a href=\"gmlewis/fonts/draw#BoundingBox\">BoundingBox</a>) -> Bool",
          "loc": { "line": 89, "column": 8 }
        },
        {
          "name": "loose_bounding_box",
          "docstring": " loose_bounding_box is a simple computation that returns a BoundingBox which\n may not be the smallest possible.",
          "signature": "fn <a href=\"gmlewis/fonts/draw#Anchor\">Anchor</a>::loose_bounding_box(self : <a href=\"gmlewis/fonts/draw#Anchor\">Anchor</a>) -> <a href=\"gmlewis/fonts/draw#BoundingBox\">BoundingBox</a>?",
          "loc": { "line": 65, "column": 8 }
        },
        {
          "name": "new",
          "docstring": " Anchor::new returns a new anchor. You must either create new Vec2 points\n or clone them before passing them in.",
          "signature": "fn <a href=\"gmlewis/fonts/draw#Anchor\">Anchor</a>::new(position~ : <a href=\"gmlewis/fonts/draw#Vec2\">Vec2</a> = .., handle_in~ : <a href=\"gmlewis/fonts/draw#Vec2\">Vec2</a> = .., handle_out~ : <a href=\"gmlewis/fonts/draw#Vec2\">Vec2</a> = ..) -> <a href=\"gmlewis/fonts/draw#Anchor\">Anchor</a>",
          "loc": { "line": 11, "column": 16 }
        },
        {
          "name": "reverse",
          "docstring": " reverse reverses this Anchor.",
          "signature": "fn <a href=\"gmlewis/fonts/draw#Anchor\">Anchor</a>::reverse(self : <a href=\"gmlewis/fonts/draw#Anchor\">Anchor</a>) -> <a href=\"gmlewis/fonts/draw#Anchor\">Anchor</a>",
          "loc": { "line": 112, "column": 8 }
        },
        {
          "name": "transform",
          "docstring": " transform provides a convenient API for a common task.",
          "signature": "fn <a href=\"gmlewis/fonts/draw#Anchor\">Anchor</a>::transform(self : <a href=\"gmlewis/fonts/draw#Anchor\">Anchor</a>, position~ : <a href=\"gmlewis/fonts/draw#Vec2\">Vec2</a> = .., rotation~ : Double = .., scale~ : <a href=\"gmlewis/fonts/draw#Vec2\">Vec2</a> = .., skew~ : Double = .., origin~ : <a href=\"gmlewis/fonts/draw#Vec2\">Vec2</a> = ..) -> <a href=\"gmlewis/fonts/draw#Anchor\">Anchor</a>",
          "loc": { "line": 49, "column": 8 }
        }
      ],
      "impls": [
        {
          "docstring": "",
          "signature": "impl <a href=\"moonbitlang/core/builtin#Eq\">Eq</a> for <a href=\"gmlewis/fonts/draw#Anchor\">Anchor</a>",
          "methods": [
            {
              "name": "op_equal",
              "docstring": "automatically derived",
              "signature": "fn op_equal(<a href=\"gmlewis/fonts/draw#Anchor\">Anchor</a>, <a href=\"gmlewis/fonts/draw#Anchor\">Anchor</a>) -> Bool",
              "loc": { "line": 7, "column": 16 }
            }
          ],
          "loc": { "line": 7, "column": 16 }
        },
        {
          "docstring": "",
          "signature": "impl <a href=\"moonbitlang/core/builtin#Show\">Show</a> for <a href=\"gmlewis/fonts/draw#Anchor\">Anchor</a>",
          "methods": [
            {
              "name": "output",
              "docstring": "automatically derived",
              "signature": "fn output(<a href=\"gmlewis/fonts/draw#Anchor\">Anchor</a>, <a href=\"moonbitlang/core/builtin#Logger\">Logger</a>) -> Unit",
              "loc": { "line": 7, "column": 10 }
            }
          ],
          "loc": { "line": 7, "column": 10 }
        },
        {
          "docstring": "",
          "signature": "impl <a href=\"moonbitlang/core/builtin#ToJson\">ToJson</a> for <a href=\"gmlewis/fonts/draw#Anchor\">Anchor</a>",
          "methods": [
            {
              "name": "to_json",
              "docstring": "automatically derived",
              "signature": "fn to_json(<a href=\"gmlewis/fonts/draw#Anchor\">Anchor</a>) -> <a href=\"moonbitlang/core/json#Json\">Json</a>",
              "loc": { "line": 7, "column": 30 }
            }
          ],
          "loc": { "line": 7, "column": 30 }
        },
        {
          "docstring": "",
          "signature": "impl <a href=\"moonbitlang/core/json#FromJson\">@moonbitlang/core/json.FromJson</a> for <a href=\"gmlewis/fonts/draw#Anchor\">Anchor</a>",
          "methods": [
            {
              "name": "from_json",
              "docstring": "automatically derived",
              "signature": "fn from_json(<a href=\"moonbitlang/core/json#Json\">Json</a>, <a href=\"moonbitlang/core/json#JsonPath\">@moonbitlang/core/json.JsonPath</a>) -> <a href=\"gmlewis/fonts/draw#Anchor\">Anchor</a>!<a href=\"moonbitlang/core/json#JsonDecodeError\">@moonbitlang/core/json.JsonDecodeError</a>",
              "loc": { "line": 7, "column": 20 }
            }
          ],
          "loc": { "line": 7, "column": 20 }
        }
      ]
    },
    {
      "name": "BoundingBox",
      "docstring": " BoundingBox represents a minimum bounding box as an axis-aligned rectangle.",
      "signature": "pub(all) struct BoundingBox {\n  min : <a href=\"gmlewis/fonts/draw#Vec2\">Vec2</a>\n  max : <a href=\"gmlewis/fonts/draw#Vec2\">Vec2</a>\n}",
      "loc": { "line": 2, "column": 17 },
      "methods": [
        {
          "name": "area",
          "docstring": " area represents the signed area of the bounding box (width*height).\n If min > max, the area will be negative.",
          "signature": "fn <a href=\"gmlewis/fonts/draw#BoundingBox\">BoundingBox</a>::area(self : <a href=\"gmlewis/fonts/draw#BoundingBox\">BoundingBox</a>) -> Double",
          "loc": { "line": 73, "column": 8 }
        },
        {
          "name": "boolean_intersect",
          "docstring": " boolean_intersect returns a new BoundingBox representing the intersection\n of this bounding box with one or more boxes if one exists.",
          "signature": "fn <a href=\"gmlewis/fonts/draw#BoundingBox\">BoundingBox</a>::boolean_intersect(self : <a href=\"gmlewis/fonts/draw#BoundingBox\">BoundingBox</a>, boxes : <a href=\"moonbitlang/core/array#Array\">Array</a>[<a href=\"gmlewis/fonts/draw#BoundingBox\">BoundingBox</a>]) -> <a href=\"gmlewis/fonts/draw#BoundingBox\">BoundingBox</a>?",
          "loc": { "line": 145, "column": 8 }
        },
        {
          "name": "canonicalize",
          "docstring": " canonicalize ensures that min < max.",
          "signature": "fn <a href=\"gmlewis/fonts/draw#BoundingBox\">BoundingBox</a>::canonicalize(self : <a href=\"gmlewis/fonts/draw#BoundingBox\">BoundingBox</a>) -> <a href=\"gmlewis/fonts/draw#BoundingBox\">BoundingBox</a>",
          "loc": { "line": 88, "column": 8 }
        },
        {
          "name": "center",
          "docstring": " center returns the center point of the bounding box (the average of min and max).",
          "signature": "fn <a href=\"gmlewis/fonts/draw#BoundingBox\">BoundingBox</a>::center(self : <a href=\"gmlewis/fonts/draw#BoundingBox\">BoundingBox</a>) -> <a href=\"gmlewis/fonts/draw#Vec2\">Vec2</a>",
          "loc": { "line": 52, "column": 8 }
        },
        {
          "name": "clone",
          "docstring": " clone makes a copy of the bounding box.",
          "signature": "fn <a href=\"gmlewis/fonts/draw#BoundingBox\">BoundingBox</a>::clone(self : <a href=\"gmlewis/fonts/draw#BoundingBox\">BoundingBox</a>) -> <a href=\"gmlewis/fonts/draw#BoundingBox\">BoundingBox</a>",
          "loc": { "line": 47, "column": 8 }
        },
        {
          "name": "contains_bounding_box",
          "docstring": " contains_bounding_box returns true if `box` is contained within this bounding box.",
          "signature": "fn <a href=\"gmlewis/fonts/draw#BoundingBox\">BoundingBox</a>::contains_bounding_box(self : <a href=\"gmlewis/fonts/draw#BoundingBox\">BoundingBox</a>, box : <a href=\"gmlewis/fonts/draw#BoundingBox\">BoundingBox</a>) -> Bool",
          "loc": { "line": 125, "column": 8 }
        },
        {
          "name": "contains_point",
          "docstring": " contains_point returns true if `point` is contained within this bounding box.",
          "signature": "fn <a href=\"gmlewis/fonts/draw#BoundingBox\">BoundingBox</a>::contains_point(self : <a href=\"gmlewis/fonts/draw#BoundingBox\">BoundingBox</a>, point : <a href=\"gmlewis/fonts/draw#Vec2\">Vec2</a>) -> Bool",
          "loc": { "line": 119, "column": 8 }
        },
        {
          "name": "expand_scalar",
          "docstring": " expand_scalar expands this bounding box by a scalar distance on all sides.",
          "signature": "fn <a href=\"gmlewis/fonts/draw#BoundingBox\">BoundingBox</a>::expand_scalar(self : <a href=\"gmlewis/fonts/draw#BoundingBox\">BoundingBox</a>, distance : Double) -> <a href=\"gmlewis/fonts/draw#BoundingBox\">BoundingBox</a>",
          "loc": { "line": 112, "column": 8 }
        },
        {
          "name": "expand_to_include_bounding_box",
          "docstring": " expand_to_include_bounding_box expands this bounding box to also cover `box`.",
          "signature": "fn <a href=\"gmlewis/fonts/draw#BoundingBox\">BoundingBox</a>::expand_to_include_bounding_box(self : <a href=\"gmlewis/fonts/draw#BoundingBox\">BoundingBox</a>, box : <a href=\"gmlewis/fonts/draw#BoundingBox\">BoundingBox</a>) -> <a href=\"gmlewis/fonts/draw#BoundingBox\">BoundingBox</a>",
          "loc": { "line": 104, "column": 8 }
        },
        {
          "name": "expand_to_include_point",
          "docstring": " expand_to_include_point expands this bounding box to include `point`.",
          "signature": "fn <a href=\"gmlewis/fonts/draw#BoundingBox\">BoundingBox</a>::expand_to_include_point(self : <a href=\"gmlewis/fonts/draw#BoundingBox\">BoundingBox</a>, point : <a href=\"gmlewis/fonts/draw#Vec2\">Vec2</a>) -> <a href=\"gmlewis/fonts/draw#BoundingBox\">BoundingBox</a>",
          "loc": { "line": 97, "column": 8 }
        },
        {
          "name": "from_points",
          "docstring": " BoundingBox::from_points constructs the minimum bounding box containing `points`.",
          "signature": "fn <a href=\"gmlewis/fonts/draw#BoundingBox\">BoundingBox</a>::from_points(points : <a href=\"moonbitlang/core/array#Array\">Array</a>[<a href=\"gmlewis/fonts/draw#Vec2\">Vec2</a>]) -> <a href=\"gmlewis/fonts/draw#BoundingBox\">BoundingBox</a>",
          "loc": { "line": 36, "column": 21 }
        },
        {
          "name": "height",
          "docstring": " height returns the height of the bounding box.",
          "signature": "fn <a href=\"gmlewis/fonts/draw#BoundingBox\">BoundingBox</a>::height(self : <a href=\"gmlewis/fonts/draw#BoundingBox\">BoundingBox</a>) -> Double",
          "loc": { "line": 67, "column": 8 }
        },
        {
          "name": "is_inf",
          "docstring": " is_inf returns true if either min or max is_inf.",
          "signature": "fn <a href=\"gmlewis/fonts/draw#BoundingBox\">BoundingBox</a>::is_inf(self : <a href=\"gmlewis/fonts/draw#BoundingBox\">BoundingBox</a>) -> Bool",
          "loc": { "line": 78, "column": 8 }
        },
        {
          "name": "is_nan",
          "docstring": " is_nan returns true if either min or max is_nan.",
          "signature": "fn <a href=\"gmlewis/fonts/draw#BoundingBox\">BoundingBox</a>::is_nan(self : <a href=\"gmlewis/fonts/draw#BoundingBox\">BoundingBox</a>) -> Bool",
          "loc": { "line": 83, "column": 8 }
        },
        {
          "name": "max_reversed",
          "docstring": " BoundingBox::max_reversed returns a new BoundingBox with min=+infinity\n and max=-infinity.",
          "signature": "fn <a href=\"gmlewis/fonts/draw#BoundingBox\">BoundingBox</a>::max_reversed() -> <a href=\"gmlewis/fonts/draw#BoundingBox\">BoundingBox</a>",
          "loc": { "line": 29, "column": 21 }
        },
        {
          "name": "new",
          "docstring": " BoundingBox::new returns a new empty BoundingBox.",
          "signature": "fn <a href=\"gmlewis/fonts/draw#BoundingBox\">BoundingBox</a>::new(min~ : <a href=\"gmlewis/fonts/draw#Vec2\">Vec2</a> = .., max~ : <a href=\"gmlewis/fonts/draw#Vec2\">Vec2</a> = ..) -> <a href=\"gmlewis/fonts/draw#BoundingBox\">BoundingBox</a>",
          "loc": { "line": 8, "column": 21 }
        },
        {
          "name": "overlaps_bounding_box",
          "docstring": " overlaps_bounding_box returns true if any part of `box` overlaps this bounding box.",
          "signature": "fn <a href=\"gmlewis/fonts/draw#BoundingBox\">BoundingBox</a>::overlaps_bounding_box(self : <a href=\"gmlewis/fonts/draw#BoundingBox\">BoundingBox</a>, box : <a href=\"gmlewis/fonts/draw#BoundingBox\">BoundingBox</a>) -> Bool",
          "loc": { "line": 134, "column": 8 }
        },
        {
          "name": "size",
          "docstring": " size returns a vector representing the (width,height) of the bounding box.",
          "signature": "fn <a href=\"gmlewis/fonts/draw#BoundingBox\">BoundingBox</a>::size(self : <a href=\"gmlewis/fonts/draw#BoundingBox\">BoundingBox</a>) -> <a href=\"gmlewis/fonts/draw#Vec2\">Vec2</a>",
          "loc": { "line": 57, "column": 8 }
        },
        {
          "name": "width",
          "docstring": " width returns the width of the bounding box.",
          "signature": "fn <a href=\"gmlewis/fonts/draw#BoundingBox\">BoundingBox</a>::width(self : <a href=\"gmlewis/fonts/draw#BoundingBox\">BoundingBox</a>) -> Double",
          "loc": { "line": 62, "column": 8 }
        }
      ],
      "impls": [
        {
          "docstring": "",
          "signature": "impl <a href=\"moonbitlang/core/builtin#Eq\">Eq</a> for <a href=\"gmlewis/fonts/draw#BoundingBox\">BoundingBox</a>",
          "methods": [
            {
              "name": "op_equal",
              "docstring": "automatically derived",
              "signature": "fn op_equal(<a href=\"gmlewis/fonts/draw#BoundingBox\">BoundingBox</a>, <a href=\"gmlewis/fonts/draw#BoundingBox\">BoundingBox</a>) -> Bool",
              "loc": { "line": 5, "column": 16 }
            }
          ],
          "loc": { "line": 5, "column": 16 }
        },
        {
          "docstring": "",
          "signature": "impl <a href=\"moonbitlang/core/builtin#Show\">Show</a> for <a href=\"gmlewis/fonts/draw#BoundingBox\">BoundingBox</a>",
          "methods": [
            {
              "name": "output",
              "docstring": "automatically derived",
              "signature": "fn output(<a href=\"gmlewis/fonts/draw#BoundingBox\">BoundingBox</a>, <a href=\"moonbitlang/core/builtin#Logger\">Logger</a>) -> Unit",
              "loc": { "line": 5, "column": 10 }
            }
          ],
          "loc": { "line": 5, "column": 10 }
        }
      ]
    },
    {
      "name": "Color",
      "docstring": " Color represents a color in RGBA color space.",
      "signature": "pub(all) struct Color {\n  r : Double\n  g : Double\n  b : Double\n  a : Double\n}",
      "loc": { "line": 2, "column": 17 },
      "methods": [
        {
          "name": "as_fill",
          "docstring": " as_fill is a convenience function for setting a fill color.",
          "signature": "fn <a href=\"gmlewis/fonts/draw#Color\">Color</a>::as_fill(self : <a href=\"gmlewis/fonts/draw#Color\">Color</a>) -> <a href=\"gmlewis/fonts/draw#Fill\">Fill</a>?",
          "loc": { "line": 163, "column": 8 }
        },
        {
          "name": "clone",
          "docstring": " clone returns a new copy of this Color.",
          "signature": "fn <a href=\"gmlewis/fonts/draw#Color\">Color</a>::clone(self : <a href=\"gmlewis/fonts/draw#Color\">Color</a>) -> <a href=\"gmlewis/fonts/draw#Color\">Color</a>",
          "loc": { "line": 168, "column": 8 }
        },
        {
          "name": "from_css_string",
          "docstring": " Color::from_css_string returns a color from a CSS string.",
          "signature": "fn <a href=\"gmlewis/fonts/draw#Color\">Color</a>::from_css_string(css_string : String) -> <a href=\"gmlewis/fonts/draw#Color\">Color</a>!<a href=\"moonbitlang/core/error#Error\">Error</a>",
          "loc": { "line": 90, "column": 15 }
        },
        {
          "name": "from_hsva",
          "docstring": " Color::from_hsva creates a color by converting HSVA space to RGBA.",
          "signature": "fn <a href=\"gmlewis/fonts/draw#Color\">Color</a>::from_hsva(hue : Double, saturation : Double, value : Double, alpha : Double) -> <a href=\"gmlewis/fonts/draw#Color\">Color</a>",
          "loc": { "line": 25, "column": 15 }
        },
        {
          "name": "from_rgb8_number",
          "docstring": " Color::from_rgb8_number returns a color from a bit-packed RGB8 format.",
          "signature": "fn <a href=\"gmlewis/fonts/draw#Color\">Color</a>::from_rgb8_number(value : UInt) -> <a href=\"gmlewis/fonts/draw#Color\">Color</a>",
          "loc": { "line": 155, "column": 15 }
        },
        {
          "name": "luminance",
          "docstring": " luminance returns the relative luminance of this color for standard human vision.",
          "signature": "fn <a href=\"gmlewis/fonts/draw#Color\">Color</a>::luminance(self : <a href=\"gmlewis/fonts/draw#Color\">Color</a>) -> Double",
          "loc": { "line": 197, "column": 8 }
        },
        {
          "name": "mix",
          "docstring": " mix linearly interpolates between this Color and `c` with mixing factor `t`.",
          "signature": "fn <a href=\"gmlewis/fonts/draw#Color\">Color</a>::mix(self : <a href=\"gmlewis/fonts/draw#Color\">Color</a>, c : <a href=\"gmlewis/fonts/draw#Color\">Color</a>, t : Double) -> <a href=\"gmlewis/fonts/draw#Color\">Color</a>",
          "loc": { "line": 188, "column": 8 }
        },
        {
          "name": "new",
          "docstring": " Color::new returns a new color.",
          "signature": "fn <a href=\"gmlewis/fonts/draw#Color\">Color</a>::new(r~ : Double = .., g~ : Double = .., b~ : Double = .., a~ : Double = ..) -> <a href=\"gmlewis/fonts/draw#Color\">Color</a>",
          "loc": { "line": 10, "column": 15 }
        },
        {
          "name": "set",
          "docstring": " set sets the RGBA components of this Color.",
          "signature": "fn <a href=\"gmlewis/fonts/draw#Color\">Color</a>::set(self : <a href=\"gmlewis/fonts/draw#Color\">Color</a>, r : Double, g : Double, b : Double, a : Double) -> <a href=\"gmlewis/fonts/draw#Color\">Color</a>",
          "loc": { "line": 173, "column": 8 }
        },
        {
          "name": "to_css_hex_string",
          "docstring": " to_css_hex_string returns a CSS-style hex string for this color.",
          "signature": "fn <a href=\"gmlewis/fonts/draw#Color\">Color</a>::to_css_hex_string(self : <a href=\"gmlewis/fonts/draw#Color\">Color</a>) -> String",
          "loc": { "line": 242, "column": 8 }
        },
        {
          "name": "to_css_rgba_string",
          "docstring": " to_css_rgba_string returns a CSS-style \"rgba()\" string for this color.",
          "signature": "fn <a href=\"gmlewis/fonts/draw#Color\">Color</a>::to_css_rgba_string(self : <a href=\"gmlewis/fonts/draw#Color\">Color</a>) -> String",
          "loc": { "line": 259, "column": 8 }
        },
        {
          "name": "to_css_string",
          "docstring": " to_css_string returns a CSS-style string for this color.",
          "signature": "fn <a href=\"gmlewis/fonts/draw#Color\">Color</a>::to_css_string(self : <a href=\"gmlewis/fonts/draw#Color\">Color</a>) -> String",
          "loc": { "line": 202, "column": 8 }
        },
        {
          "name": "to_hsva",
          "docstring": " to_hsva converts this color to the HSVA color space, returning\n [hue, saturation, value, alpha] in the range (0..1).",
          "signature": "fn <a href=\"gmlewis/fonts/draw#Color\">Color</a>::to_hsva(self : <a href=\"gmlewis/fonts/draw#Color\">Color</a>) -> <a href=\"moonbitlang/core/array#Array\">Array</a>[Double]",
          "loc": { "line": 277, "column": 8 }
        },
        {
          "name": "to_rgb8_number",
          "docstring": " to_rgb8_number returns a bit-packed number in RGB8 format.",
          "signature": "fn <a href=\"gmlewis/fonts/draw#Color\">Color</a>::to_rgb8_number(self : <a href=\"gmlewis/fonts/draw#Color\">Color</a>) -> UInt",
          "loc": { "line": 268, "column": 8 }
        }
      ],
      "impls": [
        {
          "docstring": "",
          "signature": "impl <a href=\"moonbitlang/core/builtin#Eq\">Eq</a> for <a href=\"gmlewis/fonts/draw#Color\">Color</a>",
          "methods": [
            {
              "name": "op_equal",
              "docstring": "automatically derived",
              "signature": "fn op_equal(<a href=\"gmlewis/fonts/draw#Color\">Color</a>, <a href=\"gmlewis/fonts/draw#Color\">Color</a>) -> Bool",
              "loc": { "line": 7, "column": 16 }
            }
          ],
          "loc": { "line": 7, "column": 16 }
        },
        {
          "docstring": "",
          "signature": "impl <a href=\"moonbitlang/core/builtin#Show\">Show</a> for <a href=\"gmlewis/fonts/draw#Color\">Color</a>",
          "methods": [
            {
              "name": "output",
              "docstring": "automatically derived",
              "signature": "fn output(<a href=\"gmlewis/fonts/draw#Color\">Color</a>, <a href=\"moonbitlang/core/builtin#Logger\">Logger</a>) -> Unit",
              "loc": { "line": 7, "column": 10 }
            }
          ],
          "loc": { "line": 7, "column": 10 }
        },
        {
          "docstring": "",
          "signature": "impl <a href=\"moonbitlang/core/builtin#ToJson\">ToJson</a> for <a href=\"gmlewis/fonts/draw#Color\">Color</a>",
          "methods": [
            {
              "name": "to_json",
              "docstring": "automatically derived",
              "signature": "fn to_json(<a href=\"gmlewis/fonts/draw#Color\">Color</a>) -> <a href=\"moonbitlang/core/json#Json\">Json</a>",
              "loc": { "line": 7, "column": 30 }
            }
          ],
          "loc": { "line": 7, "column": 30 }
        },
        {
          "docstring": "",
          "signature": "impl <a href=\"moonbitlang/core/json#FromJson\">@moonbitlang/core/json.FromJson</a> for <a href=\"gmlewis/fonts/draw#Color\">Color</a>",
          "methods": [
            {
              "name": "from_json",
              "docstring": "automatically derived",
              "signature": "fn from_json(<a href=\"moonbitlang/core/json#Json\">Json</a>, <a href=\"moonbitlang/core/json#JsonPath\">@moonbitlang/core/json.JsonPath</a>) -> <a href=\"gmlewis/fonts/draw#Color\">Color</a>!<a href=\"moonbitlang/core/json#JsonDecodeError\">@moonbitlang/core/json.JsonDecodeError</a>",
              "loc": { "line": 7, "column": 20 }
            }
          ],
          "loc": { "line": 7, "column": 20 }
        }
      ]
    },
    {
      "name": "CompoundPath",
      "docstring": " CompoundPath represents one or more paths that typically make up a font glyph.",
      "signature": "pub(all) struct CompoundPath {\n  paths : <a href=\"moonbitlang/core/array#Array\">Array</a>[<a href=\"gmlewis/fonts/draw#Path\">Path</a>]\n  fill : <a href=\"gmlewis/fonts/draw#Fill\">Fill</a>?\n  stroke : <a href=\"gmlewis/fonts/draw#Stroke\">Stroke</a>?\n}",
      "loc": { "line": 2, "column": 17 },
      "methods": [
        {
          "name": "affine_transform",
          "docstring": " affine_transform transforms this CompoundPath by `affine_matrix`.",
          "signature": "fn <a href=\"gmlewis/fonts/draw#CompoundPath\">CompoundPath</a>::affine_transform(self : <a href=\"gmlewis/fonts/draw#CompoundPath\">CompoundPath</a>, affine_matrix : <a href=\"gmlewis/fonts/draw#AffineMatrix\">AffineMatrix</a>) -> <a href=\"gmlewis/fonts/draw#CompoundPath\">CompoundPath</a>",
          "loc": { "line": 41, "column": 8 }
        },
        {
          "name": "affine_transform_without_translation",
          "docstring": " affine_transform_without_translation transforms this CompoundPath by `affine_matrix`\n without affecting translation.",
          "signature": "fn <a href=\"gmlewis/fonts/draw#CompoundPath\">CompoundPath</a>::affine_transform_without_translation(self : <a href=\"gmlewis/fonts/draw#CompoundPath\">CompoundPath</a>, affine_matrix : <a href=\"gmlewis/fonts/draw#AffineMatrix\">AffineMatrix</a>) -> <a href=\"gmlewis/fonts/draw#CompoundPath\">CompoundPath</a>",
          "loc": { "line": 53, "column": 8 }
        },
        {
          "name": "all_anchors",
          "docstring": " all_anchors returns a flattened array of all anchors in this CompoundPath.",
          "signature": "fn <a href=\"gmlewis/fonts/draw#CompoundPath\">CompoundPath</a>::all_anchors(self : <a href=\"gmlewis/fonts/draw#CompoundPath\">CompoundPath</a>) -> <a href=\"moonbitlang/core/array#Array\">Array</a>[<a href=\"gmlewis/fonts/draw#Anchor\">Anchor</a>]",
          "loc": { "line": 306, "column": 8 }
        },
        {
          "name": "as_graphic",
          "docstring": " as_graphic returns a CompoundPath as a Graphic.",
          "signature": "fn <a href=\"gmlewis/fonts/draw#CompoundPath\">CompoundPath</a>::as_graphic(self : <a href=\"gmlewis/fonts/draw#CompoundPath\">CompoundPath</a>) -> <a href=\"gmlewis/fonts/draw#Graphic\">Graphic</a>",
          "loc": { "line": 18, "column": 8 }
        },
        {
          "name": "assign_fill",
          "docstring": " assign_fill assigns a fill to this CompoundPath.",
          "signature": "fn <a href=\"gmlewis/fonts/draw#CompoundPath\">CompoundPath</a>::assign_fill(self : <a href=\"gmlewis/fonts/draw#CompoundPath\">CompoundPath</a>, fill : <a href=\"gmlewis/fonts/draw#Fill\">Fill</a>?) -> <a href=\"gmlewis/fonts/draw#CompoundPath\">CompoundPath</a>",
          "loc": { "line": 79, "column": 8 }
        },
        {
          "name": "assign_stroke",
          "docstring": " assign_stroke assigns a stroke to this CompoundPath.",
          "signature": "fn <a href=\"gmlewis/fonts/draw#CompoundPath\">CompoundPath</a>::assign_stroke(self : <a href=\"gmlewis/fonts/draw#CompoundPath\">CompoundPath</a>, stroke : <a href=\"gmlewis/fonts/draw#Stroke\">Stroke</a>?) -> <a href=\"gmlewis/fonts/draw#CompoundPath\">CompoundPath</a>",
          "loc": { "line": 85, "column": 8 }
        },
        {
          "name": "assign_style",
          "docstring": " assign_style assigns a stroke and fill style to this CompoundPath.",
          "signature": "fn <a href=\"gmlewis/fonts/draw#CompoundPath\">CompoundPath</a>::assign_style(self : <a href=\"gmlewis/fonts/draw#CompoundPath\">CompoundPath</a>, fill : <a href=\"gmlewis/fonts/draw#Fill\">Fill</a>?, stroke : <a href=\"gmlewis/fonts/draw#Stroke\">Stroke</a>?) -> <a href=\"gmlewis/fonts/draw#CompoundPath\">CompoundPath</a>",
          "loc": { "line": 91, "column": 8 }
        },
        {
          "name": "bounding_box",
          "docstring": " bounding_box returns the smallest axis-aligned bounding box that contains\n this CompoundPath or None.",
          "signature": "fn <a href=\"gmlewis/fonts/draw#CompoundPath\">CompoundPath</a>::bounding_box(self : <a href=\"gmlewis/fonts/draw#CompoundPath\">CompoundPath</a>) -> <a href=\"gmlewis/fonts/draw#BoundingBox\">BoundingBox</a>?",
          "loc": { "line": 103, "column": 8 }
        },
        {
          "name": "clone",
          "docstring": " clone makes a new copy of this CompoundPath.",
          "signature": "fn <a href=\"gmlewis/fonts/draw#CompoundPath\">CompoundPath</a>::clone(self : <a href=\"gmlewis/fonts/draw#CompoundPath\">CompoundPath</a>) -> <a href=\"gmlewis/fonts/draw#CompoundPath\">CompoundPath</a>",
          "loc": { "line": 33, "column": 8 }
        },
        {
          "name": "closest_point",
          "docstring": " closest_point returns the closest point to `point` that lies on this CompoundPath or None.",
          "signature": "fn <a href=\"gmlewis/fonts/draw#CompoundPath\">CompoundPath</a>::closest_point(self : <a href=\"gmlewis/fonts/draw#CompoundPath\">CompoundPath</a>, point : <a href=\"gmlewis/fonts/draw#Vec2\">Vec2</a>, area_of_interest : <a href=\"gmlewis/fonts/draw#BoundingBox\">BoundingBox</a>?) -> <a href=\"gmlewis/fonts/draw#Anchor\">Anchor</a>?",
          "loc": { "line": 120, "column": 8 }
        },
        {
          "name": "contains_point",
          "docstring": " contains_point returns true if this CompoundPath contains `point`.",
          "signature": "fn <a href=\"gmlewis/fonts/draw#CompoundPath\">CompoundPath</a>::contains_point(_self : <a href=\"gmlewis/fonts/draw#CompoundPath\">CompoundPath</a>, _point : <a href=\"gmlewis/fonts/draw#Vec2\">Vec2</a>) -> Bool",
          "loc": { "line": 157, "column": 22 }
        },
        {
          "name": "copy_style",
          "docstring": " copy_style copies the fill and stroke from `graphic`.",
          "signature": "fn <a href=\"gmlewis/fonts/draw#CompoundPath\">CompoundPath</a>::copy_style(self : <a href=\"gmlewis/fonts/draw#CompoundPath\">CompoundPath</a>, graphic : <a href=\"gmlewis/fonts/draw#Graphic\">Graphic</a>) -> <a href=\"gmlewis/fonts/draw#CompoundPath\">CompoundPath</a>",
          "loc": { "line": 165, "column": 8 }
        },
        {
          "name": "first_styled",
          "docstring": " first_styled returns this CompoundPath if it is styled or None.",
          "signature": "fn <a href=\"gmlewis/fonts/draw#CompoundPath\">CompoundPath</a>::first_styled(self : <a href=\"gmlewis/fonts/draw#CompoundPath\">CompoundPath</a>) -> <a href=\"gmlewis/fonts/draw#Graphic\">Graphic</a>?",
          "loc": { "line": 172, "column": 8 }
        },
        {
          "name": "has_style",
          "docstring": " has_style returns true if this CompoundPath has fill or stroke.",
          "signature": "fn <a href=\"gmlewis/fonts/draw#CompoundPath\">CompoundPath</a>::has_style(self : <a href=\"gmlewis/fonts/draw#CompoundPath\">CompoundPath</a>) -> Bool",
          "loc": { "line": 181, "column": 8 }
        },
        {
          "name": "is_contained_by_bounding_box",
          "docstring": " is_contained_by_bounding_box returns true if no part of this CompoundPath\n lies beyond its min or max.",
          "signature": "fn <a href=\"gmlewis/fonts/draw#CompoundPath\">CompoundPath</a>::is_contained_by_bounding_box(self : <a href=\"gmlewis/fonts/draw#CompoundPath\">CompoundPath</a>, box : <a href=\"gmlewis/fonts/draw#BoundingBox\">BoundingBox</a>) -> Bool",
          "loc": { "line": 187, "column": 8 }
        },
        {
          "name": "is_intersected_by_bounding_box",
          "docstring": " is_intersected_by_bounding_box returns true if part of this CompoundPath crosses\n the boundary between inside and outside of `box`.",
          "signature": "fn <a href=\"gmlewis/fonts/draw#CompoundPath\">CompoundPath</a>::is_intersected_by_bounding_box(_self : <a href=\"gmlewis/fonts/draw#CompoundPath\">CompoundPath</a>, _box : <a href=\"gmlewis/fonts/draw#BoundingBox\">BoundingBox</a>) -> Bool",
          "loc": { "line": 201, "column": 22 }
        },
        {
          "name": "is_overlapped_by_bounding_box",
          "docstring": " is_overlapped_by_bounding_box returns if true if a point can be chosen\n that is inside both the CompoundPath and `box`.",
          "signature": "fn <a href=\"gmlewis/fonts/draw#CompoundPath\">CompoundPath</a>::is_overlapped_by_bounding_box(self : <a href=\"gmlewis/fonts/draw#CompoundPath\">CompoundPath</a>, box : <a href=\"gmlewis/fonts/draw#BoundingBox\">BoundingBox</a>) -> Bool",
          "loc": { "line": 235, "column": 8 }
        },
        {
          "name": "loose_bounding_box",
          "docstring": " loose_bounding_box returns an approximate bounding box for this CompoundPath.\n It may not be the smallest possible bounding box, but is cheaper to compute.",
          "signature": "fn <a href=\"gmlewis/fonts/draw#CompoundPath\">CompoundPath</a>::loose_bounding_box(self : <a href=\"gmlewis/fonts/draw#CompoundPath\">CompoundPath</a>) -> <a href=\"gmlewis/fonts/draw#BoundingBox\">BoundingBox</a>?",
          "loc": { "line": 245, "column": 8 }
        },
        {
          "name": "new",
          "docstring": " CompoundPath::new creates a new CompoundPath.",
          "signature": "fn <a href=\"gmlewis/fonts/draw#CompoundPath\">CompoundPath</a>::new(paths~ : <a href=\"moonbitlang/core/array#Array\">Array</a>[<a href=\"gmlewis/fonts/draw#Path\">Path</a>] = .., fill~ : <a href=\"gmlewis/fonts/draw#Fill\">Fill</a>? = .., stroke~ : <a href=\"gmlewis/fonts/draw#Stroke\">Stroke</a>? = ..) -> <a href=\"gmlewis/fonts/draw#CompoundPath\">CompoundPath</a>",
          "loc": { "line": 9, "column": 22 }
        },
        {
          "name": "op_get",
          "docstring": " op_get is a convenience function.",
          "signature": "fn <a href=\"gmlewis/fonts/draw#CompoundPath\">CompoundPath</a>::op_get(self : <a href=\"gmlewis/fonts/draw#CompoundPath\">CompoundPath</a>, index : Int) -> <a href=\"gmlewis/fonts/draw#Path\">Path</a>",
          "loc": { "line": 23, "column": 8 }
        },
        {
          "name": "op_set",
          "docstring": " op_set is a convenience function.",
          "signature": "fn <a href=\"gmlewis/fonts/draw#CompoundPath\">CompoundPath</a>::op_set(self : <a href=\"gmlewis/fonts/draw#CompoundPath\">CompoundPath</a>, index : Int, path : <a href=\"gmlewis/fonts/draw#Path\">Path</a>) -> Unit",
          "loc": { "line": 28, "column": 8 }
        },
        {
          "name": "primitives",
          "docstring": " primitives returns a flattened array of Graphics primitives.",
          "signature": "fn <a href=\"gmlewis/fonts/draw#CompoundPath\">CompoundPath</a>::primitives(self : <a href=\"gmlewis/fonts/draw#CompoundPath\">CompoundPath</a>) -> <a href=\"moonbitlang/core/array#Array\">Array</a>[<a href=\"gmlewis/fonts/draw#Graphic\">Graphic</a>]",
          "loc": { "line": 262, "column": 8 }
        },
        {
          "name": "remove_fill",
          "docstring": " remove_fill removes fill styling from this CompoundPath.",
          "signature": "fn <a href=\"gmlewis/fonts/draw#CompoundPath\">CompoundPath</a>::remove_fill(self : <a href=\"gmlewis/fonts/draw#CompoundPath\">CompoundPath</a>) -> <a href=\"gmlewis/fonts/draw#CompoundPath\">CompoundPath</a>",
          "loc": { "line": 267, "column": 8 }
        },
        {
          "name": "remove_stroke",
          "docstring": " remove_stroke removes stroke styling from this CompoundPath.",
          "signature": "fn <a href=\"gmlewis/fonts/draw#CompoundPath\">CompoundPath</a>::remove_stroke(self : <a href=\"gmlewis/fonts/draw#CompoundPath\">CompoundPath</a>) -> <a href=\"gmlewis/fonts/draw#CompoundPath\">CompoundPath</a>",
          "loc": { "line": 273, "column": 8 }
        },
        {
          "name": "reverse",
          "docstring": " reverse reverses this CompoundPath.",
          "signature": "fn <a href=\"gmlewis/fonts/draw#CompoundPath\">CompoundPath</a>::reverse(self : <a href=\"gmlewis/fonts/draw#CompoundPath\">CompoundPath</a>) -> <a href=\"gmlewis/fonts/draw#CompoundPath\">CompoundPath</a>",
          "loc": { "line": 279, "column": 8 }
        },
        {
          "name": "rotate",
          "docstring": " rotate rotates a CompoundPath clockwise by `angle` in degrees.",
          "signature": "fn <a href=\"gmlewis/fonts/draw#CompoundPath\">CompoundPath</a>::rotate(self : <a href=\"gmlewis/fonts/draw#CompoundPath\">CompoundPath</a>, angle : Double) -> <a href=\"gmlewis/fonts/draw#CompoundPath\">CompoundPath</a>",
          "loc": { "line": 323, "column": 8 }
        },
        {
          "name": "scale",
          "docstring": " scale scales a CompoundPath by `v`.",
          "signature": "fn <a href=\"gmlewis/fonts/draw#CompoundPath\">CompoundPath</a>::scale(self : <a href=\"gmlewis/fonts/draw#CompoundPath\">CompoundPath</a>, v : <a href=\"gmlewis/fonts/draw#Vec2\">Vec2</a>) -> <a href=\"gmlewis/fonts/draw#CompoundPath\">CompoundPath</a>",
          "loc": { "line": 317, "column": 8 }
        },
        {
          "name": "scale_stroke",
          "docstring": " scale_stroke scales the width of this stroke by `scale_factor`.",
          "signature": "fn <a href=\"gmlewis/fonts/draw#CompoundPath\">CompoundPath</a>::scale_stroke(self : <a href=\"gmlewis/fonts/draw#CompoundPath\">CompoundPath</a>, scale_factor : Double) -> <a href=\"gmlewis/fonts/draw#CompoundPath\">CompoundPath</a>",
          "loc": { "line": 288, "column": 8 }
        },
        {
          "name": "style_contains_point",
          "docstring": " style_contains_point returns true if this path's style contains `point`.",
          "signature": "fn <a href=\"gmlewis/fonts/draw#CompoundPath\">CompoundPath</a>::style_contains_point(_self : <a href=\"gmlewis/fonts/draw#CompoundPath\">CompoundPath</a>, _point : <a href=\"gmlewis/fonts/draw#Vec2\">Vec2</a>) -> Bool",
          "loc": { "line": 297, "column": 22 }
        },
        {
          "name": "transform",
          "docstring": " transform provides a convenient API for a common task.",
          "signature": "fn <a href=\"gmlewis/fonts/draw#CompoundPath\">CompoundPath</a>::transform(self : <a href=\"gmlewis/fonts/draw#CompoundPath\">CompoundPath</a>, position~ : <a href=\"gmlewis/fonts/draw#Vec2\">Vec2</a> = .., rotation~ : Double = .., scale~ : <a href=\"gmlewis/fonts/draw#Vec2\">Vec2</a> = .., skew~ : Double = .., origin~ : <a href=\"gmlewis/fonts/draw#Vec2\">Vec2</a> = ..) -> <a href=\"gmlewis/fonts/draw#CompoundPath\">CompoundPath</a>",
          "loc": { "line": 64, "column": 8 }
        },
        {
          "name": "translate",
          "docstring": " translate translates a CompoundPath by `v`.",
          "signature": "fn <a href=\"gmlewis/fonts/draw#CompoundPath\">CompoundPath</a>::translate(self : <a href=\"gmlewis/fonts/draw#CompoundPath\">CompoundPath</a>, v : <a href=\"gmlewis/fonts/draw#Vec2\">Vec2</a>) -> <a href=\"gmlewis/fonts/draw#CompoundPath\">CompoundPath</a>",
          "loc": { "line": 311, "column": 8 }
        }
      ],
      "impls": [
        {
          "docstring": "",
          "signature": "impl <a href=\"moonbitlang/core/builtin#Show\">Show</a> for <a href=\"gmlewis/fonts/draw#CompoundPath\">CompoundPath</a>",
          "methods": [
            {
              "name": "output",
              "docstring": "automatically derived",
              "signature": "fn output(<a href=\"gmlewis/fonts/draw#CompoundPath\">CompoundPath</a>, <a href=\"moonbitlang/core/builtin#Logger\">Logger</a>) -> Unit",
              "loc": { "line": 6, "column": 10 }
            }
          ],
          "loc": { "line": 6, "column": 10 }
        },
        {
          "docstring": "",
          "signature": "impl <a href=\"moonbitlang/core/builtin#ToJson\">ToJson</a> for <a href=\"gmlewis/fonts/draw#CompoundPath\">CompoundPath</a>",
          "methods": [
            {
              "name": "to_json",
              "docstring": "automatically derived",
              "signature": "fn to_json(<a href=\"gmlewis/fonts/draw#CompoundPath\">CompoundPath</a>) -> <a href=\"moonbitlang/core/json#Json\">Json</a>",
              "loc": { "line": 6, "column": 26 }
            }
          ],
          "loc": { "line": 6, "column": 26 }
        },
        {
          "docstring": "",
          "signature": "impl <a href=\"moonbitlang/core/json#FromJson\">@moonbitlang/core/json.FromJson</a> for <a href=\"gmlewis/fonts/draw#CompoundPath\">CompoundPath</a>",
          "methods": [
            {
              "name": "from_json",
              "docstring": "automatically derived",
              "signature": "fn from_json(<a href=\"moonbitlang/core/json#Json\">Json</a>, <a href=\"moonbitlang/core/json#JsonPath\">@moonbitlang/core/json.JsonPath</a>) -> <a href=\"gmlewis/fonts/draw#CompoundPath\">CompoundPath</a>!<a href=\"moonbitlang/core/json#JsonDecodeError\">@moonbitlang/core/json.JsonDecodeError</a>",
              "loc": { "line": 6, "column": 16 }
            }
          ],
          "loc": { "line": 6, "column": 16 }
        }
      ]
    },
    {
      "name": "DrawError",
      "docstring": " DrawError represents an error that occured during graphic generation.",
      "signature": "pub(all) type! DrawError String\n",
      "loc": { "line": 5, "column": 16 },
      "methods": [],
      "impls": [
        {
          "docstring": "",
          "signature": "impl <a href=\"moonbitlang/core/builtin#Eq\">Eq</a> for <a href=\"gmlewis/fonts/draw#DrawError\">DrawError</a>",
          "methods": [
            {
              "name": "op_equal",
              "docstring": "automatically derived",
              "signature": "fn op_equal(<a href=\"gmlewis/fonts/draw#DrawError\">DrawError</a>, <a href=\"gmlewis/fonts/draw#DrawError\">DrawError</a>) -> Bool",
              "loc": { "line": 5, "column": 46 }
            }
          ],
          "loc": { "line": 5, "column": 46 }
        },
        {
          "docstring": "",
          "signature": "impl <a href=\"moonbitlang/core/builtin#Show\">Show</a> for <a href=\"gmlewis/fonts/draw#DrawError\">DrawError</a>",
          "methods": [
            {
              "name": "output",
              "docstring": "automatically derived",
              "signature": "fn output(<a href=\"gmlewis/fonts/draw#DrawError\">DrawError</a>, <a href=\"moonbitlang/core/builtin#Logger\">Logger</a>) -> Unit",
              "loc": { "line": 5, "column": 40 }
            }
          ],
          "loc": { "line": 5, "column": 40 }
        }
      ]
    },
    {
      "name": "Fill",
      "docstring": " Fill defines a fill style.",
      "signature": "pub(all) struct Fill {\n  color : <a href=\"gmlewis/fonts/draw#Color\">Color</a>\n}",
      "loc": { "line": 2, "column": 17 },
      "methods": [
        {
          "name": "clone",
          "docstring": " clone returns a new copy of this Fill.",
          "signature": "fn <a href=\"gmlewis/fonts/draw#Fill\">Fill</a>::clone(self : <a href=\"gmlewis/fonts/draw#Fill\">Fill</a>) -> <a href=\"gmlewis/fonts/draw#Fill\">Fill</a>",
          "loc": { "line": 17, "column": 8 }
        },
        {
          "name": "new",
          "docstring": " Fill::new returns a new fill style.",
          "signature": "fn <a href=\"gmlewis/fonts/draw#Fill\">Fill</a>::new(color~ : <a href=\"gmlewis/fonts/draw#Color\">Color</a> = ..) -> <a href=\"gmlewis/fonts/draw#Fill\">Fill</a>",
          "loc": { "line": 7, "column": 14 }
        }
      ],
      "impls": [
        {
          "docstring": "",
          "signature": "impl <a href=\"moonbitlang/core/builtin#Eq\">Eq</a> for <a href=\"gmlewis/fonts/draw#Fill\">Fill</a>",
          "methods": [
            {
              "name": "op_equal",
              "docstring": "automatically derived",
              "signature": "fn op_equal(<a href=\"gmlewis/fonts/draw#Fill\">Fill</a>, <a href=\"gmlewis/fonts/draw#Fill\">Fill</a>) -> Bool",
              "loc": { "line": 4, "column": 16 }
            }
          ],
          "loc": { "line": 4, "column": 16 }
        },
        {
          "docstring": "",
          "signature": "impl <a href=\"moonbitlang/core/builtin#Show\">Show</a> for <a href=\"gmlewis/fonts/draw#Fill\">Fill</a>",
          "methods": [
            {
              "name": "output",
              "docstring": "automatically derived",
              "signature": "fn output(<a href=\"gmlewis/fonts/draw#Fill\">Fill</a>, <a href=\"moonbitlang/core/builtin#Logger\">Logger</a>) -> Unit",
              "loc": { "line": 4, "column": 10 }
            }
          ],
          "loc": { "line": 4, "column": 10 }
        },
        {
          "docstring": "",
          "signature": "impl <a href=\"moonbitlang/core/builtin#ToJson\">ToJson</a> for <a href=\"gmlewis/fonts/draw#Fill\">Fill</a>",
          "methods": [
            {
              "name": "to_json",
              "docstring": "automatically derived",
              "signature": "fn to_json(<a href=\"gmlewis/fonts/draw#Fill\">Fill</a>) -> <a href=\"moonbitlang/core/json#Json\">Json</a>",
              "loc": { "line": 4, "column": 30 }
            }
          ],
          "loc": { "line": 4, "column": 30 }
        },
        {
          "docstring": "",
          "signature": "impl <a href=\"moonbitlang/core/json#FromJson\">@moonbitlang/core/json.FromJson</a> for <a href=\"gmlewis/fonts/draw#Fill\">Fill</a>",
          "methods": [
            {
              "name": "from_json",
              "docstring": "automatically derived",
              "signature": "fn from_json(<a href=\"moonbitlang/core/json#Json\">Json</a>, <a href=\"moonbitlang/core/json#JsonPath\">@moonbitlang/core/json.JsonPath</a>) -> <a href=\"gmlewis/fonts/draw#Fill\">Fill</a>!<a href=\"moonbitlang/core/json#JsonDecodeError\">@moonbitlang/core/json.JsonDecodeError</a>",
              "loc": { "line": 4, "column": 20 }
            }
          ],
          "loc": { "line": 4, "column": 20 }
        }
      ]
    },
    {
      "name": "Graphic",
      "docstring": " Graphic represents a drawable graphic element.",
      "signature": "pub(all) enum Graphic {\n  CompoundPath(<a href=\"gmlewis/fonts/draw#CompoundPath\">CompoundPath</a>)\n  Group(<a href=\"gmlewis/fonts/draw#Group\">Group</a>)\n  Path(<a href=\"gmlewis/fonts/draw#Path\">Path</a>)\n}",
      "loc": { "line": 2, "column": 15 },
      "methods": [
        {
          "name": "affine_transform",
          "docstring": " affine_transform transforms this graphic by `affine_matrix`.",
          "signature": "fn <a href=\"gmlewis/fonts/draw#Graphic\">Graphic</a>::affine_transform(self : <a href=\"gmlewis/fonts/draw#Graphic\">Graphic</a>, affine_matrix : <a href=\"gmlewis/fonts/draw#AffineMatrix\">AffineMatrix</a>) -> <a href=\"gmlewis/fonts/draw#Graphic\">Graphic</a>",
          "loc": { "line": 18, "column": 8 }
        },
        {
          "name": "affine_transform_without_translation",
          "docstring": " affine_transform_without_translation transforms this graphic by `affine_matrix`\n without affecting the translation.",
          "signature": "fn <a href=\"gmlewis/fonts/draw#Graphic\">Graphic</a>::affine_transform_without_translation(self : <a href=\"gmlewis/fonts/draw#Graphic\">Graphic</a>, affine_matrix : <a href=\"gmlewis/fonts/draw#AffineMatrix\">AffineMatrix</a>) -> <a href=\"gmlewis/fonts/draw#Graphic\">Graphic</a>",
          "loc": { "line": 47, "column": 8 }
        },
        {
          "name": "all_anchors",
          "docstring": " all_anchors returns all Anchors in this Graphic.",
          "signature": "fn <a href=\"gmlewis/fonts/draw#Graphic\">Graphic</a>::all_anchors(self : <a href=\"gmlewis/fonts/draw#Graphic\">Graphic</a>) -> <a href=\"moonbitlang/core/array#Array\">Array</a>[<a href=\"gmlewis/fonts/draw#Anchor\">Anchor</a>]",
          "loc": { "line": 198, "column": 8 }
        },
        {
          "name": "all_compound_paths",
          "docstring": " all_compound_paths returns all CompoundPaths in this Graphic.",
          "signature": "fn <a href=\"gmlewis/fonts/draw#Graphic\">Graphic</a>::all_compound_paths(self : <a href=\"gmlewis/fonts/draw#Graphic\">Graphic</a>) -> <a href=\"moonbitlang/core/array#Array\">Array</a>[<a href=\"gmlewis/fonts/draw#CompoundPath\">CompoundPath</a>]",
          "loc": { "line": 180, "column": 8 }
        },
        {
          "name": "all_paths",
          "docstring": " all_paths returns all Paths in this Graphic.",
          "signature": "fn <a href=\"gmlewis/fonts/draw#Graphic\">Graphic</a>::all_paths(self : <a href=\"gmlewis/fonts/draw#Graphic\">Graphic</a>) -> <a href=\"moonbitlang/core/array#Array\">Array</a>[<a href=\"gmlewis/fonts/draw#Path\">Path</a>]",
          "loc": { "line": 189, "column": 8 }
        },
        {
          "name": "all_paths_and_compound_paths",
          "docstring": " all_paths_and_compound_paths returns all Paths and CompoundPaths in this Graphic.",
          "signature": "fn <a href=\"gmlewis/fonts/draw#Graphic\">Graphic</a>::all_paths_and_compound_paths(self : <a href=\"gmlewis/fonts/draw#Graphic\">Graphic</a>) -> <a href=\"moonbitlang/core/array#Array\">Array</a>[<a href=\"gmlewis/fonts/draw#Graphic\">Graphic</a>]",
          "loc": { "line": 207, "column": 8 }
        },
        {
          "name": "assign_fill",
          "docstring": " assign_fill assigns a fill to this Graphic.",
          "signature": "fn <a href=\"gmlewis/fonts/draw#Graphic\">Graphic</a>::assign_fill(self : <a href=\"gmlewis/fonts/draw#Graphic\">Graphic</a>, fill : <a href=\"gmlewis/fonts/draw#Fill\">Fill</a>?) -> <a href=\"gmlewis/fonts/draw#Graphic\">Graphic</a>",
          "loc": { "line": 225, "column": 8 }
        },
        {
          "name": "assign_stroke",
          "docstring": " assign_stroke assigns a stroke to this Graphic.",
          "signature": "fn <a href=\"gmlewis/fonts/draw#Graphic\">Graphic</a>::assign_stroke(self : <a href=\"gmlewis/fonts/draw#Graphic\">Graphic</a>, stroke : <a href=\"gmlewis/fonts/draw#Stroke\">Stroke</a>?) -> <a href=\"gmlewis/fonts/draw#Graphic\">Graphic</a>",
          "loc": { "line": 245, "column": 8 }
        },
        {
          "name": "assign_style",
          "docstring": " assign_style assigns a fill and stroke style to this Graphic.",
          "signature": "fn <a href=\"gmlewis/fonts/draw#Graphic\">Graphic</a>::assign_style(self : <a href=\"gmlewis/fonts/draw#Graphic\">Graphic</a>, fill : <a href=\"gmlewis/fonts/draw#Fill\">Fill</a>?, stroke : <a href=\"gmlewis/fonts/draw#Stroke\">Stroke</a>?) -> <a href=\"gmlewis/fonts/draw#Graphic\">Graphic</a>",
          "loc": { "line": 265, "column": 8 }
        },
        {
          "name": "bounding_box",
          "docstring": " bounding_box returns the bounding box for this Graphic.",
          "signature": "fn <a href=\"gmlewis/fonts/draw#Graphic\">Graphic</a>::bounding_box(self : <a href=\"gmlewis/fonts/draw#Graphic\">Graphic</a>) -> <a href=\"gmlewis/fonts/draw#BoundingBox\">BoundingBox</a>?",
          "loc": { "line": 73, "column": 8 }
        },
        {
          "name": "clone",
          "docstring": " clone returns a new copy of Graphic.",
          "signature": "fn <a href=\"gmlewis/fonts/draw#Graphic\">Graphic</a>::clone(self : <a href=\"gmlewis/fonts/draw#Graphic\">Graphic</a>) -> <a href=\"gmlewis/fonts/draw#Graphic\">Graphic</a>",
          "loc": { "line": 9, "column": 8 }
        },
        {
          "name": "closest_point",
          "docstring": " closest_point returns the closest Anchor to `point` that lies on this Graphic\n or None.",
          "signature": "fn <a href=\"gmlewis/fonts/draw#Graphic\">Graphic</a>::closest_point(self : <a href=\"gmlewis/fonts/draw#Graphic\">Graphic</a>, point : <a href=\"gmlewis/fonts/draw#Vec2\">Vec2</a>, area_of_interest : <a href=\"gmlewis/fonts/draw#BoundingBox\">BoundingBox</a>?) -> <a href=\"gmlewis/fonts/draw#Anchor\">Anchor</a>?",
          "loc": { "line": 148, "column": 8 }
        },
        {
          "name": "contains_point",
          "docstring": " Graphic::contains_point returns a function that returns true if this\n Graphic contains `point`.",
          "signature": "fn <a href=\"gmlewis/fonts/draw#Graphic\">Graphic</a>::contains_point(point : <a href=\"gmlewis/fonts/draw#Vec2\">Vec2</a>) -> ((<a href=\"gmlewis/fonts/draw#Graphic\">Graphic</a>) -> Bool)",
          "loc": { "line": 306, "column": 17 }
        },
        {
          "name": "copy_style",
          "docstring": " copy_style copies the fill and stroke style from `graphic`.",
          "signature": "fn <a href=\"gmlewis/fonts/draw#Graphic\">Graphic</a>::copy_style(self : <a href=\"gmlewis/fonts/draw#Graphic\">Graphic</a>, graphic : <a href=\"gmlewis/fonts/draw#Graphic\">Graphic</a>) -> <a href=\"gmlewis/fonts/draw#Graphic\">Graphic</a>",
          "loc": { "line": 275, "column": 8 }
        },
        {
          "name": "every",
          "docstring": " Graphic::every returns true if all tests of `func` are true.",
          "signature": "fn <a href=\"gmlewis/fonts/draw#Graphic\">Graphic</a>::every(items : <a href=\"moonbitlang/core/array#Array\">Array</a>[<a href=\"gmlewis/fonts/draw#Graphic\">Graphic</a>], func : (<a href=\"gmlewis/fonts/draw#Graphic\">Graphic</a>) -> Bool) -> Bool",
          "loc": { "line": 82, "column": 17 }
        },
        {
          "name": "first_fill",
          "docstring": " first_fill returns the first fill from this Graphic.",
          "signature": "fn <a href=\"gmlewis/fonts/draw#Graphic\">Graphic</a>::first_fill(self : <a href=\"gmlewis/fonts/draw#Graphic\">Graphic</a>) -> <a href=\"gmlewis/fonts/draw#Fill\">Fill</a>?",
          "loc": { "line": 329, "column": 8 }
        },
        {
          "name": "first_stroke",
          "docstring": " first_stroke returns the first stroke from this Graphic.",
          "signature": "fn <a href=\"gmlewis/fonts/draw#Graphic\">Graphic</a>::first_stroke(self : <a href=\"gmlewis/fonts/draw#Graphic\">Graphic</a>) -> <a href=\"gmlewis/fonts/draw#Stroke\">Stroke</a>?",
          "loc": { "line": 338, "column": 8 }
        },
        {
          "name": "first_styled",
          "docstring": " first_styled returns the first Path or CompoundPath in this Graphic\n that has either a fill or a stroke, or None.",
          "signature": "fn <a href=\"gmlewis/fonts/draw#Graphic\">Graphic</a>::first_styled(self : <a href=\"gmlewis/fonts/draw#Graphic\">Graphic</a>) -> <a href=\"gmlewis/fonts/draw#Graphic\">Graphic</a>?",
          "loc": { "line": 296, "column": 8 }
        },
        {
          "name": "fit_to",
          "docstring": " fit_to scales and translates a Graphic to fix in `box`.",
          "signature": "fn <a href=\"gmlewis/fonts/draw#Graphic\">Graphic</a>::fit_to(self : <a href=\"gmlewis/fonts/draw#Graphic\">Graphic</a>, box : <a href=\"gmlewis/fonts/draw#BoundingBox\">BoundingBox</a>) -> <a href=\"gmlewis/fonts/draw#Graphic\">Graphic</a>",
          "loc": { "line": 374, "column": 8 }
        },
        {
          "name": "has_style",
          "docstring": " has_style returns true if this Graphic has either a stroke or a fill.",
          "signature": "fn <a href=\"gmlewis/fonts/draw#Graphic\">Graphic</a>::has_style(self : <a href=\"gmlewis/fonts/draw#Graphic\">Graphic</a>) -> Bool",
          "loc": { "line": 216, "column": 8 }
        },
        {
          "name": "is_contained_by_bounding_box",
          "docstring": " Graphic::is_contained_by_bounding_box returns a function that tests\n if a graphic is contained by the box.",
          "signature": "fn <a href=\"gmlewis/fonts/draw#Graphic\">Graphic</a>::is_contained_by_bounding_box(box : <a href=\"gmlewis/fonts/draw#BoundingBox\">BoundingBox</a>) -> ((<a href=\"gmlewis/fonts/draw#Graphic\">Graphic</a>) -> Bool)",
          "loc": { "line": 103, "column": 17 }
        },
        {
          "name": "is_intersected_by_bounding_box",
          "docstring": " Graphic::is_intersected_by_bounding_box returns a function that tests\n if a graphic is intersected by the box.",
          "signature": "fn <a href=\"gmlewis/fonts/draw#Graphic\">Graphic</a>::is_intersected_by_bounding_box(box : <a href=\"gmlewis/fonts/draw#BoundingBox\">BoundingBox</a>) -> ((<a href=\"gmlewis/fonts/draw#Graphic\">Graphic</a>) -> Bool)",
          "loc": { "line": 118, "column": 17 }
        },
        {
          "name": "is_overlapped_by_bounding_box",
          "docstring": " Graphic::is_overlapped_by_bounding_box returns a function that tests\n if a graphic is overlapped by the box.",
          "signature": "fn <a href=\"gmlewis/fonts/draw#Graphic\">Graphic</a>::is_overlapped_by_bounding_box(box : <a href=\"gmlewis/fonts/draw#BoundingBox\">BoundingBox</a>) -> ((<a href=\"gmlewis/fonts/draw#Graphic\">Graphic</a>) -> Bool)",
          "loc": { "line": 133, "column": 17 }
        },
        {
          "name": "loose_bounding_box",
          "docstring": " loose_bounding_box returns an approximate bounding box for all items.\n It may not be the smallest possible bounding box, but is cheaper to compute.",
          "signature": "fn <a href=\"gmlewis/fonts/draw#Graphic\">Graphic</a>::loose_bounding_box(self : <a href=\"gmlewis/fonts/draw#Graphic\">Graphic</a>) -> <a href=\"gmlewis/fonts/draw#BoundingBox\">BoundingBox</a>?",
          "loc": { "line": 64, "column": 8 }
        },
        {
          "name": "primitives",
          "docstring": " primitives returns an array of primitives.",
          "signature": "fn <a href=\"gmlewis/fonts/draw#Graphic\">Graphic</a>::primitives(self : <a href=\"gmlewis/fonts/draw#Graphic\">Graphic</a>) -> <a href=\"moonbitlang/core/array#Array\">Array</a>[<a href=\"gmlewis/fonts/draw#Graphic\">Graphic</a>]",
          "loc": { "line": 162, "column": 8 }
        },
        {
          "name": "remove_fill",
          "docstring": " remove_fill a fill style from this Graphic.",
          "signature": "fn <a href=\"gmlewis/fonts/draw#Graphic\">Graphic</a>::remove_fill(self : <a href=\"gmlewis/fonts/draw#Graphic\">Graphic</a>) -> <a href=\"gmlewis/fonts/draw#Graphic\">Graphic</a>",
          "loc": { "line": 235, "column": 8 }
        },
        {
          "name": "remove_stroke",
          "docstring": " remove_stroke a stroke style from this Graphic.",
          "signature": "fn <a href=\"gmlewis/fonts/draw#Graphic\">Graphic</a>::remove_stroke(self : <a href=\"gmlewis/fonts/draw#Graphic\">Graphic</a>) -> <a href=\"gmlewis/fonts/draw#Graphic\">Graphic</a>",
          "loc": { "line": 255, "column": 8 }
        },
        {
          "name": "reverse",
          "docstring": " reverse reverses this Graphic.",
          "signature": "fn <a href=\"gmlewis/fonts/draw#Graphic\">Graphic</a>::reverse(self : <a href=\"gmlewis/fonts/draw#Graphic\">Graphic</a>) -> <a href=\"gmlewis/fonts/draw#Graphic\">Graphic</a>",
          "loc": { "line": 171, "column": 8 }
        },
        {
          "name": "rotate",
          "docstring": " rotate rotates a Graphic clockwise by `angle` in degrees.",
          "signature": "fn <a href=\"gmlewis/fonts/draw#Graphic\">Graphic</a>::rotate(self : <a href=\"gmlewis/fonts/draw#Graphic\">Graphic</a>, angle : Double) -> <a href=\"gmlewis/fonts/draw#Graphic\">Graphic</a>",
          "loc": { "line": 365, "column": 8 }
        },
        {
          "name": "scale",
          "docstring": " scale scales a Graphic by `v`.",
          "signature": "fn <a href=\"gmlewis/fonts/draw#Graphic\">Graphic</a>::scale(self : <a href=\"gmlewis/fonts/draw#Graphic\">Graphic</a>, v : <a href=\"gmlewis/fonts/draw#Vec2\">Vec2</a>) -> <a href=\"gmlewis/fonts/draw#Graphic\">Graphic</a>",
          "loc": { "line": 356, "column": 8 }
        },
        {
          "name": "scale_stroke",
          "docstring": " scale_stroke scales the stroke width of this Graphic by `scale_factor`.",
          "signature": "fn <a href=\"gmlewis/fonts/draw#Graphic\">Graphic</a>::scale_stroke(self : <a href=\"gmlewis/fonts/draw#Graphic\">Graphic</a>, scale_factor : Double) -> <a href=\"gmlewis/fonts/draw#Graphic\">Graphic</a>",
          "loc": { "line": 285, "column": 8 }
        },
        {
          "name": "some",
          "docstring": " Graphic::some returns true if any calls to `func` are true.",
          "signature": "fn <a href=\"gmlewis/fonts/draw#Graphic\">Graphic</a>::some(items : <a href=\"moonbitlang/core/array#Array\">Array</a>[<a href=\"gmlewis/fonts/draw#Graphic\">Graphic</a>], func : (<a href=\"gmlewis/fonts/draw#Graphic\">Graphic</a>) -> Bool) -> Bool",
          "loc": { "line": 92, "column": 17 }
        },
        {
          "name": "style_contains_point",
          "docstring": " Graphic::style_contains_point returns a function that returns true if this\n Graphic's style contains `point`.",
          "signature": "fn <a href=\"gmlewis/fonts/draw#Graphic\">Graphic</a>::style_contains_point(point : <a href=\"gmlewis/fonts/draw#Vec2\">Vec2</a>) -> ((<a href=\"gmlewis/fonts/draw#Graphic\">Graphic</a>) -> Bool)",
          "loc": { "line": 318, "column": 17 }
        },
        {
          "name": "to_json",
          "docstring": "",
          "signature": "fn <a href=\"gmlewis/fonts/draw#Graphic\">Graphic</a>::to_json(self : <a href=\"gmlewis/fonts/draw#Graphic\">Graphic</a>) -> <a href=\"moonbitlang/core/json#Json\">Json</a>",
          "loc": { "line": 393, "column": 8 }
        },
        {
          "name": "transform",
          "docstring": " transform provides a convenient API for a common task.",
          "signature": "fn <a href=\"gmlewis/fonts/draw#Graphic\">Graphic</a>::transform(self : <a href=\"gmlewis/fonts/draw#Graphic\">Graphic</a>, position~ : <a href=\"gmlewis/fonts/draw#Vec2\">Vec2</a> = .., rotation~ : Double = .., scale~ : <a href=\"gmlewis/fonts/draw#Vec2\">Vec2</a> = .., skew~ : Double = .., origin~ : <a href=\"gmlewis/fonts/draw#Vec2\">Vec2</a> = ..) -> <a href=\"gmlewis/fonts/draw#Graphic\">Graphic</a>",
          "loc": { "line": 31, "column": 8 }
        },
        {
          "name": "translate",
          "docstring": " translate translates a Graphic by `v`.",
          "signature": "fn <a href=\"gmlewis/fonts/draw#Graphic\">Graphic</a>::translate(self : <a href=\"gmlewis/fonts/draw#Graphic\">Graphic</a>, v : <a href=\"gmlewis/fonts/draw#Vec2\">Vec2</a>) -> <a href=\"gmlewis/fonts/draw#Graphic\">Graphic</a>",
          "loc": { "line": 347, "column": 8 }
        }
      ],
      "impls": [
        {
          "docstring": "",
          "signature": "impl <a href=\"moonbitlang/core/builtin#Show\">Show</a> for <a href=\"gmlewis/fonts/draw#Graphic\">Graphic</a>",
          "methods": [
            {
              "name": "output",
              "docstring": "automatically derived",
              "signature": "fn output(<a href=\"gmlewis/fonts/draw#Graphic\">Graphic</a>, <a href=\"moonbitlang/core/builtin#Logger\">Logger</a>) -> Unit",
              "loc": { "line": 6, "column": 10 }
            }
          ],
          "loc": { "line": 6, "column": 10 }
        },
        {
          "docstring": "",
          "signature": "impl <a href=\"moonbitlang/core/json#FromJson\">@moonbitlang/core/json.FromJson</a> for <a href=\"gmlewis/fonts/draw#Graphic\">Graphic</a>",
          "methods": [
            {
              "name": "from_json",
              "docstring": "",
              "signature": "fn from_json(json : <a href=\"moonbitlang/core/json#Json\">Json</a>, path : <a href=\"moonbitlang/core/json#JsonPath\">@moonbitlang/core/json.JsonPath</a>) -> <a href=\"gmlewis/fonts/draw#Graphic\">Graphic</a>!<a href=\"moonbitlang/core/json#JsonDecodeError\">@moonbitlang/core/json.JsonDecodeError</a>",
              "loc": { "line": 402, "column": 42 }
            }
          ],
          "loc": { "line": 402, "column": 1 }
        }
      ]
    },
    {
      "name": "Group",
      "docstring": " Group represents a collection of Graphics elements.",
      "signature": "pub(all) struct Group {\n  items : <a href=\"moonbitlang/core/array#Array\">Array</a>[<a href=\"gmlewis/fonts/draw#Graphic\">Graphic</a>]\n}",
      "loc": { "line": 2, "column": 17 },
      "methods": [
        {
          "name": "affine_transform",
          "docstring": " affine_transform transforms this Group by `affine_matrix`.",
          "signature": "fn <a href=\"gmlewis/fonts/draw#Group\">Group</a>::affine_transform(self : <a href=\"gmlewis/fonts/draw#Group\">Group</a>, affine_matrix : <a href=\"gmlewis/fonts/draw#AffineMatrix\">AffineMatrix</a>) -> <a href=\"gmlewis/fonts/draw#Group\">Group</a>",
          "loc": { "line": 37, "column": 8 }
        },
        {
          "name": "affine_transform_without_translation",
          "docstring": " affine_transform_without_translation transforms this Group by `affine_matrix`\n without affecting the translation.",
          "signature": "fn <a href=\"gmlewis/fonts/draw#Group\">Group</a>::affine_transform_without_translation(self : <a href=\"gmlewis/fonts/draw#Group\">Group</a>, affine_matrix : <a href=\"gmlewis/fonts/draw#AffineMatrix\">AffineMatrix</a>) -> <a href=\"gmlewis/fonts/draw#Group\">Group</a>",
          "loc": { "line": 46, "column": 8 }
        },
        {
          "name": "all_anchors",
          "docstring": " all_anchors returns all Anchors in this Group.",
          "signature": "fn <a href=\"gmlewis/fonts/draw#Group\">Group</a>::all_anchors(self : <a href=\"gmlewis/fonts/draw#Group\">Group</a>) -> <a href=\"moonbitlang/core/array#Array\">Array</a>[<a href=\"gmlewis/fonts/draw#Anchor\">Anchor</a>]",
          "loc": { "line": 224, "column": 8 }
        },
        {
          "name": "all_compound_paths",
          "docstring": " all_compound_paths returns all compound paths in this Group.",
          "signature": "fn <a href=\"gmlewis/fonts/draw#Group\">Group</a>::all_compound_paths(self : <a href=\"gmlewis/fonts/draw#Group\">Group</a>) -> <a href=\"moonbitlang/core/array#Array\">Array</a>[<a href=\"gmlewis/fonts/draw#CompoundPath\">CompoundPath</a>]",
          "loc": { "line": 211, "column": 8 }
        },
        {
          "name": "all_paths",
          "docstring": " all_paths returns all Paths in this Group.",
          "signature": "fn <a href=\"gmlewis/fonts/draw#Group\">Group</a>::all_paths(self : <a href=\"gmlewis/fonts/draw#Group\">Group</a>) -> <a href=\"moonbitlang/core/array#Array\">Array</a>[<a href=\"gmlewis/fonts/draw#Path\">Path</a>]",
          "loc": { "line": 219, "column": 8 }
        },
        {
          "name": "all_paths_and_compound_paths",
          "docstring": " all_paths_and_compound_paths returns all Paths and CompoundPaths in this Group.",
          "signature": "fn <a href=\"gmlewis/fonts/draw#Group\">Group</a>::all_paths_and_compound_paths(self : <a href=\"gmlewis/fonts/draw#Group\">Group</a>) -> <a href=\"moonbitlang/core/array#Array\">Array</a>[<a href=\"gmlewis/fonts/draw#Graphic\">Graphic</a>]",
          "loc": { "line": 229, "column": 8 }
        },
        {
          "name": "as_graphic",
          "docstring": " as_graphic returns a Group as a Graphic.",
          "signature": "fn <a href=\"gmlewis/fonts/draw#Group\">Group</a>::as_graphic(self : <a href=\"gmlewis/fonts/draw#Group\">Group</a>) -> <a href=\"gmlewis/fonts/draw#Graphic\">Graphic</a>",
          "loc": { "line": 12, "column": 8 }
        },
        {
          "name": "assign_fill",
          "docstring": " assign_fill assigns a fill to this Group.",
          "signature": "fn <a href=\"gmlewis/fonts/draw#Group\">Group</a>::assign_fill(self : <a href=\"gmlewis/fonts/draw#Group\">Group</a>, fill : <a href=\"gmlewis/fonts/draw#Fill\">Fill</a>?) -> <a href=\"gmlewis/fonts/draw#Group\">Group</a>",
          "loc": { "line": 247, "column": 8 }
        },
        {
          "name": "assign_stroke",
          "docstring": " assign_stroke assigns a stroke to this Group.",
          "signature": "fn <a href=\"gmlewis/fonts/draw#Group\">Group</a>::assign_stroke(self : <a href=\"gmlewis/fonts/draw#Group\">Group</a>, stroke : <a href=\"gmlewis/fonts/draw#Stroke\">Stroke</a>?) -> <a href=\"gmlewis/fonts/draw#Group\">Group</a>",
          "loc": { "line": 263, "column": 8 }
        },
        {
          "name": "assign_style",
          "docstring": " assign_style assigns a fill and stroke style to this Group.",
          "signature": "fn <a href=\"gmlewis/fonts/draw#Group\">Group</a>::assign_style(self : <a href=\"gmlewis/fonts/draw#Group\">Group</a>, fill : <a href=\"gmlewis/fonts/draw#Fill\">Fill</a>?, stroke : <a href=\"gmlewis/fonts/draw#Stroke\">Stroke</a>?) -> <a href=\"gmlewis/fonts/draw#Group\">Group</a>",
          "loc": { "line": 279, "column": 8 }
        },
        {
          "name": "bounding_box",
          "docstring": " bounding_box returns the bounding box for all items in the Group.",
          "signature": "fn <a href=\"gmlewis/fonts/draw#Group\">Group</a>::bounding_box(self : <a href=\"gmlewis/fonts/draw#Group\">Group</a>) -> <a href=\"gmlewis/fonts/draw#BoundingBox\">BoundingBox</a>?",
          "loc": { "line": 110, "column": 8 }
        },
        {
          "name": "clone",
          "docstring": " clone returns a new copy of this Group.",
          "signature": "fn <a href=\"gmlewis/fonts/draw#Group\">Group</a>::clone(self : <a href=\"gmlewis/fonts/draw#Group\">Group</a>) -> <a href=\"gmlewis/fonts/draw#Group\">Group</a>",
          "loc": { "line": 32, "column": 8 }
        },
        {
          "name": "closest_point",
          "docstring": " closest_point returns the closest Anchor to `point` that lies on this Group\n or None.",
          "signature": "fn <a href=\"gmlewis/fonts/draw#Group\">Group</a>::closest_point(self : <a href=\"gmlewis/fonts/draw#Group\">Group</a>, point : <a href=\"gmlewis/fonts/draw#Vec2\">Vec2</a>, area_of_interest : <a href=\"gmlewis/fonts/draw#BoundingBox\">BoundingBox</a>?) -> <a href=\"gmlewis/fonts/draw#Anchor\">Anchor</a>?",
          "loc": { "line": 166, "column": 8 }
        },
        {
          "name": "contains_point",
          "docstring": " contains_point returns true if this Group contains `point`.",
          "signature": "fn <a href=\"gmlewis/fonts/draw#Group\">Group</a>::contains_point(self : <a href=\"gmlewis/fonts/draw#Group\">Group</a>, point : <a href=\"gmlewis/fonts/draw#Vec2\">Vec2</a>) -> Bool",
          "loc": { "line": 315, "column": 8 }
        },
        {
          "name": "copy_style",
          "docstring": " copy_style copies the fill and stroke style from `graphic`.",
          "signature": "fn <a href=\"gmlewis/fonts/draw#Group\">Group</a>::copy_style(self : <a href=\"gmlewis/fonts/draw#Group\">Group</a>, graphic : <a href=\"gmlewis/fonts/draw#Graphic\">Graphic</a>) -> <a href=\"gmlewis/fonts/draw#Group\">Group</a>",
          "loc": { "line": 287, "column": 8 }
        },
        {
          "name": "first_fill",
          "docstring": " first_fill returns the first fill from this Group.",
          "signature": "fn <a href=\"gmlewis/fonts/draw#Group\">Group</a>::first_fill(self : <a href=\"gmlewis/fonts/draw#Group\">Group</a>) -> <a href=\"gmlewis/fonts/draw#Fill\">Fill</a>?",
          "loc": { "line": 325, "column": 8 }
        },
        {
          "name": "first_stroke",
          "docstring": " first_stroke returns the first stroke from this Group.",
          "signature": "fn <a href=\"gmlewis/fonts/draw#Group\">Group</a>::first_stroke(self : <a href=\"gmlewis/fonts/draw#Group\">Group</a>) -> <a href=\"gmlewis/fonts/draw#Stroke\">Stroke</a>?",
          "loc": { "line": 336, "column": 8 }
        },
        {
          "name": "first_styled",
          "docstring": " first_styled returns the first Path or CompoundPath in this Group\n that has either a fill or a stroke, or None.",
          "signature": "fn <a href=\"gmlewis/fonts/draw#Group\">Group</a>::first_styled(self : <a href=\"gmlewis/fonts/draw#Group\">Group</a>) -> <a href=\"gmlewis/fonts/draw#Graphic\">Graphic</a>?",
          "loc": { "line": 304, "column": 8 }
        },
        {
          "name": "has_style",
          "docstring": " has_style returns true if this Group has either a stroke or a fill.",
          "signature": "fn <a href=\"gmlewis/fonts/draw#Group\">Group</a>::has_style(self : <a href=\"gmlewis/fonts/draw#Group\">Group</a>) -> Bool",
          "loc": { "line": 237, "column": 8 }
        },
        {
          "name": "is_contained_by_bounding_box",
          "docstring": " is_contained_by_bounding_box returns true if no part of the Group\n lies beyond the box's min and max.",
          "signature": "fn <a href=\"gmlewis/fonts/draw#Group\">Group</a>::is_contained_by_bounding_box(self : <a href=\"gmlewis/fonts/draw#Group\">Group</a>, box : <a href=\"gmlewis/fonts/draw#BoundingBox\">BoundingBox</a>) -> Bool",
          "loc": { "line": 147, "column": 8 }
        },
        {
          "name": "is_intersected_by_bounding_box",
          "docstring": " is_intersected_by_bounding_box returns true if any part of the Group\n crosses the boundary between the inside and outside of `box`.",
          "signature": "fn <a href=\"gmlewis/fonts/draw#Group\">Group</a>::is_intersected_by_bounding_box(self : <a href=\"gmlewis/fonts/draw#Group\">Group</a>, box : <a href=\"gmlewis/fonts/draw#BoundingBox\">BoundingBox</a>) -> Bool",
          "loc": { "line": 154, "column": 8 }
        },
        {
          "name": "is_overlapped_by_bounding_box",
          "docstring": " is_overlapped_by_bounding_box returns true if a point can be found that\n is inside both the Graphic and the box.",
          "signature": "fn <a href=\"gmlewis/fonts/draw#Group\">Group</a>::is_overlapped_by_bounding_box(self : <a href=\"gmlewis/fonts/draw#Group\">Group</a>, box : <a href=\"gmlewis/fonts/draw#BoundingBox\">BoundingBox</a>) -> Bool",
          "loc": { "line": 160, "column": 8 }
        },
        {
          "name": "loose_bounding_box",
          "docstring": " loose_bounding_box returns an approximate bounding box for all items\n in the Group. It may not be the smallest possible bounding box, but\n is cheaper to compute.",
          "signature": "fn <a href=\"gmlewis/fonts/draw#Group\">Group</a>::loose_bounding_box(self : <a href=\"gmlewis/fonts/draw#Group\">Group</a>) -> <a href=\"gmlewis/fonts/draw#BoundingBox\">BoundingBox</a>?",
          "loc": { "line": 74, "column": 8 }
        },
        {
          "name": "new",
          "docstring": " Group::new returns a new group.",
          "signature": "fn <a href=\"gmlewis/fonts/draw#Group\">Group</a>::new(items~ : <a href=\"moonbitlang/core/array#Array\">Array</a>[<a href=\"gmlewis/fonts/draw#Graphic\">Graphic</a>] = ..) -> <a href=\"gmlewis/fonts/draw#Group\">Group</a>",
          "loc": { "line": 7, "column": 15 }
        },
        {
          "name": "op_get",
          "docstring": " op_get is a convenience function.",
          "signature": "fn <a href=\"gmlewis/fonts/draw#Group\">Group</a>::op_get(self : <a href=\"gmlewis/fonts/draw#Group\">Group</a>, index : Int) -> <a href=\"gmlewis/fonts/draw#Graphic\">Graphic</a>",
          "loc": { "line": 17, "column": 8 }
        },
        {
          "name": "op_set",
          "docstring": " op_set is a convenience function.",
          "signature": "fn <a href=\"gmlewis/fonts/draw#Group\">Group</a>::op_set(self : <a href=\"gmlewis/fonts/draw#Group\">Group</a>, index : Int, graphic : <a href=\"gmlewis/fonts/draw#Graphic\">Graphic</a>) -> Unit",
          "loc": { "line": 22, "column": 8 }
        },
        {
          "name": "primitives",
          "docstring": " primitives returns a flattened array of all Graphic primitives in this Group.",
          "signature": "fn <a href=\"gmlewis/fonts/draw#Group\">Group</a>::primitives(self : <a href=\"gmlewis/fonts/draw#Group\">Group</a>) -> <a href=\"moonbitlang/core/array#Array\">Array</a>[<a href=\"gmlewis/fonts/draw#Graphic\">Graphic</a>]",
          "loc": { "line": 197, "column": 8 }
        },
        {
          "name": "remove_fill",
          "docstring": " remove_fill removes a fill style from this Group.",
          "signature": "fn <a href=\"gmlewis/fonts/draw#Group\">Group</a>::remove_fill(self : <a href=\"gmlewis/fonts/draw#Group\">Group</a>) -> <a href=\"gmlewis/fonts/draw#Group\">Group</a>",
          "loc": { "line": 255, "column": 8 }
        },
        {
          "name": "remove_stroke",
          "docstring": " remove_stroke removes a stroke style from this Group.",
          "signature": "fn <a href=\"gmlewis/fonts/draw#Group\">Group</a>::remove_stroke(self : <a href=\"gmlewis/fonts/draw#Group\">Group</a>) -> <a href=\"gmlewis/fonts/draw#Group\">Group</a>",
          "loc": { "line": 271, "column": 8 }
        },
        {
          "name": "reverse",
          "docstring": " reverse reverses this Group.",
          "signature": "fn <a href=\"gmlewis/fonts/draw#Group\">Group</a>::reverse(self : <a href=\"gmlewis/fonts/draw#Group\">Group</a>) -> <a href=\"gmlewis/fonts/draw#Group\">Group</a>",
          "loc": { "line": 202, "column": 8 }
        },
        {
          "name": "rotate",
          "docstring": " rotate rotates a Group clockwise by `angle` in degrees.",
          "signature": "fn <a href=\"gmlewis/fonts/draw#Group\">Group</a>::rotate(self : <a href=\"gmlewis/fonts/draw#Group\">Group</a>, angle : Double) -> <a href=\"gmlewis/fonts/draw#Group\">Group</a>",
          "loc": { "line": 359, "column": 8 }
        },
        {
          "name": "scale",
          "docstring": " scale scales a Group by `v`.",
          "signature": "fn <a href=\"gmlewis/fonts/draw#Group\">Group</a>::scale(self : <a href=\"gmlewis/fonts/draw#Group\">Group</a>, v : <a href=\"gmlewis/fonts/draw#Vec2\">Vec2</a>) -> <a href=\"gmlewis/fonts/draw#Group\">Group</a>",
          "loc": { "line": 353, "column": 8 }
        },
        {
          "name": "scale_stroke",
          "docstring": " scale_stroke scales the stroke width of this Group by `scale_factor`.",
          "signature": "fn <a href=\"gmlewis/fonts/draw#Group\">Group</a>::scale_stroke(self : <a href=\"gmlewis/fonts/draw#Group\">Group</a>, scale_factor : Double) -> <a href=\"gmlewis/fonts/draw#Group\">Group</a>",
          "loc": { "line": 295, "column": 8 }
        },
        {
          "name": "style_contains_point",
          "docstring": " style_contains_point returns true if this Group's style contains `point`.",
          "signature": "fn <a href=\"gmlewis/fonts/draw#Group\">Group</a>::style_contains_point(self : <a href=\"gmlewis/fonts/draw#Group\">Group</a>, point : <a href=\"gmlewis/fonts/draw#Vec2\">Vec2</a>) -> Bool",
          "loc": { "line": 320, "column": 8 }
        },
        {
          "name": "transform",
          "docstring": " transform provides a convenient API for a common task.",
          "signature": "fn <a href=\"gmlewis/fonts/draw#Group\">Group</a>::transform(self : <a href=\"gmlewis/fonts/draw#Group\">Group</a>, position~ : <a href=\"gmlewis/fonts/draw#Vec2\">Vec2</a> = .., rotation~ : Double = .., scale~ : <a href=\"gmlewis/fonts/draw#Vec2\">Vec2</a> = .., skew~ : Double = .., origin~ : <a href=\"gmlewis/fonts/draw#Vec2\">Vec2</a> = ..) -> <a href=\"gmlewis/fonts/draw#Group\">Group</a>",
          "loc": { "line": 57, "column": 8 }
        },
        {
          "name": "translate",
          "docstring": " translate translates a Group by `v`.",
          "signature": "fn <a href=\"gmlewis/fonts/draw#Group\">Group</a>::translate(self : <a href=\"gmlewis/fonts/draw#Group\">Group</a>, v : <a href=\"gmlewis/fonts/draw#Vec2\">Vec2</a>) -> <a href=\"gmlewis/fonts/draw#Group\">Group</a>",
          "loc": { "line": 347, "column": 8 }
        }
      ],
      "impls": [
        {
          "docstring": "",
          "signature": "impl <a href=\"moonbitlang/core/builtin#Show\">Show</a> for <a href=\"gmlewis/fonts/draw#Group\">Group</a>",
          "methods": [
            {
              "name": "output",
              "docstring": "automatically derived",
              "signature": "fn output(<a href=\"gmlewis/fonts/draw#Group\">Group</a>, <a href=\"moonbitlang/core/builtin#Logger\">Logger</a>) -> Unit",
              "loc": { "line": 4, "column": 10 }
            }
          ],
          "loc": { "line": 4, "column": 10 }
        },
        {
          "docstring": "",
          "signature": "impl <a href=\"moonbitlang/core/builtin#ToJson\">ToJson</a> for <a href=\"gmlewis/fonts/draw#Group\">Group</a>",
          "methods": [
            {
              "name": "to_json",
              "docstring": "automatically derived",
              "signature": "fn to_json(<a href=\"gmlewis/fonts/draw#Group\">Group</a>) -> <a href=\"moonbitlang/core/json#Json\">Json</a>",
              "loc": { "line": 4, "column": 26 }
            }
          ],
          "loc": { "line": 4, "column": 26 }
        },
        {
          "docstring": "",
          "signature": "impl <a href=\"moonbitlang/core/json#FromJson\">@moonbitlang/core/json.FromJson</a> for <a href=\"gmlewis/fonts/draw#Group\">Group</a>",
          "methods": [
            {
              "name": "from_json",
              "docstring": "automatically derived",
              "signature": "fn from_json(<a href=\"moonbitlang/core/json#Json\">Json</a>, <a href=\"moonbitlang/core/json#JsonPath\">@moonbitlang/core/json.JsonPath</a>) -> <a href=\"gmlewis/fonts/draw#Group\">Group</a>!<a href=\"moonbitlang/core/json#JsonDecodeError\">@moonbitlang/core/json.JsonDecodeError</a>",
              "loc": { "line": 4, "column": 16 }
            }
          ],
          "loc": { "line": 4, "column": 16 }
        }
      ]
    },
    {
      "name": "Path",
      "docstring": " Path represents an open or closed path that can be stroked as an outline\n or filled. A 'clear' path is sub-path of a Path that defines\n regions of the filled path where no fill is added, for example in the\n center of the letter 'O'.",
      "signature": "pub(all) struct Path {\n  anchors : <a href=\"moonbitlang/core/array#Array\">Array</a>[<a href=\"gmlewis/fonts/draw#Anchor\">Anchor</a>]\n  closed : Bool\n  clear : Bool\n  fill : <a href=\"gmlewis/fonts/draw#Fill\">Fill</a>?\n  stroke : <a href=\"gmlewis/fonts/draw#Stroke\">Stroke</a>?\n}",
      "loc": { "line": 5, "column": 17 },
      "methods": [
        {
          "name": "affine_transform",
          "docstring": " affine_transform transforms this Path by `affine_matrix`.",
          "signature": "fn <a href=\"gmlewis/fonts/draw#Path\">Path</a>::affine_transform(self : <a href=\"gmlewis/fonts/draw#Path\">Path</a>, affine_matrix : <a href=\"gmlewis/fonts/draw#AffineMatrix\">AffineMatrix</a>) -> <a href=\"gmlewis/fonts/draw#Path\">Path</a>",
          "loc": { "line": 66, "column": 8 }
        },
        {
          "name": "affine_transform_without_translation",
          "docstring": " affine_transform_without_translation transforms this Path by `affine_matrix`\n without affecting translation.",
          "signature": "fn <a href=\"gmlewis/fonts/draw#Path\">Path</a>::affine_transform_without_translation(self : <a href=\"gmlewis/fonts/draw#Path\">Path</a>, affine_matrix : <a href=\"gmlewis/fonts/draw#AffineMatrix\">AffineMatrix</a>) -> <a href=\"gmlewis/fonts/draw#Path\">Path</a>",
          "loc": { "line": 75, "column": 8 }
        },
        {
          "name": "as_graphic",
          "docstring": " as_graphic returns a Path as a Graphic.",
          "signature": "fn <a href=\"gmlewis/fonts/draw#Path\">Path</a>::as_graphic(self : <a href=\"gmlewis/fonts/draw#Path\">Path</a>) -> <a href=\"gmlewis/fonts/draw#Graphic\">Graphic</a>",
          "loc": { "line": 25, "column": 8 }
        },
        {
          "name": "assign_fill",
          "docstring": " assign_fill assigns a fill to this Path.",
          "signature": "fn <a href=\"gmlewis/fonts/draw#Path\">Path</a>::assign_fill(self : <a href=\"gmlewis/fonts/draw#Path\">Path</a>, fill : <a href=\"gmlewis/fonts/draw#Fill\">Fill</a>?) -> <a href=\"gmlewis/fonts/draw#Path\">Path</a>",
          "loc": { "line": 101, "column": 8 }
        },
        {
          "name": "assign_stroke",
          "docstring": " assign_stroke assigns a stroke to this Path.",
          "signature": "fn <a href=\"gmlewis/fonts/draw#Path\">Path</a>::assign_stroke(self : <a href=\"gmlewis/fonts/draw#Path\">Path</a>, stroke : <a href=\"gmlewis/fonts/draw#Stroke\">Stroke</a>?) -> <a href=\"gmlewis/fonts/draw#Path\">Path</a>",
          "loc": { "line": 107, "column": 8 }
        },
        {
          "name": "assign_style",
          "docstring": " assign_style assigns a stroke and fill style to this Path.",
          "signature": "fn <a href=\"gmlewis/fonts/draw#Path\">Path</a>::assign_style(self : <a href=\"gmlewis/fonts/draw#Path\">Path</a>, fill : <a href=\"gmlewis/fonts/draw#Fill\">Fill</a>?, stroke : <a href=\"gmlewis/fonts/draw#Stroke\">Stroke</a>?) -> <a href=\"gmlewis/fonts/draw#Path\">Path</a>",
          "loc": { "line": 113, "column": 8 }
        },
        {
          "name": "bounding_box",
          "docstring": " bounding_box returns the smallest axis-aligned bounding box that contains\n this Path or None.",
          "signature": "fn <a href=\"gmlewis/fonts/draw#Path\">Path</a>::bounding_box(self : <a href=\"gmlewis/fonts/draw#Path\">Path</a>) -> <a href=\"gmlewis/fonts/draw#BoundingBox\">BoundingBox</a>?",
          "loc": { "line": 197, "column": 8 }
        },
        {
          "name": "clone",
          "docstring": " clone makes a new copy of this Path.",
          "signature": "fn <a href=\"gmlewis/fonts/draw#Path\">Path</a>::clone(self : <a href=\"gmlewis/fonts/draw#Path\">Path</a>) -> <a href=\"gmlewis/fonts/draw#Path\">Path</a>",
          "loc": { "line": 56, "column": 8 }
        },
        {
          "name": "closest_point",
          "docstring": " closest_point returns the closest point to `point` that lies on this Path or None.",
          "signature": "fn <a href=\"gmlewis/fonts/draw#Path\">Path</a>::closest_point(self : <a href=\"gmlewis/fonts/draw#Path\">Path</a>, point : <a href=\"gmlewis/fonts/draw#Vec2\">Vec2</a>, area_of_interest : <a href=\"gmlewis/fonts/draw#BoundingBox\">BoundingBox</a>?) -> <a href=\"gmlewis/fonts/draw#Anchor\">Anchor</a>?",
          "loc": { "line": 247, "column": 8 }
        },
        {
          "name": "contains_point",
          "docstring": " contains_point returns true if this Path contains `point`.",
          "signature": "fn <a href=\"gmlewis/fonts/draw#Path\">Path</a>::contains_point(_self : <a href=\"gmlewis/fonts/draw#Path\">Path</a>, _point : <a href=\"gmlewis/fonts/draw#Vec2\">Vec2</a>) -> Bool",
          "loc": { "line": 319, "column": 14 }
        },
        {
          "name": "copy_style",
          "docstring": " copy_style copies the fill and stroke from `graphic`.",
          "signature": "fn <a href=\"gmlewis/fonts/draw#Path\">Path</a>::copy_style(self : <a href=\"gmlewis/fonts/draw#Path\">Path</a>, graphic : <a href=\"gmlewis/fonts/draw#Graphic\">Graphic</a>) -> <a href=\"gmlewis/fonts/draw#Path\">Path</a>",
          "loc": { "line": 324, "column": 8 }
        },
        {
          "name": "first_styled",
          "docstring": " first_styled returns this Path if it is styled or None.",
          "signature": "fn <a href=\"gmlewis/fonts/draw#Path\">Path</a>::first_styled(self : <a href=\"gmlewis/fonts/draw#Path\">Path</a>) -> <a href=\"gmlewis/fonts/draw#Graphic\">Graphic</a>?",
          "loc": { "line": 331, "column": 8 }
        },
        {
          "name": "from_points",
          "docstring": " Path::from_points connects a series of points with lines to form a Path.",
          "signature": "fn <a href=\"gmlewis/fonts/draw#Path\">Path</a>::from_points(points : <a href=\"moonbitlang/core/array#Array\">Array</a>[<a href=\"gmlewis/fonts/draw#Vec2\">Vec2</a>], closed~ : Bool = ..) -> <a href=\"gmlewis/fonts/draw#Path\">Path</a>",
          "loc": { "line": 40, "column": 14 }
        },
        {
          "name": "has_style",
          "docstring": " has_style returns true if this Path has fill or stroke.",
          "signature": "fn <a href=\"gmlewis/fonts/draw#Path\">Path</a>::has_style(self : <a href=\"gmlewis/fonts/draw#Path\">Path</a>) -> Bool",
          "loc": { "line": 340, "column": 8 }
        },
        {
          "name": "is_contained_by_bounding_box",
          "docstring": " is_contained_by_bounding_box returns true if no part of this Path\n lies beyond its min or max.",
          "signature": "fn <a href=\"gmlewis/fonts/draw#Path\">Path</a>::is_contained_by_bounding_box(self : <a href=\"gmlewis/fonts/draw#Path\">Path</a>, box : <a href=\"gmlewis/fonts/draw#BoundingBox\">BoundingBox</a>) -> Bool",
          "loc": { "line": 346, "column": 8 }
        },
        {
          "name": "is_intersected_by_bounding_box",
          "docstring": " is_intersected_by_bounding_box returns true if part of this Path crosses\n the boundary between inside and outside of `box`.",
          "signature": "fn <a href=\"gmlewis/fonts/draw#Path\">Path</a>::is_intersected_by_bounding_box(_self : <a href=\"gmlewis/fonts/draw#Path\">Path</a>, _box : <a href=\"gmlewis/fonts/draw#BoundingBox\">BoundingBox</a>) -> Bool",
          "loc": { "line": 357, "column": 14 }
        },
        {
          "name": "is_overlapped_by_bounding_box",
          "docstring": " is_overlapped_by_bounding_box returns if true if a point can be chosen\n that is inside both the Path and `box`.",
          "signature": "fn <a href=\"gmlewis/fonts/draw#Path\">Path</a>::is_overlapped_by_bounding_box(self : <a href=\"gmlewis/fonts/draw#Path\">Path</a>, box : <a href=\"gmlewis/fonts/draw#BoundingBox\">BoundingBox</a>) -> Bool",
          "loc": { "line": 391, "column": 8 }
        },
        {
          "name": "loose_bounding_box",
          "docstring": " loose_bounding_box returns an approximate bounding box for this Path.\n It may not be the smallest possible bounding box, but is cheaper to compute.",
          "signature": "fn <a href=\"gmlewis/fonts/draw#Path\">Path</a>::loose_bounding_box(self : <a href=\"gmlewis/fonts/draw#Path\">Path</a>) -> <a href=\"gmlewis/fonts/draw#BoundingBox\">BoundingBox</a>?",
          "loc": { "line": 398, "column": 8 }
        },
        {
          "name": "new",
          "docstring": " Path::new creates a new Path.",
          "signature": "fn <a href=\"gmlewis/fonts/draw#Path\">Path</a>::new(anchors~ : <a href=\"moonbitlang/core/array#Array\">Array</a>[<a href=\"gmlewis/fonts/draw#Anchor\">Anchor</a>] = .., closed~ : Bool = .., clear~ : Bool = .., fill~ : <a href=\"gmlewis/fonts/draw#Fill\">Fill</a>? = .., stroke~ : <a href=\"gmlewis/fonts/draw#Stroke\">Stroke</a>? = ..) -> <a href=\"gmlewis/fonts/draw#Path\">Path</a>",
          "loc": { "line": 14, "column": 14 }
        },
        {
          "name": "op_get",
          "docstring": " op_get is a convenience function.",
          "signature": "fn <a href=\"gmlewis/fonts/draw#Path\">Path</a>::op_get(self : <a href=\"gmlewis/fonts/draw#Path\">Path</a>, index : Int) -> <a href=\"gmlewis/fonts/draw#Anchor\">Anchor</a>",
          "loc": { "line": 30, "column": 8 }
        },
        {
          "name": "op_set",
          "docstring": " op_set is a convenience function.",
          "signature": "fn <a href=\"gmlewis/fonts/draw#Path\">Path</a>::op_set(self : <a href=\"gmlewis/fonts/draw#Path\">Path</a>, index : Int, anchor : <a href=\"gmlewis/fonts/draw#Anchor\">Anchor</a>) -> Unit",
          "loc": { "line": 35, "column": 8 }
        },
        {
          "name": "primitives",
          "docstring": " primitives returns a flattened array of Graphics primitives.",
          "signature": "fn <a href=\"gmlewis/fonts/draw#Path\">Path</a>::primitives(self : <a href=\"gmlewis/fonts/draw#Path\">Path</a>) -> <a href=\"moonbitlang/core/array#Array\">Array</a>[<a href=\"gmlewis/fonts/draw#Graphic\">Graphic</a>]",
          "loc": { "line": 456, "column": 8 }
        },
        {
          "name": "remove_fill",
          "docstring": " remove_fill removes fill styling from this Path.",
          "signature": "fn <a href=\"gmlewis/fonts/draw#Path\">Path</a>::remove_fill(self : <a href=\"gmlewis/fonts/draw#Path\">Path</a>) -> <a href=\"gmlewis/fonts/draw#Path\">Path</a>",
          "loc": { "line": 461, "column": 8 }
        },
        {
          "name": "remove_stroke",
          "docstring": " remove_stroke removes stroke styling from this Path.",
          "signature": "fn <a href=\"gmlewis/fonts/draw#Path\">Path</a>::remove_stroke(self : <a href=\"gmlewis/fonts/draw#Path\">Path</a>) -> <a href=\"gmlewis/fonts/draw#Path\">Path</a>",
          "loc": { "line": 467, "column": 8 }
        },
        {
          "name": "reverse",
          "docstring": " reverse reverses this Path.",
          "signature": "fn <a href=\"gmlewis/fonts/draw#Path\">Path</a>::reverse(self : <a href=\"gmlewis/fonts/draw#Path\">Path</a>) -> <a href=\"gmlewis/fonts/draw#Path\">Path</a>",
          "loc": { "line": 473, "column": 8 }
        },
        {
          "name": "rotate",
          "docstring": " rotate rotates a Path clockwise by `angle` in degrees.",
          "signature": "fn <a href=\"gmlewis/fonts/draw#Path\">Path</a>::rotate(self : <a href=\"gmlewis/fonts/draw#Path\">Path</a>, angle : Double) -> <a href=\"gmlewis/fonts/draw#Path\">Path</a>",
          "loc": { "line": 509, "column": 8 }
        },
        {
          "name": "scale",
          "docstring": " scale scales a Path by `v`.",
          "signature": "fn <a href=\"gmlewis/fonts/draw#Path\">Path</a>::scale(self : <a href=\"gmlewis/fonts/draw#Path\">Path</a>, v : <a href=\"gmlewis/fonts/draw#Vec2\">Vec2</a>) -> <a href=\"gmlewis/fonts/draw#Path\">Path</a>",
          "loc": { "line": 503, "column": 8 }
        },
        {
          "name": "scale_stroke",
          "docstring": " scale_stroke scales the width of this stroke by `scale_factor`.",
          "signature": "fn <a href=\"gmlewis/fonts/draw#Path\">Path</a>::scale_stroke(self : <a href=\"gmlewis/fonts/draw#Path\">Path</a>, scale_factor : Double) -> <a href=\"gmlewis/fonts/draw#Path\">Path</a>",
          "loc": { "line": 482, "column": 8 }
        },
        {
          "name": "style_contains_point",
          "docstring": " style_contains_point returns true if this path's style contains `point`.",
          "signature": "fn <a href=\"gmlewis/fonts/draw#Path\">Path</a>::style_contains_point(_self : <a href=\"gmlewis/fonts/draw#Path\">Path</a>, _point : <a href=\"gmlewis/fonts/draw#Vec2\">Vec2</a>) -> Bool",
          "loc": { "line": 491, "column": 14 }
        },
        {
          "name": "transform",
          "docstring": " transform provides a convenient API for a common task.",
          "signature": "fn <a href=\"gmlewis/fonts/draw#Path\">Path</a>::transform(self : <a href=\"gmlewis/fonts/draw#Path\">Path</a>, position~ : <a href=\"gmlewis/fonts/draw#Vec2\">Vec2</a> = .., rotation~ : Double = .., scale~ : <a href=\"gmlewis/fonts/draw#Vec2\">Vec2</a> = .., skew~ : Double = .., origin~ : <a href=\"gmlewis/fonts/draw#Vec2\">Vec2</a> = ..) -> <a href=\"gmlewis/fonts/draw#Path\">Path</a>",
          "loc": { "line": 86, "column": 8 }
        },
        {
          "name": "translate",
          "docstring": " translate translates a Path by `v`.",
          "signature": "fn <a href=\"gmlewis/fonts/draw#Path\">Path</a>::translate(self : <a href=\"gmlewis/fonts/draw#Path\">Path</a>, v : <a href=\"gmlewis/fonts/draw#Vec2\">Vec2</a>) -> <a href=\"gmlewis/fonts/draw#Path\">Path</a>",
          "loc": { "line": 497, "column": 8 }
        }
      ],
      "impls": [
        {
          "docstring": "",
          "signature": "impl <a href=\"moonbitlang/core/builtin#Show\">Show</a> for <a href=\"gmlewis/fonts/draw#Path\">Path</a>",
          "methods": [
            {
              "name": "output",
              "docstring": "automatically derived",
              "signature": "fn output(<a href=\"gmlewis/fonts/draw#Path\">Path</a>, <a href=\"moonbitlang/core/builtin#Logger\">Logger</a>) -> Unit",
              "loc": { "line": 11, "column": 10 }
            }
          ],
          "loc": { "line": 11, "column": 10 }
        },
        {
          "docstring": "",
          "signature": "impl <a href=\"moonbitlang/core/builtin#ToJson\">ToJson</a> for <a href=\"gmlewis/fonts/draw#Path\">Path</a>",
          "methods": [
            {
              "name": "to_json",
              "docstring": "automatically derived",
              "signature": "fn to_json(<a href=\"gmlewis/fonts/draw#Path\">Path</a>) -> <a href=\"moonbitlang/core/json#Json\">Json</a>",
              "loc": { "line": 11, "column": 26 }
            }
          ],
          "loc": { "line": 11, "column": 26 }
        },
        {
          "docstring": "",
          "signature": "impl <a href=\"moonbitlang/core/json#FromJson\">@moonbitlang/core/json.FromJson</a> for <a href=\"gmlewis/fonts/draw#Path\">Path</a>",
          "methods": [
            {
              "name": "from_json",
              "docstring": "automatically derived",
              "signature": "fn from_json(<a href=\"moonbitlang/core/json#Json\">Json</a>, <a href=\"moonbitlang/core/json#JsonPath\">@moonbitlang/core/json.JsonPath</a>) -> <a href=\"gmlewis/fonts/draw#Path\">Path</a>!<a href=\"moonbitlang/core/json#JsonDecodeError\">@moonbitlang/core/json.JsonDecodeError</a>",
              "loc": { "line": 11, "column": 16 }
            }
          ],
          "loc": { "line": 11, "column": 16 }
        }
      ]
    },
    {
      "name": "Stroke",
      "docstring": " Stroke defines a stroke style.",
      "signature": "pub(all) struct Stroke {\n  color : <a href=\"gmlewis/fonts/draw#Color\">Color</a>\n  width : Double\n  alignment : <a href=\"gmlewis/fonts/draw#StrokeAlignment\">StrokeAlignment</a>\n  cap : <a href=\"gmlewis/fonts/draw#StrokeCap\">StrokeCap</a>\n  join : <a href=\"gmlewis/fonts/draw#StrokeJoin\">StrokeJoin</a>\n  miter_limit : Double\n}",
      "loc": { "line": 2, "column": 17 },
      "methods": [
        {
          "name": "clone",
          "docstring": " clone returns a new copy of this Stroke.",
          "signature": "fn <a href=\"gmlewis/fonts/draw#Stroke\">Stroke</a>::clone(self : <a href=\"gmlewis/fonts/draw#Stroke\">Stroke</a>) -> <a href=\"gmlewis/fonts/draw#Stroke\">Stroke</a>",
          "loc": { "line": 50, "column": 8 }
        },
        {
          "name": "new",
          "docstring": " Stroke::new returns a new stroke style.",
          "signature": "fn <a href=\"gmlewis/fonts/draw#Stroke\">Stroke</a>::new(color~ : <a href=\"gmlewis/fonts/draw#Color\">Color</a> = .., width~ : Double = .., alignment~ : <a href=\"gmlewis/fonts/draw#StrokeAlignment\">StrokeAlignment</a> = .., cap~ : <a href=\"gmlewis/fonts/draw#StrokeCap\">StrokeCap</a> = .., join~ : <a href=\"gmlewis/fonts/draw#StrokeJoin\">StrokeJoin</a> = .., miter_limit~ : Double = ..) -> <a href=\"gmlewis/fonts/draw#Stroke\">Stroke</a>",
          "loc": { "line": 33, "column": 16 }
        }
      ],
      "impls": [
        {
          "docstring": "",
          "signature": "impl <a href=\"moonbitlang/core/builtin#Eq\">Eq</a> for <a href=\"gmlewis/fonts/draw#Stroke\">Stroke</a>",
          "methods": [
            {
              "name": "op_equal",
              "docstring": "automatically derived",
              "signature": "fn op_equal(<a href=\"gmlewis/fonts/draw#Stroke\">Stroke</a>, <a href=\"gmlewis/fonts/draw#Stroke\">Stroke</a>) -> Bool",
              "loc": { "line": 9, "column": 16 }
            }
          ],
          "loc": { "line": 9, "column": 16 }
        },
        {
          "docstring": "",
          "signature": "impl <a href=\"moonbitlang/core/builtin#Show\">Show</a> for <a href=\"gmlewis/fonts/draw#Stroke\">Stroke</a>",
          "methods": [
            {
              "name": "output",
              "docstring": "automatically derived",
              "signature": "fn output(<a href=\"gmlewis/fonts/draw#Stroke\">Stroke</a>, <a href=\"moonbitlang/core/builtin#Logger\">Logger</a>) -> Unit",
              "loc": { "line": 9, "column": 10 }
            }
          ],
          "loc": { "line": 9, "column": 10 }
        },
        {
          "docstring": "",
          "signature": "impl <a href=\"moonbitlang/core/builtin#ToJson\">ToJson</a> for <a href=\"gmlewis/fonts/draw#Stroke\">Stroke</a>",
          "methods": [
            {
              "name": "to_json",
              "docstring": "automatically derived",
              "signature": "fn to_json(<a href=\"gmlewis/fonts/draw#Stroke\">Stroke</a>) -> <a href=\"moonbitlang/core/json#Json\">Json</a>",
              "loc": { "line": 9, "column": 30 }
            }
          ],
          "loc": { "line": 9, "column": 30 }
        },
        {
          "docstring": "",
          "signature": "impl <a href=\"moonbitlang/core/json#FromJson\">@moonbitlang/core/json.FromJson</a> for <a href=\"gmlewis/fonts/draw#Stroke\">Stroke</a>",
          "methods": [
            {
              "name": "from_json",
              "docstring": "automatically derived",
              "signature": "fn from_json(<a href=\"moonbitlang/core/json#Json\">Json</a>, <a href=\"moonbitlang/core/json#JsonPath\">@moonbitlang/core/json.JsonPath</a>) -> <a href=\"gmlewis/fonts/draw#Stroke\">Stroke</a>!<a href=\"moonbitlang/core/json#JsonDecodeError\">@moonbitlang/core/json.JsonDecodeError</a>",
              "loc": { "line": 9, "column": 20 }
            }
          ],
          "loc": { "line": 9, "column": 20 }
        }
      ]
    },
    {
      "name": "StrokeAlignment",
      "docstring": "",
      "signature": "pub(all) enum StrokeAlignment {\n  Centered\n  Inner\n  Outer\n}",
      "loc": { "line": 12, "column": 15 },
      "methods": [],
      "impls": [
        {
          "docstring": "",
          "signature": "impl <a href=\"moonbitlang/core/builtin#Eq\">Eq</a> for <a href=\"gmlewis/fonts/draw#StrokeAlignment\">StrokeAlignment</a>",
          "methods": [
            {
              "name": "op_equal",
              "docstring": "automatically derived",
              "signature": "fn op_equal(<a href=\"gmlewis/fonts/draw#StrokeAlignment\">StrokeAlignment</a>, <a href=\"gmlewis/fonts/draw#StrokeAlignment\">StrokeAlignment</a>) -> Bool",
              "loc": { "line": 16, "column": 16 }
            }
          ],
          "loc": { "line": 16, "column": 16 }
        },
        {
          "docstring": "",
          "signature": "impl <a href=\"moonbitlang/core/builtin#Show\">Show</a> for <a href=\"gmlewis/fonts/draw#StrokeAlignment\">StrokeAlignment</a>",
          "methods": [
            {
              "name": "output",
              "docstring": "automatically derived",
              "signature": "fn output(<a href=\"gmlewis/fonts/draw#StrokeAlignment\">StrokeAlignment</a>, <a href=\"moonbitlang/core/builtin#Logger\">Logger</a>) -> Unit",
              "loc": { "line": 16, "column": 10 }
            }
          ],
          "loc": { "line": 16, "column": 10 }
        },
        {
          "docstring": "",
          "signature": "impl <a href=\"moonbitlang/core/builtin#ToJson\">ToJson</a> for <a href=\"gmlewis/fonts/draw#StrokeAlignment\">StrokeAlignment</a>",
          "methods": [
            {
              "name": "to_json",
              "docstring": "automatically derived",
              "signature": "fn to_json(<a href=\"gmlewis/fonts/draw#StrokeAlignment\">StrokeAlignment</a>) -> <a href=\"moonbitlang/core/json#Json\">Json</a>",
              "loc": { "line": 16, "column": 30 }
            }
          ],
          "loc": { "line": 16, "column": 30 }
        },
        {
          "docstring": "",
          "signature": "impl <a href=\"moonbitlang/core/json#FromJson\">@moonbitlang/core/json.FromJson</a> for <a href=\"gmlewis/fonts/draw#StrokeAlignment\">StrokeAlignment</a>",
          "methods": [
            {
              "name": "from_json",
              "docstring": "automatically derived",
              "signature": "fn from_json(<a href=\"moonbitlang/core/json#Json\">Json</a>, <a href=\"moonbitlang/core/json#JsonPath\">@moonbitlang/core/json.JsonPath</a>) -> <a href=\"gmlewis/fonts/draw#StrokeAlignment\">StrokeAlignment</a>!<a href=\"moonbitlang/core/json#JsonDecodeError\">@moonbitlang/core/json.JsonDecodeError</a>",
              "loc": { "line": 16, "column": 20 }
            }
          ],
          "loc": { "line": 16, "column": 20 }
        }
      ]
    },
    {
      "name": "StrokeCap",
      "docstring": "",
      "signature": "pub(all) enum StrokeCap {\n  Butt\n  Round\n  Square\n}",
      "loc": { "line": 19, "column": 15 },
      "methods": [],
      "impls": [
        {
          "docstring": "",
          "signature": "impl <a href=\"moonbitlang/core/builtin#Eq\">Eq</a> for <a href=\"gmlewis/fonts/draw#StrokeCap\">StrokeCap</a>",
          "methods": [
            {
              "name": "op_equal",
              "docstring": "automatically derived",
              "signature": "fn op_equal(<a href=\"gmlewis/fonts/draw#StrokeCap\">StrokeCap</a>, <a href=\"gmlewis/fonts/draw#StrokeCap\">StrokeCap</a>) -> Bool",
              "loc": { "line": 23, "column": 16 }
            }
          ],
          "loc": { "line": 23, "column": 16 }
        },
        {
          "docstring": "",
          "signature": "impl <a href=\"moonbitlang/core/builtin#Show\">Show</a> for <a href=\"gmlewis/fonts/draw#StrokeCap\">StrokeCap</a>",
          "methods": [
            {
              "name": "output",
              "docstring": "automatically derived",
              "signature": "fn output(<a href=\"gmlewis/fonts/draw#StrokeCap\">StrokeCap</a>, <a href=\"moonbitlang/core/builtin#Logger\">Logger</a>) -> Unit",
              "loc": { "line": 23, "column": 10 }
            }
          ],
          "loc": { "line": 23, "column": 10 }
        },
        {
          "docstring": "",
          "signature": "impl <a href=\"moonbitlang/core/builtin#ToJson\">ToJson</a> for <a href=\"gmlewis/fonts/draw#StrokeCap\">StrokeCap</a>",
          "methods": [
            {
              "name": "to_json",
              "docstring": "automatically derived",
              "signature": "fn to_json(<a href=\"gmlewis/fonts/draw#StrokeCap\">StrokeCap</a>) -> <a href=\"moonbitlang/core/json#Json\">Json</a>",
              "loc": { "line": 23, "column": 30 }
            }
          ],
          "loc": { "line": 23, "column": 30 }
        },
        {
          "docstring": "",
          "signature": "impl <a href=\"moonbitlang/core/json#FromJson\">@moonbitlang/core/json.FromJson</a> for <a href=\"gmlewis/fonts/draw#StrokeCap\">StrokeCap</a>",
          "methods": [
            {
              "name": "from_json",
              "docstring": "automatically derived",
              "signature": "fn from_json(<a href=\"moonbitlang/core/json#Json\">Json</a>, <a href=\"moonbitlang/core/json#JsonPath\">@moonbitlang/core/json.JsonPath</a>) -> <a href=\"gmlewis/fonts/draw#StrokeCap\">StrokeCap</a>!<a href=\"moonbitlang/core/json#JsonDecodeError\">@moonbitlang/core/json.JsonDecodeError</a>",
              "loc": { "line": 23, "column": 20 }
            }
          ],
          "loc": { "line": 23, "column": 20 }
        }
      ]
    },
    {
      "name": "StrokeJoin",
      "docstring": "",
      "signature": "pub(all) enum StrokeJoin {\n  Miter\n  Round\n  Bevel\n}",
      "loc": { "line": 26, "column": 15 },
      "methods": [],
      "impls": [
        {
          "docstring": "",
          "signature": "impl <a href=\"moonbitlang/core/builtin#Eq\">Eq</a> for <a href=\"gmlewis/fonts/draw#StrokeJoin\">StrokeJoin</a>",
          "methods": [
            {
              "name": "op_equal",
              "docstring": "automatically derived",
              "signature": "fn op_equal(<a href=\"gmlewis/fonts/draw#StrokeJoin\">StrokeJoin</a>, <a href=\"gmlewis/fonts/draw#StrokeJoin\">StrokeJoin</a>) -> Bool",
              "loc": { "line": 30, "column": 16 }
            }
          ],
          "loc": { "line": 30, "column": 16 }
        },
        {
          "docstring": "",
          "signature": "impl <a href=\"moonbitlang/core/builtin#Show\">Show</a> for <a href=\"gmlewis/fonts/draw#StrokeJoin\">StrokeJoin</a>",
          "methods": [
            {
              "name": "output",
              "docstring": "automatically derived",
              "signature": "fn output(<a href=\"gmlewis/fonts/draw#StrokeJoin\">StrokeJoin</a>, <a href=\"moonbitlang/core/builtin#Logger\">Logger</a>) -> Unit",
              "loc": { "line": 30, "column": 10 }
            }
          ],
          "loc": { "line": 30, "column": 10 }
        },
        {
          "docstring": "",
          "signature": "impl <a href=\"moonbitlang/core/builtin#ToJson\">ToJson</a> for <a href=\"gmlewis/fonts/draw#StrokeJoin\">StrokeJoin</a>",
          "methods": [
            {
              "name": "to_json",
              "docstring": "automatically derived",
              "signature": "fn to_json(<a href=\"gmlewis/fonts/draw#StrokeJoin\">StrokeJoin</a>) -> <a href=\"moonbitlang/core/json#Json\">Json</a>",
              "loc": { "line": 30, "column": 30 }
            }
          ],
          "loc": { "line": 30, "column": 30 }
        },
        {
          "docstring": "",
          "signature": "impl <a href=\"moonbitlang/core/json#FromJson\">@moonbitlang/core/json.FromJson</a> for <a href=\"gmlewis/fonts/draw#StrokeJoin\">StrokeJoin</a>",
          "methods": [
            {
              "name": "from_json",
              "docstring": "automatically derived",
              "signature": "fn from_json(<a href=\"moonbitlang/core/json#Json\">Json</a>, <a href=\"moonbitlang/core/json#JsonPath\">@moonbitlang/core/json.JsonPath</a>) -> <a href=\"gmlewis/fonts/draw#StrokeJoin\">StrokeJoin</a>!<a href=\"moonbitlang/core/json#JsonDecodeError\">@moonbitlang/core/json.JsonDecodeError</a>",
              "loc": { "line": 30, "column": 20 }
            }
          ],
          "loc": { "line": 30, "column": 20 }
        }
      ]
    },
    {
      "name": "TextAlign",
      "docstring": "",
      "signature": "pub(all) enum TextAlign {\n  Left\n  Center\n  Right\n}",
      "loc": { "line": 5, "column": 15 },
      "methods": [],
      "impls": [
        {
          "docstring": "",
          "signature": "impl <a href=\"moonbitlang/core/builtin#Eq\">Eq</a> for <a href=\"gmlewis/fonts/draw#TextAlign\">TextAlign</a>",
          "methods": [
            {
              "name": "op_equal",
              "docstring": "automatically derived",
              "signature": "fn op_equal(<a href=\"gmlewis/fonts/draw#TextAlign\">TextAlign</a>, <a href=\"gmlewis/fonts/draw#TextAlign\">TextAlign</a>) -> Bool",
              "loc": { "line": 9, "column": 16 }
            }
          ],
          "loc": { "line": 9, "column": 16 }
        },
        {
          "docstring": "",
          "signature": "impl <a href=\"moonbitlang/core/builtin#Show\">Show</a> for <a href=\"gmlewis/fonts/draw#TextAlign\">TextAlign</a>",
          "methods": [
            {
              "name": "output",
              "docstring": "automatically derived",
              "signature": "fn output(<a href=\"gmlewis/fonts/draw#TextAlign\">TextAlign</a>, <a href=\"moonbitlang/core/builtin#Logger\">Logger</a>) -> Unit",
              "loc": { "line": 9, "column": 10 }
            }
          ],
          "loc": { "line": 9, "column": 10 }
        }
      ]
    },
    {
      "name": "Transform",
      "docstring": " Transform represents transform arguments.",
      "signature": "pub(all) struct Transform {\n  position : <a href=\"gmlewis/fonts/draw#Vec2\">Vec2</a>\n  rotation : Double\n  scale : <a href=\"gmlewis/fonts/draw#Vec2\">Vec2</a>\n  skew : Double\n  origin : <a href=\"gmlewis/fonts/draw#Vec2\">Vec2</a>\n}",
      "loc": { "line": 2, "column": 17 },
      "methods": [
        {
          "name": "new",
          "docstring": " Transform::new returns a new identity transform.",
          "signature": "fn <a href=\"gmlewis/fonts/draw#Transform\">Transform</a>::new(position~ : <a href=\"gmlewis/fonts/draw#Vec2\">Vec2</a> = .., rotation~ : Double = .., scale~ : <a href=\"gmlewis/fonts/draw#Vec2\">Vec2</a> = .., skew~ : Double = .., origin~ : <a href=\"gmlewis/fonts/draw#Vec2\">Vec2</a> = ..) -> <a href=\"gmlewis/fonts/draw#Transform\">Transform</a>",
          "loc": { "line": 11, "column": 19 }
        }
      ],
      "impls": [
        {
          "docstring": "",
          "signature": "impl <a href=\"moonbitlang/core/builtin#Eq\">Eq</a> for <a href=\"gmlewis/fonts/draw#Transform\">Transform</a>",
          "methods": [
            {
              "name": "op_equal",
              "docstring": "automatically derived",
              "signature": "fn op_equal(<a href=\"gmlewis/fonts/draw#Transform\">Transform</a>, <a href=\"gmlewis/fonts/draw#Transform\">Transform</a>) -> Bool",
              "loc": { "line": 8, "column": 16 }
            }
          ],
          "loc": { "line": 8, "column": 16 }
        },
        {
          "docstring": "",
          "signature": "impl <a href=\"moonbitlang/core/builtin#Show\">Show</a> for <a href=\"gmlewis/fonts/draw#Transform\">Transform</a>",
          "methods": [
            {
              "name": "output",
              "docstring": "automatically derived",
              "signature": "fn output(<a href=\"gmlewis/fonts/draw#Transform\">Transform</a>, <a href=\"moonbitlang/core/builtin#Logger\">Logger</a>) -> Unit",
              "loc": { "line": 8, "column": 10 }
            }
          ],
          "loc": { "line": 8, "column": 10 }
        }
      ]
    },
    {
      "name": "Vec2",
      "docstring": " Vec2 represents a 2D vector.",
      "signature": "pub(all) struct Vec2 {\n  x : Double\n  y : Double\n}",
      "loc": { "line": 2, "column": 17 },
      "methods": [
        {
          "name": "add",
          "docstring": " add adds the vector `v` to this vector.",
          "signature": "fn <a href=\"gmlewis/fonts/draw#Vec2\">Vec2</a>::add(self : <a href=\"gmlewis/fonts/draw#Vec2\">Vec2</a>, v : <a href=\"gmlewis/fonts/draw#Vec2\">Vec2</a>) -> <a href=\"gmlewis/fonts/draw#Vec2\">Vec2</a>",
          "loc": { "line": 105, "column": 8 }
        },
        {
          "name": "add_scalar",
          "docstring": " add_scalar adds scalar `s` to this vector.",
          "signature": "fn <a href=\"gmlewis/fonts/draw#Vec2\">Vec2</a>::add_scalar(self : <a href=\"gmlewis/fonts/draw#Vec2\">Vec2</a>, s : Double) -> <a href=\"gmlewis/fonts/draw#Vec2\">Vec2</a>",
          "loc": { "line": 118, "column": 8 }
        },
        {
          "name": "affine_transform",
          "docstring": " affine_transform transforms this Vec2 by the `affine_matrix`.\n This is used when transforming a point or position.",
          "signature": "fn <a href=\"gmlewis/fonts/draw#Vec2\">Vec2</a>::affine_transform(self : <a href=\"gmlewis/fonts/draw#Vec2\">Vec2</a>, affine_matrix : <a href=\"gmlewis/fonts/draw#AffineMatrix\">AffineMatrix</a>) -> <a href=\"gmlewis/fonts/draw#Vec2\">Vec2</a>",
          "loc": { "line": 66, "column": 8 }
        },
        {
          "name": "affine_transform_without_translation",
          "docstring": " affine_transform_without_translation transforms this Vec2 by the `affine_matrix`\n but without performing translation.\n This is used when transforming a normal or tangent.",
          "signature": "fn <a href=\"gmlewis/fonts/draw#Vec2\">Vec2</a>::affine_transform_without_translation(self : <a href=\"gmlewis/fonts/draw#Vec2\">Vec2</a>, affine_matrix : <a href=\"gmlewis/fonts/draw#AffineMatrix\">AffineMatrix</a>) -> <a href=\"gmlewis/fonts/draw#Vec2\">Vec2</a>",
          "loc": { "line": 77, "column": 8 }
        },
        {
          "name": "almost_equals",
          "docstring": " almost_equals returns true if the vectors are equal within the provided tolerance.",
          "signature": "fn <a href=\"gmlewis/fonts/draw#Vec2\">Vec2</a>::almost_equals(self : <a href=\"gmlewis/fonts/draw#Vec2\">Vec2</a>, other : <a href=\"gmlewis/fonts/draw#Vec2\">Vec2</a>, tolerance~ : Double = ..) -> Bool",
          "loc": { "line": 208, "column": 8 }
        },
        {
          "name": "angle",
          "docstring": " angle returns the angle of this vector in degrees.",
          "signature": "fn <a href=\"gmlewis/fonts/draw#Vec2\">Vec2</a>::angle(self : <a href=\"gmlewis/fonts/draw#Vec2\">Vec2</a>) -> Double",
          "loc": { "line": 354, "column": 8 }
        },
        {
          "name": "angle_radians",
          "docstring": " angle_radians returns the angle of this vector in radians.",
          "signature": "fn <a href=\"gmlewis/fonts/draw#Vec2\">Vec2</a>::angle_radians(self : <a href=\"gmlewis/fonts/draw#Vec2\">Vec2</a>) -> Double",
          "loc": { "line": 359, "column": 8 }
        },
        {
          "name": "apply",
          "docstring": " apply applies the provided `func` to both components of this vector.",
          "signature": "fn <a href=\"gmlewis/fonts/draw#Vec2\">Vec2</a>::apply(self : <a href=\"gmlewis/fonts/draw#Vec2\">Vec2</a>, func : (Double) -> Double) -> <a href=\"gmlewis/fonts/draw#Vec2\">Vec2</a>",
          "loc": { "line": 218, "column": 8 }
        },
        {
          "name": "ceil",
          "docstring": " ceil rounds the components of this vector to the next-higher integer.",
          "signature": "fn <a href=\"gmlewis/fonts/draw#Vec2\">Vec2</a>::ceil(self : <a href=\"gmlewis/fonts/draw#Vec2\">Vec2</a>) -> <a href=\"gmlewis/fonts/draw#Vec2\">Vec2</a>",
          "loc": { "line": 230, "column": 8 }
        },
        {
          "name": "clone",
          "docstring": " clone returns a new copy of this Vec2.",
          "signature": "fn <a href=\"gmlewis/fonts/draw#Vec2\">Vec2</a>::clone(self : <a href=\"gmlewis/fonts/draw#Vec2\">Vec2</a>) -> <a href=\"gmlewis/fonts/draw#Vec2\">Vec2</a>",
          "loc": { "line": 41, "column": 8 }
        },
        {
          "name": "copy",
          "docstring": " copy copies `v` into this Vec2.",
          "signature": "fn <a href=\"gmlewis/fonts/draw#Vec2\">Vec2</a>::copy(self : <a href=\"gmlewis/fonts/draw#Vec2\">Vec2</a>, v : <a href=\"gmlewis/fonts/draw#Vec2\">Vec2</a>) -> <a href=\"gmlewis/fonts/draw#Vec2\">Vec2</a>",
          "loc": { "line": 53, "column": 8 }
        },
        {
          "name": "cross",
          "docstring": " cross returns the cross product between this vector and the vector `v`.",
          "signature": "fn <a href=\"gmlewis/fonts/draw#Vec2\">Vec2</a>::cross(self : <a href=\"gmlewis/fonts/draw#Vec2\">Vec2</a>, v : <a href=\"gmlewis/fonts/draw#Vec2\">Vec2</a>) -> Double",
          "loc": { "line": 296, "column": 8 }
        },
        {
          "name": "distance",
          "docstring": " distance returns the distance from this vector to `v`.",
          "signature": "fn <a href=\"gmlewis/fonts/draw#Vec2\">Vec2</a>::distance(self : <a href=\"gmlewis/fonts/draw#Vec2\">Vec2</a>, v : <a href=\"gmlewis/fonts/draw#Vec2\">Vec2</a>) -> Double",
          "loc": { "line": 380, "column": 8 }
        },
        {
          "name": "distance_squared",
          "docstring": " distance_squared returns the squared distance from this vector to `v`.",
          "signature": "fn <a href=\"gmlewis/fonts/draw#Vec2\">Vec2</a>::distance_squared(self : <a href=\"gmlewis/fonts/draw#Vec2\">Vec2</a>, v : <a href=\"gmlewis/fonts/draw#Vec2\">Vec2</a>) -> Double",
          "loc": { "line": 385, "column": 8 }
        },
        {
          "name": "div",
          "docstring": " div divides this vector by vector `v`.",
          "signature": "fn <a href=\"gmlewis/fonts/draw#Vec2\">Vec2</a>::div(self : <a href=\"gmlewis/fonts/draw#Vec2\">Vec2</a>, v : <a href=\"gmlewis/fonts/draw#Vec2\">Vec2</a>) -> <a href=\"gmlewis/fonts/draw#Vec2\">Vec2</a>",
          "loc": { "line": 165, "column": 8 }
        },
        {
          "name": "div_scalar",
          "docstring": " div_scalar divides this vector by scalar `s`.",
          "signature": "fn <a href=\"gmlewis/fonts/draw#Vec2\">Vec2</a>::div_scalar(self : <a href=\"gmlewis/fonts/draw#Vec2\">Vec2</a>, s : Double) -> <a href=\"gmlewis/fonts/draw#Vec2\">Vec2</a>",
          "loc": { "line": 178, "column": 8 }
        },
        {
          "name": "dot",
          "docstring": " dot returns the dot product between this vector and the vector `v`.",
          "signature": "fn <a href=\"gmlewis/fonts/draw#Vec2\">Vec2</a>::dot(self : <a href=\"gmlewis/fonts/draw#Vec2\">Vec2</a>, v : <a href=\"gmlewis/fonts/draw#Vec2\">Vec2</a>) -> Double",
          "loc": { "line": 291, "column": 8 }
        },
        {
          "name": "floor",
          "docstring": " floor rounds the components of this vector to the next-lower integer.",
          "signature": "fn <a href=\"gmlewis/fonts/draw#Vec2\">Vec2</a>::floor(self : <a href=\"gmlewis/fonts/draw#Vec2\">Vec2</a>) -> <a href=\"gmlewis/fonts/draw#Vec2\">Vec2</a>",
          "loc": { "line": 225, "column": 8 }
        },
        {
          "name": "from_angle",
          "docstring": " Vec2::from_angle returns a new unit vec2 from an angle in degrees.",
          "signature": "fn <a href=\"gmlewis/fonts/draw#Vec2\">Vec2</a>::from_angle(angle : Double) -> <a href=\"gmlewis/fonts/draw#Vec2\">Vec2</a>",
          "loc": { "line": 28, "column": 14 }
        },
        {
          "name": "from_angle_radians",
          "docstring": " Vec2::from_angle_radians returns a new unit vec2 from an angle in radians.",
          "signature": "fn <a href=\"gmlewis/fonts/draw#Vec2\">Vec2</a>::from_angle_radians(rad : Double) -> <a href=\"gmlewis/fonts/draw#Vec2\">Vec2</a>",
          "loc": { "line": 34, "column": 14 }
        },
        {
          "name": "infinity",
          "docstring": " Vec::infinity returns a new Vec2 with infinite x and y.",
          "signature": "fn <a href=\"gmlewis/fonts/draw#Vec2\">Vec2</a>::infinity() -> <a href=\"gmlewis/fonts/draw#Vec2\">Vec2</a>",
          "loc": { "line": 13, "column": 14 }
        },
        {
          "name": "is_clockwise_from",
          "docstring": " is_clockwise_from returns true if this vector lies in the 180° region\n clockwise from `v`.",
          "signature": "fn <a href=\"gmlewis/fonts/draw#Vec2\">Vec2</a>::is_clockwise_from(self : <a href=\"gmlewis/fonts/draw#Vec2\">Vec2</a>, v : <a href=\"gmlewis/fonts/draw#Vec2\">Vec2</a>) -> Bool",
          "loc": { "line": 365, "column": 8 }
        },
        {
          "name": "is_inf",
          "docstring": " is_inf returns true if either component is infinite.",
          "signature": "fn <a href=\"gmlewis/fonts/draw#Vec2\">Vec2</a>::is_inf(self : <a href=\"gmlewis/fonts/draw#Vec2\">Vec2</a>) -> Bool",
          "loc": { "line": 402, "column": 8 }
        },
        {
          "name": "is_nan",
          "docstring": " is_nan returns true if either component is NaN (not a number).",
          "signature": "fn <a href=\"gmlewis/fonts/draw#Vec2\">Vec2</a>::is_nan(self : <a href=\"gmlewis/fonts/draw#Vec2\">Vec2</a>) -> Bool",
          "loc": { "line": 397, "column": 8 }
        },
        {
          "name": "is_valid",
          "docstring": " is_valid returns whether or not this Vec2 is valid.",
          "signature": "fn <a href=\"gmlewis/fonts/draw#Vec2\">Vec2</a>::is_valid(self : <a href=\"gmlewis/fonts/draw#Vec2\">Vec2</a>) -> Bool",
          "loc": { "line": 60, "column": 8 }
        },
        {
          "name": "is_zero",
          "docstring": " is_zero returns true if both components of this vector are 0.",
          "signature": "fn <a href=\"gmlewis/fonts/draw#Vec2\">Vec2</a>::is_zero(self : <a href=\"gmlewis/fonts/draw#Vec2\">Vec2</a>) -> Bool",
          "loc": { "line": 392, "column": 8 }
        },
        {
          "name": "length",
          "docstring": " length returns the length of this vector.",
          "signature": "fn <a href=\"gmlewis/fonts/draw#Vec2\">Vec2</a>::length(self : <a href=\"gmlewis/fonts/draw#Vec2\">Vec2</a>) -> Double",
          "loc": { "line": 370, "column": 8 }
        },
        {
          "name": "length_squared",
          "docstring": " length_squared returns the squared length of this vector.",
          "signature": "fn <a href=\"gmlewis/fonts/draw#Vec2\">Vec2</a>::length_squared(self : <a href=\"gmlewis/fonts/draw#Vec2\">Vec2</a>) -> Double",
          "loc": { "line": 375, "column": 8 }
        },
        {
          "name": "max",
          "docstring": " max compares the components of this vector and `v` and sets this vector's\n components to the maximum of the two.",
          "signature": "fn <a href=\"gmlewis/fonts/draw#Vec2\">Vec2</a>::max(self : <a href=\"gmlewis/fonts/draw#Vec2\">Vec2</a>, v : <a href=\"gmlewis/fonts/draw#Vec2\">Vec2</a>) -> <a href=\"gmlewis/fonts/draw#Vec2\">Vec2</a>",
          "loc": { "line": 276, "column": 8 }
        },
        {
          "name": "min",
          "docstring": " min compares the components of this vector and `v` and sets this vector's\n components to the minimum of the two.",
          "signature": "fn <a href=\"gmlewis/fonts/draw#Vec2\">Vec2</a>::min(self : <a href=\"gmlewis/fonts/draw#Vec2\">Vec2</a>, v : <a href=\"gmlewis/fonts/draw#Vec2\">Vec2</a>) -> <a href=\"gmlewis/fonts/draw#Vec2\">Vec2</a>",
          "loc": { "line": 268, "column": 8 }
        },
        {
          "name": "mix",
          "docstring": " mix linearly interpolates this vector to the vector `v` by the mixing\n factor `t` (0..1).",
          "signature": "fn <a href=\"gmlewis/fonts/draw#Vec2\">Vec2</a>::mix(self : <a href=\"gmlewis/fonts/draw#Vec2\">Vec2</a>, v : <a href=\"gmlewis/fonts/draw#Vec2\">Vec2</a>, t : Double) -> <a href=\"gmlewis/fonts/draw#Vec2\">Vec2</a>",
          "loc": { "line": 284, "column": 8 }
        },
        {
          "name": "mul",
          "docstring": " mul multiplies the vector `v` to this vector.",
          "signature": "fn <a href=\"gmlewis/fonts/draw#Vec2\">Vec2</a>::mul(self : <a href=\"gmlewis/fonts/draw#Vec2\">Vec2</a>, v : <a href=\"gmlewis/fonts/draw#Vec2\">Vec2</a>) -> <a href=\"gmlewis/fonts/draw#Vec2\">Vec2</a>",
          "loc": { "line": 145, "column": 8 }
        },
        {
          "name": "mul_scalar",
          "docstring": " mul_scalar multiplies scalar `s` to this vector.",
          "signature": "fn <a href=\"gmlewis/fonts/draw#Vec2\">Vec2</a>::mul_scalar(self : <a href=\"gmlewis/fonts/draw#Vec2\">Vec2</a>, s : Double) -> <a href=\"gmlewis/fonts/draw#Vec2\">Vec2</a>",
          "loc": { "line": 158, "column": 8 }
        },
        {
          "name": "neg_infinity",
          "docstring": " Vec::neg_infinity returns a new Vec2 with negative infinite x and y.",
          "signature": "fn <a href=\"gmlewis/fonts/draw#Vec2\">Vec2</a>::neg_infinity() -> <a href=\"gmlewis/fonts/draw#Vec2\">Vec2</a>",
          "loc": { "line": 18, "column": 14 }
        },
        {
          "name": "negate",
          "docstring": " negate multiplies both components (in-place) by -1.",
          "signature": "fn <a href=\"gmlewis/fonts/draw#Vec2\">Vec2</a>::negate(self : <a href=\"gmlewis/fonts/draw#Vec2\">Vec2</a>) -> <a href=\"gmlewis/fonts/draw#Vec2\">Vec2</a>",
          "loc": { "line": 185, "column": 8 }
        },
        {
          "name": "new",
          "docstring": " Vec2::new returns a new Vec2.",
          "signature": "fn <a href=\"gmlewis/fonts/draw#Vec2\">Vec2</a>::new(x~ : Double = .., y~ : Double = ..) -> <a href=\"gmlewis/fonts/draw#Vec2\">Vec2</a>",
          "loc": { "line": 8, "column": 14 }
        },
        {
          "name": "normalize",
          "docstring": " normalize scales this vector so that its length is 1.\n Note that this vector must already have a non-zero length.",
          "signature": "fn <a href=\"gmlewis/fonts/draw#Vec2\">Vec2</a>::normalize(self : <a href=\"gmlewis/fonts/draw#Vec2\">Vec2</a>) -> <a href=\"gmlewis/fonts/draw#Vec2\">Vec2</a>",
          "loc": { "line": 302, "column": 8 }
        },
        {
          "name": "op_add",
          "docstring": " op_add adds vector `other` to this vector without modifying either one\n and returns the result.",
          "signature": "fn <a href=\"gmlewis/fonts/draw#Vec2\">Vec2</a>::op_add(self : <a href=\"gmlewis/fonts/draw#Vec2\">Vec2</a>, other : <a href=\"gmlewis/fonts/draw#Vec2\">Vec2</a>) -> <a href=\"gmlewis/fonts/draw#Vec2\">Vec2</a>",
          "loc": { "line": 113, "column": 8 }
        },
        {
          "name": "op_div",
          "docstring": " op_div divides this vector by vector `other` without modifying either one\n and returns the result.",
          "signature": "fn <a href=\"gmlewis/fonts/draw#Vec2\">Vec2</a>::op_div(self : <a href=\"gmlewis/fonts/draw#Vec2\">Vec2</a>, other : <a href=\"gmlewis/fonts/draw#Vec2\">Vec2</a>) -> <a href=\"gmlewis/fonts/draw#Vec2\">Vec2</a>",
          "loc": { "line": 173, "column": 8 }
        },
        {
          "name": "op_mul",
          "docstring": " op_mul multiplies vector `other` to this vector without modifying either one\n and returns the result.",
          "signature": "fn <a href=\"gmlewis/fonts/draw#Vec2\">Vec2</a>::op_mul(self : <a href=\"gmlewis/fonts/draw#Vec2\">Vec2</a>, other : <a href=\"gmlewis/fonts/draw#Vec2\">Vec2</a>) -> <a href=\"gmlewis/fonts/draw#Vec2\">Vec2</a>",
          "loc": { "line": 153, "column": 8 }
        },
        {
          "name": "op_neg",
          "docstring": " op_neg returns a negated copy of Vec2.",
          "signature": "fn <a href=\"gmlewis/fonts/draw#Vec2\">Vec2</a>::op_neg(self : <a href=\"gmlewis/fonts/draw#Vec2\">Vec2</a>) -> <a href=\"gmlewis/fonts/draw#Vec2\">Vec2</a>",
          "loc": { "line": 192, "column": 8 }
        },
        {
          "name": "op_sub",
          "docstring": " op_sub subtracts vector `other` from this vector without modifying either one\n and returns the result.",
          "signature": "fn <a href=\"gmlewis/fonts/draw#Vec2\">Vec2</a>::op_sub(self : <a href=\"gmlewis/fonts/draw#Vec2\">Vec2</a>, other : <a href=\"gmlewis/fonts/draw#Vec2\">Vec2</a>) -> <a href=\"gmlewis/fonts/draw#Vec2\">Vec2</a>",
          "loc": { "line": 133, "column": 8 }
        },
        {
          "name": "project_onto",
          "docstring": " project_onto projects this vector onto a non-zero vector `v`.",
          "signature": "fn <a href=\"gmlewis/fonts/draw#Vec2\">Vec2</a>::project_onto(self : <a href=\"gmlewis/fonts/draw#Vec2\">Vec2</a>, v : <a href=\"gmlewis/fonts/draw#Vec2\">Vec2</a>) -> <a href=\"gmlewis/fonts/draw#Vec2\">Vec2</a>",
          "loc": { "line": 343, "column": 8 }
        },
        {
          "name": "rotate",
          "docstring": " rotate rotates this vector clockwise by `angle` in degrees.",
          "signature": "fn <a href=\"gmlewis/fonts/draw#Vec2\">Vec2</a>::rotate(self : <a href=\"gmlewis/fonts/draw#Vec2\">Vec2</a>, angle : Double) -> <a href=\"gmlewis/fonts/draw#Vec2\">Vec2</a>",
          "loc": { "line": 311, "column": 8 }
        },
        {
          "name": "rotate90",
          "docstring": " rotate90 rotates this vector clockwise by 90°.",
          "signature": "fn <a href=\"gmlewis/fonts/draw#Vec2\">Vec2</a>::rotate90(self : <a href=\"gmlewis/fonts/draw#Vec2\">Vec2</a>) -> <a href=\"gmlewis/fonts/draw#Vec2\">Vec2</a>",
          "loc": { "line": 327, "column": 8 }
        },
        {
          "name": "rotate_neg90",
          "docstring": " rotate_neg90 rotates this vector counter-clockwise by 90°.",
          "signature": "fn <a href=\"gmlewis/fonts/draw#Vec2\">Vec2</a>::rotate_neg90(self : <a href=\"gmlewis/fonts/draw#Vec2\">Vec2</a>) -> <a href=\"gmlewis/fonts/draw#Vec2\">Vec2</a>",
          "loc": { "line": 335, "column": 8 }
        },
        {
          "name": "rotate_radians",
          "docstring": " rotate_radians rotates this vector clockwise by `rad` in radians.",
          "signature": "fn <a href=\"gmlewis/fonts/draw#Vec2\">Vec2</a>::rotate_radians(self : <a href=\"gmlewis/fonts/draw#Vec2\">Vec2</a>, rad : Double) -> <a href=\"gmlewis/fonts/draw#Vec2\">Vec2</a>",
          "loc": { "line": 317, "column": 8 }
        },
        {
          "name": "round",
          "docstring": " round rounds the components of this vector to the next-higher integer.",
          "signature": "fn <a href=\"gmlewis/fonts/draw#Vec2\">Vec2</a>::round(self : <a href=\"gmlewis/fonts/draw#Vec2\">Vec2</a>) -> <a href=\"gmlewis/fonts/draw#Vec2\">Vec2</a>",
          "loc": { "line": 235, "column": 8 }
        },
        {
          "name": "round_to_fixed",
          "docstring": " round_to_fixed rounds the components of this vector to the provided\n number of digits.",
          "signature": "fn <a href=\"gmlewis/fonts/draw#Vec2\">Vec2</a>::round_to_fixed(self : <a href=\"gmlewis/fonts/draw#Vec2\">Vec2</a>, digits : Int) -> <a href=\"gmlewis/fonts/draw#Vec2\">Vec2</a>",
          "loc": { "line": 241, "column": 8 }
        },
        {
          "name": "round_to_multiple",
          "docstring": " round_to_multiple rounds the components of this vector to the closes\n multiple of `v`.",
          "signature": "fn <a href=\"gmlewis/fonts/draw#Vec2\">Vec2</a>::round_to_multiple(self : <a href=\"gmlewis/fonts/draw#Vec2\">Vec2</a>, v : Double) -> <a href=\"gmlewis/fonts/draw#Vec2\">Vec2</a>",
          "loc": { "line": 256, "column": 8 }
        },
        {
          "name": "set",
          "docstring": " set sets the x and y components of this Vec2.",
          "signature": "fn <a href=\"gmlewis/fonts/draw#Vec2\">Vec2</a>::set(self : <a href=\"gmlewis/fonts/draw#Vec2\">Vec2</a>, x : Double, y : Double) -> <a href=\"gmlewis/fonts/draw#Vec2\">Vec2</a>",
          "loc": { "line": 46, "column": 8 }
        },
        {
          "name": "sub",
          "docstring": " sub subtracts the vector `v` from this vector.",
          "signature": "fn <a href=\"gmlewis/fonts/draw#Vec2\">Vec2</a>::sub(self : <a href=\"gmlewis/fonts/draw#Vec2\">Vec2</a>, v : <a href=\"gmlewis/fonts/draw#Vec2\">Vec2</a>) -> <a href=\"gmlewis/fonts/draw#Vec2\">Vec2</a>",
          "loc": { "line": 125, "column": 8 }
        },
        {
          "name": "sub_scalar",
          "docstring": " sub_scalar subtracts scalar `s` from this vector.",
          "signature": "fn <a href=\"gmlewis/fonts/draw#Vec2\">Vec2</a>::sub_scalar(self : <a href=\"gmlewis/fonts/draw#Vec2\">Vec2</a>, s : Double) -> <a href=\"gmlewis/fonts/draw#Vec2\">Vec2</a>",
          "loc": { "line": 138, "column": 8 }
        },
        {
          "name": "transform",
          "docstring": " transform provides a convenient API for a common task.",
          "signature": "fn <a href=\"gmlewis/fonts/draw#Vec2\">Vec2</a>::transform(self : <a href=\"gmlewis/fonts/draw#Vec2\">Vec2</a>, position~ : <a href=\"gmlewis/fonts/draw#Vec2\">Vec2</a> = .., rotation~ : Double = .., scale~ : <a href=\"gmlewis/fonts/draw#Vec2\">Vec2</a> = .., skew~ : Double = .., origin~ : <a href=\"gmlewis/fonts/draw#Vec2\">Vec2</a> = ..) -> <a href=\"gmlewis/fonts/draw#Vec2\">Vec2</a>",
          "loc": { "line": 90, "column": 8 }
        }
      ],
      "impls": [
        {
          "docstring": "",
          "signature": "impl <a href=\"moonbitlang/core/builtin#Eq\">Eq</a> for <a href=\"gmlewis/fonts/draw#Vec2\">Vec2</a>",
          "methods": [
            {
              "name": "op_equal",
              "docstring": "automatically derived",
              "signature": "fn op_equal(<a href=\"gmlewis/fonts/draw#Vec2\">Vec2</a>, <a href=\"gmlewis/fonts/draw#Vec2\">Vec2</a>) -> Bool",
              "loc": { "line": 5, "column": 16 }
            }
          ],
          "loc": { "line": 5, "column": 16 }
        },
        {
          "docstring": "",
          "signature": "impl <a href=\"moonbitlang/core/builtin#Show\">Show</a> for <a href=\"gmlewis/fonts/draw#Vec2\">Vec2</a>",
          "methods": [
            {
              "name": "output",
              "docstring": "automatically derived",
              "signature": "fn output(<a href=\"gmlewis/fonts/draw#Vec2\">Vec2</a>, <a href=\"moonbitlang/core/builtin#Logger\">Logger</a>) -> Unit",
              "loc": { "line": 5, "column": 10 }
            }
          ],
          "loc": { "line": 5, "column": 10 }
        },
        {
          "docstring": "",
          "signature": "impl <a href=\"moonbitlang/core/builtin#ToJson\">ToJson</a> for <a href=\"gmlewis/fonts/draw#Vec2\">Vec2</a>",
          "methods": [
            {
              "name": "to_json",
              "docstring": "automatically derived",
              "signature": "fn to_json(<a href=\"gmlewis/fonts/draw#Vec2\">Vec2</a>) -> <a href=\"moonbitlang/core/json#Json\">Json</a>",
              "loc": { "line": 5, "column": 30 }
            }
          ],
          "loc": { "line": 5, "column": 30 }
        },
        {
          "docstring": "",
          "signature": "impl <a href=\"moonbitlang/core/json#FromJson\">@moonbitlang/core/json.FromJson</a> for <a href=\"gmlewis/fonts/draw#Vec2\">Vec2</a>",
          "methods": [
            {
              "name": "from_json",
              "docstring": "automatically derived",
              "signature": "fn from_json(<a href=\"moonbitlang/core/json#Json\">Json</a>, <a href=\"moonbitlang/core/json#JsonPath\">@moonbitlang/core/json.JsonPath</a>) -> <a href=\"gmlewis/fonts/draw#Vec2\">Vec2</a>!<a href=\"moonbitlang/core/json#JsonDecodeError\">@moonbitlang/core/json.JsonDecodeError</a>",
              "loc": { "line": 5, "column": 20 }
            }
          ],
          "loc": { "line": 5, "column": 20 }
        }
      ]
    }
  ],
  "typealias": [],
  "values": [
    {
      "name": "bbox",
      "docstring": " bbox is a convenience function.",
      "signature": "fn bbox(minx : Double, miny : Double, maxx : Double, maxy : Double) -> <a href=\"gmlewis/fonts/draw#BoundingBox\">BoundingBox</a>",
      "loc": { "line": 16, "column": 8 }
    },
    {
      "name": "fill",
      "docstring": " fill is a helper function.",
      "signature": "fn fill(color : <a href=\"gmlewis/fonts/draw#Color\">Color</a>) -> <a href=\"gmlewis/fonts/draw#Fill\">Fill</a>",
      "loc": { "line": 12, "column": 8 }
    },
    {
      "name": "group",
      "docstring": " group is a convenience function.",
      "signature": "fn group(items : <a href=\"moonbitlang/core/array#Array\">Array</a>[<a href=\"gmlewis/fonts/draw#Graphic\">Graphic</a>]) -> <a href=\"gmlewis/fonts/draw#Group\">Group</a>",
      "loc": { "line": 27, "column": 8 }
    },
    {
      "name": "rgba",
      "docstring": " rgba is a convenience function.",
      "signature": "fn rgba(r : Double, g : Double, b : Double, a : Double) -> <a href=\"gmlewis/fonts/draw#Color\">Color</a>",
      "loc": { "line": 20, "column": 8 }
    },
    {
      "name": "stroke",
      "docstring": " stroke is a helper function.",
      "signature": "fn stroke(color : <a href=\"gmlewis/fonts/draw#Color\">Color</a>) -> <a href=\"gmlewis/fonts/draw#Stroke\">Stroke</a>",
      "loc": { "line": 45, "column": 8 }
    },
    {
      "name": "text",
      "docstring": " text generates a new Graphic (a Group of Group of compound_paths) from a text\n string and a font.",
      "signature": "fn text(text~ : String, font~ : <a href=\"gmlewis/fonts#Font\">@gmlewis/fonts.Font</a>, align~ : <a href=\"gmlewis/fonts/draw#TextAlign\">TextAlign</a> = .., size~ : Double = ..) -> <a href=\"gmlewis/fonts/draw#Graphic\">Graphic</a>!<a href=\"gmlewis/fonts/draw#DrawError\">DrawError</a>",
      "loc": { "line": 13, "column": 8 }
    },
    {
      "name": "unit_circle",
      "docstring": " unit_circle constructs a new Group representing a unit circle centered at the origin.",
      "signature": "fn unit_circle() -> <a href=\"gmlewis/fonts/draw#Group\">Group</a>",
      "loc": { "line": 2, "column": 8 }
    },
    {
      "name": "unit_square",
      "docstring": " unit_square constructs a new Group representing a unit square centered at the origin.",
      "signature": "fn unit_square() -> <a href=\"gmlewis/fonts/draw#Group\">Group</a>",
      "loc": { "line": 2, "column": 8 }
    },
    {
      "name": "vec2",
      "docstring": " vec2 returns a new Vec2.",
      "signature": "fn vec2(x : Double, y : Double) -> <a href=\"gmlewis/fonts/draw#Vec2\">Vec2</a>",
      "loc": { "line": 23, "column": 8 }
    }
  ],
  "misc": []
}