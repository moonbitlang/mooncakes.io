{
  "readme": "",
  "name": "moonbitlang/core/string",
  "traits": [],
  "types": [],
  "typealias": [],
  "values": [],
  "misc": [
    {
      "name": "String",
      "impls": [],
      "methods": [
        {
          "name": "compare",
          "docstring": "\n Compare two strings.\n String with longer length is bigger.\n strings of the same length are compared in lexicalgraphic order.",
          "signature": "fn <a href=\"moonbitlang/core/string#String\">String</a>::compare(self : String, other : String) -> Int",
          "loc": { "line": 79, "column": 8 }
        },
        {
          "name": "concat",
          "docstring": "\n Concatenate strings.\n \n ```\n let s = @string.concat([\"Hello\", \", \", \"world!\"])\n assert_eq!(s, \"Hello, world!\")\n let s = @string.concat([\"a\", \"b\", \"c\"], separator=\",\")\n assert_eq!(s, \"a,b,c\")\n ```",
          "signature": "fn <a href=\"moonbitlang/core/string#String\">String</a>::concat(strings : <a href=\"moonbitlang/core/array#Array\">Array</a>[String], separator~ : String = ..) -> String",
          "loc": { "line": 51, "column": 16 }
        },
        {
          "name": "contains",
          "docstring": "\n Returns true if this string contains given sub string.",
          "signature": "fn <a href=\"moonbitlang/core/string#String\">String</a>::contains(self : String, str : String) -> Bool",
          "loc": { "line": 426, "column": 8 }
        },
        {
          "name": "contains_char",
          "docstring": "",
          "signature": "fn <a href=\"moonbitlang/core/string#String\">String</a>::contains_char(self : String, c : Char) -> Bool",
          "loc": { "line": 259, "column": 8 }
        },
        {
          "name": "default",
          "docstring": "\n The empty string",
          "signature": "fn <a href=\"moonbitlang/core/string#String\">String</a>::default() -> String",
          "loc": { "line": 97, "column": 16 }
        },
        {
          "name": "ends_with",
          "docstring": "\n Returns true if this string ends with a sub string.",
          "signature": "fn <a href=\"moonbitlang/core/string#String\">String</a>::ends_with(self : String, str : String) -> Bool",
          "loc": { "line": 442, "column": 8 }
        },
        {
          "name": "fold",
          "docstring": "\n Note: This method operates on Unicode characters, not Utf16 code units.\n As a result, the count of characters passed to the folding function may not be equal to the length of the string.",
          "signature": "fn <a href=\"moonbitlang/core/string#String\">String</a>::fold[A](self : String, init~ : A, f : (A, Char) -> A) -> A",
          "loc": { "line": 177, "column": 8 }
        },
        {
          "name": "from_array",
          "docstring": "\n Convert char array to string.\n \n ```\n let s = @string.from_array(['H', 'e', 'l', 'l', 'o'])\n assert_eq!(s, \"Hello\")\n ```\n \n Do not convert large datas to `Array[Char]` and build a string with `String::from_array`.\n \n For efficiency considerations, it's recommended to use `Buffer` instead.",
          "signature": "fn <a href=\"moonbitlang/core/string#String\">String</a>::from_array(chars : <a href=\"moonbitlang/core/array#Array\">Array</a>[Char]) -> String",
          "loc": { "line": 26, "column": 16 }
        },
        {
          "name": "from_iter",
          "docstring": "\n Convert char iterator to string,\n a simple wrapper for `from_array`.",
          "signature": "fn <a href=\"moonbitlang/core/string#String\">String</a>::from_iter(iter : <a href=\"moonbitlang/core/builtin#Iter\">Iter</a>[Char]) -> String",
          "loc": { "line": 37, "column": 16 }
        },
        {
          "name": "index_of",
          "docstring": "\n Returns the first index of the sub string.",
          "signature": "fn <a href=\"moonbitlang/core/string#String\">String</a>::index_of(self : String, str : String, from~ : Int = ..) -> Int",
          "loc": { "line": 329, "column": 8 }
        },
        {
          "name": "is_blank",
          "docstring": "\n Returns true if this string is blank.",
          "signature": "fn <a href=\"moonbitlang/core/string#String\">String</a>::is_blank(self : String) -> Bool",
          "loc": { "line": 323, "column": 8 }
        },
        {
          "name": "is_empty",
          "docstring": "\n Returns true if this string is empty.",
          "signature": "fn <a href=\"moonbitlang/core/string#String\">String</a>::is_empty(self : String) -> Bool",
          "loc": { "line": 317, "column": 8 }
        },
        {
          "name": "iter",
          "docstring": "\n Returns an iterator over the Unicode characters in the string.\n\n Note: This iterator yields Unicode characters, not Utf16 code units.\n As a result, the count of characters returned by `iter().count()` may not be equal to the length of the string returned by `length()`.\n\n ```\n let s = \"Hello, World!ðŸ¤£\";\n assert_eq!(s.iter().count(), 14); // Unicode characters\n assert_eq!(s.length(), 15); // Utf16 code units\n ```",
          "signature": "fn <a href=\"moonbitlang/core/string#String\">String</a>::iter(self : String) -> <a href=\"moonbitlang/core/builtin#Iter\">Iter</a>[Char]",
          "loc": { "line": 129, "column": 8 }
        },
        {
          "name": "iter2",
          "docstring": "",
          "signature": "fn <a href=\"moonbitlang/core/string#String\">String</a>::iter2(self : String) -> <a href=\"moonbitlang/core/builtin#Iter2\">Iter2</a>[Int, Char]",
          "loc": { "line": 152, "column": 8 }
        },
        {
          "name": "last_index_of",
          "docstring": "\n Returns the last index of the sub string.",
          "signature": "fn <a href=\"moonbitlang/core/string#String\">String</a>::last_index_of(self : String, str : String, from~ : Int = ..) -> Int",
          "loc": { "line": 373, "column": 8 }
        },
        {
          "name": "pad_end",
          "docstring": "\n `pad_end` is a new String with `padding_char`s suffixed to `self` if `self.length() < total_width`. The length of the\n returned string is `total_width`.\n \n Example:\n \n ```\n assert_eq!(\"2\".pad_end(3, 'x'), \"2xx\")\n ```",
          "signature": "fn <a href=\"moonbitlang/core/string#String\">String</a>::pad_end(self : String, total_width : Int, padding_char : Char) -> String",
          "loc": { "line": 642, "column": 8 }
        },
        {
          "name": "pad_start",
          "docstring": "\n `pad_start` is a new string with `padding_char`s prefixed to `self` if `self.length() < total_width`. The length of the\n returned string is `total_width`.\n \n Example:\n \n ```\n assert_eq!(\"2\".pad_start(3, '0'), \"002\")\n ```",
          "signature": "fn <a href=\"moonbitlang/core/string#String\">String</a>::pad_start(self : String, total_width : Int, padding_char : Char) -> String",
          "loc": { "line": 615, "column": 8 }
        },
        {
          "name": "repeat",
          "docstring": "\n Repeats the string `n` times.",
          "signature": "fn <a href=\"moonbitlang/core/string#String\">String</a>::repeat(self : String, n : Int) -> String",
          "loc": { "line": 591, "column": 8 }
        },
        {
          "name": "replace",
          "docstring": "\n Replace the first old string in this string to new string.",
          "signature": "fn <a href=\"moonbitlang/core/string#String\">String</a>::replace(self : String, old~ : String, new~ : String) -> String",
          "loc": { "line": 506, "column": 8 }
        },
        {
          "name": "replace_all",
          "docstring": "\n Replace all old string in this string to new string.",
          "signature": "fn <a href=\"moonbitlang/core/string#String\">String</a>::replace_all(self : String, old~ : String, new~ : String) -> String",
          "loc": { "line": 519, "column": 8 }
        },
        {
          "name": "rev",
          "docstring": "\n Reverse string",
          "signature": "fn <a href=\"moonbitlang/core/string#String\">String</a>::rev(self : String) -> String",
          "loc": { "line": 579, "column": 8 }
        },
        {
          "name": "rev_fold",
          "docstring": "",
          "signature": "fn <a href=\"moonbitlang/core/string#String\">String</a>::rev_fold[A](self : String, init~ : A, f : (A, Char) -> A) -> A",
          "loc": { "line": 186, "column": 8 }
        },
        {
          "name": "rev_iter",
          "docstring": "\n Returns an iterator that yields characters from the end to the start of the string. This function handles \n Unicode surrogate pairs correctly, ensuring that characters are not split across surrogate pairs.\n \n # Parameters\n \n - `self` : The input `String` to be iterated in reverse.\n \n # Returns\n \n - An `Iter[Char]` that yields characters from the end to the start of the string.\n \n # Behavior\n \n - The function iterates over the string in reverse order.\n - If a trailing surrogate is encountered, it checks for a preceding leading surrogate to form a complete Unicode code point.\n - Yields each character or combined code point to the iterator.\n - Stops iteration if the `yield_` function returns `IterEnd`.\n \n # Examples\n \n ```\n let input = \"Hello, World!\"\n let reversed = input.rev_iter().collect()\n assert_eq!(reversed, ['!', 'd', 'l', 'r', 'o', 'W', ' ', ',', 'o', 'l', 'l', 'e', 'H'])\n ```",
          "signature": "fn <a href=\"moonbitlang/core/string#String\">String</a>::rev_iter(self : String) -> <a href=\"moonbitlang/core/builtin#Iter\">Iter</a>[Char]",
          "loc": { "line": 220, "column": 8 }
        },
        {
          "name": "split",
          "docstring": "\n Splits the input `String` into an `Iter` of `String` using the specified `separator`.\n \n # Parameters\n \n - `self` : The input `String` to be split.\n - `separator` : The `String` used as the delimiter for splitting.\n \n # Returns\n \n - An `Iter` of `String` where each element is a substring of the original string, separated by the `separator`.\n \n # Behavior\n \n - If the `separator` is an empty string (`\"\"`), the function returns an `Iter` where each element is a single character from the input string converted to a `String`.\n - If the `separator` is not empty, the function searches for occurrences of the `separator` in the input string and yields substrings between these occurrences.\n - If no more occurrences of the `separator` are found, the remaining part of the string is yielded as the last element of the `Iter`.\n \n # Examples\n \n ```\n let input = \"a,b,c,d\"\n let separator = \",\"\n let result = input.split(separator).collect()\n assert_eq!(result, [\"a\", \"b\", \"c\", \"d\"])\n ```",
          "signature": "fn <a href=\"moonbitlang/core/string#String\">String</a>::split(self : String, seperator : String) -> <a href=\"moonbitlang/core/builtin#Iter\">Iter</a>[String]",
          "loc": { "line": 478, "column": 8 }
        },
        {
          "name": "starts_with",
          "docstring": "\n Returns true if this string starts with a sub string.",
          "signature": "fn <a href=\"moonbitlang/core/string#String\">String</a>::starts_with(self : String, str : String) -> Bool",
          "loc": { "line": 432, "column": 8 }
        },
        {
          "name": "to_array",
          "docstring": "\n Converts the String into an array of Chars.",
          "signature": "fn <a href=\"moonbitlang/core/string#String\">String</a>::to_array(self : String) -> <a href=\"moonbitlang/core/array#Array\">Array</a>[Char]",
          "loc": { "line": 109, "column": 8 }
        },
        {
          "name": "to_bytes",
          "docstring": "\n `String` holds a sequence of UTF-16 code units encoded in little endian format",
          "signature": "fn <a href=\"moonbitlang/core/string#String\">String</a>::to_bytes(self : String) -> Bytes",
          "loc": { "line": 103, "column": 8 }
        },
        {
          "name": "to_lower",
          "docstring": "\n Converts this string to lowercase.",
          "signature": "fn <a href=\"moonbitlang/core/string#String\">String</a>::to_lower(self : String) -> String",
          "loc": { "line": 549, "column": 8 }
        },
        {
          "name": "to_upper",
          "docstring": "\n Converts this string to uppercase.",
          "signature": "fn <a href=\"moonbitlang/core/string#String\">String</a>::to_upper(self : String) -> String",
          "loc": { "line": 564, "column": 8 }
        },
        {
          "name": "trim",
          "docstring": "\n Removes all leading and trailing chars contained in the given string.",
          "signature": "fn <a href=\"moonbitlang/core/string#String\">String</a>::trim(self : String, trim_set : String) -> String",
          "loc": { "line": 250, "column": 8 }
        },
        {
          "name": "trim_end",
          "docstring": "\n Removes all trailing chars contained in the given string.",
          "signature": "fn <a href=\"moonbitlang/core/string#String\">String</a>::trim_end(self : String, trim_set : String) -> String",
          "loc": { "line": 291, "column": 8 }
        },
        {
          "name": "trim_left",
          "docstring": "\n @alert deprecated \"Use `String::trim_start` instead\"",
          "signature": "fn <a href=\"moonbitlang/core/string#String\">String</a>::trim_left(self : String, trim_set : String) -> String",
          "loc": { "line": 17, "column": 8 }
        },
        {
          "name": "trim_right",
          "docstring": "\n @alert deprecated \"Use `String::trim_end` instead\"",
          "signature": "fn <a href=\"moonbitlang/core/string#String\">String</a>::trim_right(self : String, trim_set : String) -> String",
          "loc": { "line": 23, "column": 8 }
        },
        {
          "name": "trim_space",
          "docstring": "\n Removes all leading and trailing spaces.",
          "signature": "fn <a href=\"moonbitlang/core/string#String\">String</a>::trim_space(self : String) -> String",
          "loc": { "line": 244, "column": 8 }
        },
        {
          "name": "trim_start",
          "docstring": "\n Removes all leading chars contained in the given string.",
          "signature": "fn <a href=\"moonbitlang/core/string#String\">String</a>::trim_start(self : String, trim_set : String) -> String",
          "loc": { "line": 265, "column": 8 }
        }
      ]
    }
  ]
}