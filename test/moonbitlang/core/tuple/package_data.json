{
  "readme": "# Tuple\n\nTuple is a fixed-size collection of elements of different types. It is a lightweight data structure that can be used to store multiple values in a single variable. This sub-package introduces utils for binary tuples.\n\n# Usage\n\n## Create\n\nCreate a new tuple by `pair` or using the tuple literal syntax.\n\n```moonbit\nlet tuple = @tuple.pair(1, 2)\nlet tuple2 = (1, 2)\n```\n\n## Access\n\nYou can access the elements of the tuple using the `fst` and `snd` methods (Shortly use dot access).\n\n```moonbit\nlet tuple = (1, 2)\n@tuple.fst(tuple) // 1\n@tuple.snd(tuple) // 2\ntuple.0 // 1\ntuple.1 // 2\n```\n\n## Transformation\n\nYou can transform the tuple using the `map_fst` and `map_snd` method, which will apply the function to the first and second element of the tuple respectively.\n\n```moonbit\nlet tuple = (1, 2)\nlet tuple2 = @tuple.map_fst(tuple, fn(x) { x + 1 }) // tuple2 = (2, 2)\nlet tuple3 = @tuple.map_snd(tuple, fn(x) { x + 1 }) // tuple3 = (1, 3)\n```\n\nOr you can use the `map_both` method to apply the function to both elements of the tuple.\n\n```moonbit\nlet tuple = (1, 2)\nlet mapped = @tuple.map_both(\n    fn(x : Int) -> Int { x + 1 },\n    fn(x : Int) -> Int { x - 1 },\n    tuple\n) // mapped = (2, 1)\n```\n\n## Conversion\nSwap the elements of the tuple using the `swap` method.\n\n```moonbit\nlet tuple = (1, 2)\nlet swapped = @tuple.swap(tuple) // swapped = (2, 1)\n```\n\n## Currying\nMoonbit provides a currying method for the tuple. You can use the `curry` method to convert a function into a curried function.\n\n```moonbit\nlet add = fn(a, b) { a + b }\nlet curried_add = @tuple.curry(add)\nlet result = curried_add(1)(2) // result = 3\n```\n\nThe dual of the `curry` method is the `uncurry` method, which converts a curried function back to a normal function.\n\n```moonbit\nlet add = fn(a) { fn(b) { a + b } }\nlet uncurried_add = @tuple.uncurry(add)\nlet result = uncurried_add(1, 2) // result = 3\n```\n\n",
  "name": "moonbitlang/core/tuple",
  "traits": [],
  "types": [],
  "typealias": [],
  "values": [
    {
      "name": "curry",
      "docstring": "\n Curry a function.\n \n # Example\n ```\n let add = fn(x : Int, y : Int) -> Int { x + y }\n let curried_add = @tuple.curry(add)\n assert_eq!(curried_add(1)(2), 3)\n ```",
      "signature": "fn curry[T, U, V](f : (T, U) -> V) -> ((T) -> ((U) -> V))",
      "loc": { "line": 118, "column": 8 }
    },
    {
      "name": "fst",
      "docstring": "\n Get the first element of a tuple.\n \n # Example\n ```\n let tuple = (1, 2)\n let x = @tuple.fst(tuple)\n assert_eq!(x, 1)\n ```",
      "signature": "fn fst[T, U](tuple : (T, U)) -> T",
      "loc": { "line": 36, "column": 8 }
    },
    {
      "name": "map_both",
      "docstring": "\n Map a function over both elements of a tuple.\n \n # Example\n ```\n let tuple = (1, 2)\n let mapped = @tuple.map_both(fn(x : Int) -> Int { x + 1 }, fn(x : Int) -> Int { x - 1 }, tuple)\n assert_eq!(mapped, (2, 1))\n ```",
      "signature": "fn map_both[T, U, V, W](f : (T) -> U, g : (V) -> W, tuple : (T, V)) -> (U, W)",
      "loc": { "line": 88, "column": 8 }
    },
    {
      "name": "map_fst",
      "docstring": "\n Map a function over the first element of a tuple.\n \n # Example\n ```\n let tuple = (1, 2)\n let mapped = @tuple.map_fst(fn(x : Int) -> Int { x + 1 }, tuple)\n assert_eq!(mapped, (2, 2))\n ```",
      "signature": "fn map_fst[T, U, V](f : (T) -> U, tuple : (T, V)) -> (U, V)",
      "loc": { "line": 62, "column": 8 }
    },
    {
      "name": "map_snd",
      "docstring": "\n Map a function over the second element of a tuple.\n \n # Example\n ```\n let tuple = (1, 2)\n let mapped = @tuple.map_snd(fn(x : Int) -> Int { x + 1 }, tuple)\n assert_eq!(mapped, (1, 3))\n ```",
      "signature": "fn map_snd[T, U, V](f : (T) -> U, tuple : (V, T)) -> (V, U)",
      "loc": { "line": 75, "column": 8 }
    },
    {
      "name": "pair",
      "docstring": "\n Create a tuple with two elements.\n \n # Example\n ```\n let tuple = @tuple.pair(1, 2)\n assert_eq!(tuple, (1, 2))\n ```",
      "signature": "fn pair[T, U](x : T, y : U) -> (T, U)",
      "loc": { "line": 23, "column": 8 }
    },
    {
      "name": "snd",
      "docstring": "\n Get the second element of a tuple.\n \n # Example\n ```\n let tuple = (1, 2)\n let y = @tuple.snd(tuple)\n assert_eq!(y, 2)\n ```",
      "signature": "fn snd[T, U](tuple : (T, U)) -> U",
      "loc": { "line": 49, "column": 8 }
    },
    {
      "name": "swap",
      "docstring": "\n Swap the elements of a tuple.\n \n # Example\n ```\n let tuple = (1, 2)\n let swapped = @tuple.swap(tuple)\n assert_eq!(swapped, (2, 1))\n ```",
      "signature": "fn swap[T, U](tuple : (T, U)) -> (U, T)",
      "loc": { "line": 105, "column": 8 }
    },
    {
      "name": "uncurry",
      "docstring": "\n Uncurry a function.\n \n # Example\n ```\n let add = fn(x : Int) -> (Int) -> Int { fn(y : Int) -> Int { x + y } }\n let uncurried_add = @tuple.uncurry(add)\n assert_eq!(uncurried_add(1, 2), 3)\n ```",
      "signature": "fn uncurry[T, U, V](f : (T) -> ((U) -> V)) -> ((T, U) -> V)",
      "loc": { "line": 131, "column": 8 }
    }
  ],
  "misc": [
    {
      "name": "Tuple2",
      "impls": [
        {
          "name": "arbitrary",
          "docstring": "",
          "signature": "impl <a href=\"moonbitlang/core/quickcheck#Arbitrary\">@moonbitlang/core/quickcheck.Arbitrary</a> for <a href=\"moonbitlang/core/tuple#Tuple2\">Tuple2</a> with arbitrary[A : <a href=\"moonbitlang/core/quickcheck#Arbitrary\">@moonbitlang/core/quickcheck.Arbitrary</a>, B : <a href=\"moonbitlang/core/quickcheck#Arbitrary\">@moonbitlang/core/quickcheck.Arbitrary</a>](size : Int, r0 : <a href=\"moonbitlang/core/quickcheck/splitmix#RandomState\">@moonbitlang/core/quickcheck/splitmix.RandomState</a>) -> (A, B)",
          "loc": { "line": 19, "column": 8 }
        }
      ],
      "methods": [
        {
          "name": "arbitrary",
          "docstring": "",
          "signature": "fn <a href=\"moonbitlang/core/tuple#Tuple2\">Tuple2</a>::arbitrary[A : <a href=\"moonbitlang/core/quickcheck#Arbitrary\">@moonbitlang/core/quickcheck.Arbitrary</a>, B : <a href=\"moonbitlang/core/quickcheck#Arbitrary\">@moonbitlang/core/quickcheck.Arbitrary</a>](size : Int, r0 : <a href=\"moonbitlang/core/quickcheck/splitmix#RandomState\">@moonbitlang/core/quickcheck/splitmix.RandomState</a>) -> (A, B)",
          "loc": { "line": 19, "column": 8 }
        }
      ]
    },
    {
      "name": "Tuple3",
      "impls": [
        {
          "name": "arbitrary",
          "docstring": "",
          "signature": "impl <a href=\"moonbitlang/core/quickcheck#Arbitrary\">@moonbitlang/core/quickcheck.Arbitrary</a> for <a href=\"moonbitlang/core/tuple#Tuple3\">Tuple3</a> with arbitrary[A : <a href=\"moonbitlang/core/quickcheck#Arbitrary\">@moonbitlang/core/quickcheck.Arbitrary</a>, B : <a href=\"moonbitlang/core/quickcheck#Arbitrary\">@moonbitlang/core/quickcheck.Arbitrary</a>, C : <a href=\"moonbitlang/core/quickcheck#Arbitrary\">@moonbitlang/core/quickcheck.Arbitrary</a>](size : Int, r0 : <a href=\"moonbitlang/core/quickcheck/splitmix#RandomState\">@moonbitlang/core/quickcheck/splitmix.RandomState</a>) -> (A, B, C)",
          "loc": { "line": 32, "column": 8 }
        }
      ],
      "methods": [
        {
          "name": "arbitrary",
          "docstring": "",
          "signature": "fn <a href=\"moonbitlang/core/tuple#Tuple3\">Tuple3</a>::arbitrary[A : <a href=\"moonbitlang/core/quickcheck#Arbitrary\">@moonbitlang/core/quickcheck.Arbitrary</a>, B : <a href=\"moonbitlang/core/quickcheck#Arbitrary\">@moonbitlang/core/quickcheck.Arbitrary</a>, C : <a href=\"moonbitlang/core/quickcheck#Arbitrary\">@moonbitlang/core/quickcheck.Arbitrary</a>](size : Int, r0 : <a href=\"moonbitlang/core/quickcheck/splitmix#RandomState\">@moonbitlang/core/quickcheck/splitmix.RandomState</a>) -> (A, B, C)",
          "loc": { "line": 32, "column": 8 }
        }
      ]
    },
    {
      "name": "Tuple4",
      "impls": [
        {
          "name": "arbitrary",
          "docstring": "",
          "signature": "impl <a href=\"moonbitlang/core/quickcheck#Arbitrary\">@moonbitlang/core/quickcheck.Arbitrary</a> for <a href=\"moonbitlang/core/tuple#Tuple4\">Tuple4</a> with arbitrary[A : <a href=\"moonbitlang/core/quickcheck#Arbitrary\">@moonbitlang/core/quickcheck.Arbitrary</a>, B : <a href=\"moonbitlang/core/quickcheck#Arbitrary\">@moonbitlang/core/quickcheck.Arbitrary</a>, C : <a href=\"moonbitlang/core/quickcheck#Arbitrary\">@moonbitlang/core/quickcheck.Arbitrary</a>, D : <a href=\"moonbitlang/core/quickcheck#Arbitrary\">@moonbitlang/core/quickcheck.Arbitrary</a>](size : Int, r0 : <a href=\"moonbitlang/core/quickcheck/splitmix#RandomState\">@moonbitlang/core/quickcheck/splitmix.RandomState</a>) -> (A, B, C, D)",
          "loc": { "line": 44, "column": 8 }
        }
      ],
      "methods": [
        {
          "name": "arbitrary",
          "docstring": "",
          "signature": "fn <a href=\"moonbitlang/core/tuple#Tuple4\">Tuple4</a>::arbitrary[A : <a href=\"moonbitlang/core/quickcheck#Arbitrary\">@moonbitlang/core/quickcheck.Arbitrary</a>, B : <a href=\"moonbitlang/core/quickcheck#Arbitrary\">@moonbitlang/core/quickcheck.Arbitrary</a>, C : <a href=\"moonbitlang/core/quickcheck#Arbitrary\">@moonbitlang/core/quickcheck.Arbitrary</a>, D : <a href=\"moonbitlang/core/quickcheck#Arbitrary\">@moonbitlang/core/quickcheck.Arbitrary</a>](size : Int, r0 : <a href=\"moonbitlang/core/quickcheck/splitmix#RandomState\">@moonbitlang/core/quickcheck/splitmix.RandomState</a>) -> (A, B, C, D)",
          "loc": { "line": 44, "column": 8 }
        }
      ]
    },
    {
      "name": "Tuple5",
      "impls": [
        {
          "name": "arbitrary",
          "docstring": "",
          "signature": "impl <a href=\"moonbitlang/core/quickcheck#Arbitrary\">@moonbitlang/core/quickcheck.Arbitrary</a> for <a href=\"moonbitlang/core/tuple#Tuple5\">Tuple5</a> with arbitrary[A : <a href=\"moonbitlang/core/quickcheck#Arbitrary\">@moonbitlang/core/quickcheck.Arbitrary</a>, B : <a href=\"moonbitlang/core/quickcheck#Arbitrary\">@moonbitlang/core/quickcheck.Arbitrary</a>, C : <a href=\"moonbitlang/core/quickcheck#Arbitrary\">@moonbitlang/core/quickcheck.Arbitrary</a>, D : <a href=\"moonbitlang/core/quickcheck#Arbitrary\">@moonbitlang/core/quickcheck.Arbitrary</a>, E : <a href=\"moonbitlang/core/quickcheck#Arbitrary\">@moonbitlang/core/quickcheck.Arbitrary</a>](size : Int, r0 : <a href=\"moonbitlang/core/quickcheck/splitmix#RandomState\">@moonbitlang/core/quickcheck/splitmix.RandomState</a>) -> (A, B, C, D, E)",
          "loc": { "line": 57, "column": 8 }
        }
      ],
      "methods": [
        {
          "name": "arbitrary",
          "docstring": "",
          "signature": "fn <a href=\"moonbitlang/core/tuple#Tuple5\">Tuple5</a>::arbitrary[A : <a href=\"moonbitlang/core/quickcheck#Arbitrary\">@moonbitlang/core/quickcheck.Arbitrary</a>, B : <a href=\"moonbitlang/core/quickcheck#Arbitrary\">@moonbitlang/core/quickcheck.Arbitrary</a>, C : <a href=\"moonbitlang/core/quickcheck#Arbitrary\">@moonbitlang/core/quickcheck.Arbitrary</a>, D : <a href=\"moonbitlang/core/quickcheck#Arbitrary\">@moonbitlang/core/quickcheck.Arbitrary</a>, E : <a href=\"moonbitlang/core/quickcheck#Arbitrary\">@moonbitlang/core/quickcheck.Arbitrary</a>](size : Int, r0 : <a href=\"moonbitlang/core/quickcheck/splitmix#RandomState\">@moonbitlang/core/quickcheck/splitmix.RandomState</a>) -> (A, B, C, D, E)",
          "loc": { "line": 57, "column": 8 }
        }
      ]
    },
    {
      "name": "Tuple6",
      "impls": [
        {
          "name": "arbitrary",
          "docstring": "",
          "signature": "impl <a href=\"moonbitlang/core/quickcheck#Arbitrary\">@moonbitlang/core/quickcheck.Arbitrary</a> for <a href=\"moonbitlang/core/tuple#Tuple6\">Tuple6</a> with arbitrary[A : <a href=\"moonbitlang/core/quickcheck#Arbitrary\">@moonbitlang/core/quickcheck.Arbitrary</a>, B : <a href=\"moonbitlang/core/quickcheck#Arbitrary\">@moonbitlang/core/quickcheck.Arbitrary</a>, C : <a href=\"moonbitlang/core/quickcheck#Arbitrary\">@moonbitlang/core/quickcheck.Arbitrary</a>, D : <a href=\"moonbitlang/core/quickcheck#Arbitrary\">@moonbitlang/core/quickcheck.Arbitrary</a>, E : <a href=\"moonbitlang/core/quickcheck#Arbitrary\">@moonbitlang/core/quickcheck.Arbitrary</a>, F : <a href=\"moonbitlang/core/quickcheck#Arbitrary\">@moonbitlang/core/quickcheck.Arbitrary</a>](size : Int, r0 : <a href=\"moonbitlang/core/quickcheck/splitmix#RandomState\">@moonbitlang/core/quickcheck/splitmix.RandomState</a>) -> (A, B, C, D, E, F)",
          "loc": { "line": 71, "column": 8 }
        }
      ],
      "methods": [
        {
          "name": "arbitrary",
          "docstring": "",
          "signature": "fn <a href=\"moonbitlang/core/tuple#Tuple6\">Tuple6</a>::arbitrary[A : <a href=\"moonbitlang/core/quickcheck#Arbitrary\">@moonbitlang/core/quickcheck.Arbitrary</a>, B : <a href=\"moonbitlang/core/quickcheck#Arbitrary\">@moonbitlang/core/quickcheck.Arbitrary</a>, C : <a href=\"moonbitlang/core/quickcheck#Arbitrary\">@moonbitlang/core/quickcheck.Arbitrary</a>, D : <a href=\"moonbitlang/core/quickcheck#Arbitrary\">@moonbitlang/core/quickcheck.Arbitrary</a>, E : <a href=\"moonbitlang/core/quickcheck#Arbitrary\">@moonbitlang/core/quickcheck.Arbitrary</a>, F : <a href=\"moonbitlang/core/quickcheck#Arbitrary\">@moonbitlang/core/quickcheck.Arbitrary</a>](size : Int, r0 : <a href=\"moonbitlang/core/quickcheck/splitmix#RandomState\">@moonbitlang/core/quickcheck/splitmix.RandomState</a>) -> (A, B, C, D, E, F)",
          "loc": { "line": 71, "column": 8 }
        }
      ]
    },
    {
      "name": "Tuple7",
      "impls": [
        {
          "name": "arbitrary",
          "docstring": "",
          "signature": "impl <a href=\"moonbitlang/core/quickcheck#Arbitrary\">@moonbitlang/core/quickcheck.Arbitrary</a> for <a href=\"moonbitlang/core/tuple#Tuple7\">Tuple7</a> with arbitrary[A : <a href=\"moonbitlang/core/quickcheck#Arbitrary\">@moonbitlang/core/quickcheck.Arbitrary</a>, B : <a href=\"moonbitlang/core/quickcheck#Arbitrary\">@moonbitlang/core/quickcheck.Arbitrary</a>, C : <a href=\"moonbitlang/core/quickcheck#Arbitrary\">@moonbitlang/core/quickcheck.Arbitrary</a>, D : <a href=\"moonbitlang/core/quickcheck#Arbitrary\">@moonbitlang/core/quickcheck.Arbitrary</a>, E : <a href=\"moonbitlang/core/quickcheck#Arbitrary\">@moonbitlang/core/quickcheck.Arbitrary</a>, F : <a href=\"moonbitlang/core/quickcheck#Arbitrary\">@moonbitlang/core/quickcheck.Arbitrary</a>, G : <a href=\"moonbitlang/core/quickcheck#Arbitrary\">@moonbitlang/core/quickcheck.Arbitrary</a>](size : Int, r0 : <a href=\"moonbitlang/core/quickcheck/splitmix#RandomState\">@moonbitlang/core/quickcheck/splitmix.RandomState</a>) -> (A, B, C, D, E, F, G)",
          "loc": { "line": 86, "column": 8 }
        }
      ],
      "methods": [
        {
          "name": "arbitrary",
          "docstring": "",
          "signature": "fn <a href=\"moonbitlang/core/tuple#Tuple7\">Tuple7</a>::arbitrary[A : <a href=\"moonbitlang/core/quickcheck#Arbitrary\">@moonbitlang/core/quickcheck.Arbitrary</a>, B : <a href=\"moonbitlang/core/quickcheck#Arbitrary\">@moonbitlang/core/quickcheck.Arbitrary</a>, C : <a href=\"moonbitlang/core/quickcheck#Arbitrary\">@moonbitlang/core/quickcheck.Arbitrary</a>, D : <a href=\"moonbitlang/core/quickcheck#Arbitrary\">@moonbitlang/core/quickcheck.Arbitrary</a>, E : <a href=\"moonbitlang/core/quickcheck#Arbitrary\">@moonbitlang/core/quickcheck.Arbitrary</a>, F : <a href=\"moonbitlang/core/quickcheck#Arbitrary\">@moonbitlang/core/quickcheck.Arbitrary</a>, G : <a href=\"moonbitlang/core/quickcheck#Arbitrary\">@moonbitlang/core/quickcheck.Arbitrary</a>](size : Int, r0 : <a href=\"moonbitlang/core/quickcheck/splitmix#RandomState\">@moonbitlang/core/quickcheck/splitmix.RandomState</a>) -> (A, B, C, D, E, F, G)",
          "loc": { "line": 86, "column": 8 }
        }
      ]
    }
  ]
}