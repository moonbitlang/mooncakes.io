{
  "readme": "",
  "name": "tonyfettes/memory",
  "traits": [],
  "types": [],
  "typealias": [],
  "values": [
    {
      "name": "byte_array2ptr",
      "docstring": " Converts a fixed-size byte array into a raw memory pointer by allocating\n memory and copying the bytes.\n\n Parameters:\n\n * `bytes`: A fixed-size array of bytes to be converted to a pointer.\n\n Returns an integer representing the memory address (pointer) where the bytes\n are stored.",
      "signature": "fn byte_array2ptr(bytes : <a href=\"moonbitlang/core/array#FixedArray\">FixedArray</a>[Byte]) -> Int",
      "loc": { "line": 44, "column": 8 }
    },
    {
      "name": "double_array2ptr",
      "docstring": " Converts a fixed array of doubles to a pointer, adjusting the pointer by 8\n bytes.\n\n Parameters:\n\n - `array` : A fixed array of doubles (`FixedArray[Double]`).\n\n Returns an integer representing the adjusted pointer.",
      "signature": "fn double_array2ptr(array : <a href=\"moonbitlang/core/array#FixedArray\">FixedArray</a>[Double]) -> Int",
      "loc": { "line": 255, "column": 8 }
    },
    {
      "name": "extend16",
      "docstring": " Extends a 32-bit signed integer to a 64-bit signed integer by sign-extending\n the lower 16 bits.\n\n Parameters:\n\n - `value` : The 32-bit signed integer to be extended.\n\n Returns the 64-bit signed integer resulting from the sign-extension of the\n lower 16 bits of the input.",
      "signature": "fn extend16(value : Int) -> Int",
      "loc": { "line": 10, "column": 22 }
    },
    {
      "name": "extend8",
      "docstring": " Extends a 32-bit integer to a 64-bit integer by sign-extending the lower 8\n bits.\n\n Parameters:\n\n - `value` : The 32-bit integer to be extended.\n\n Returns a 64-bit integer with the lower 8 bits sign-extended.",
      "signature": "fn extend8(value : Int) -> Int",
      "loc": { "line": 21, "column": 22 }
    },
    {
      "name": "f32_to_i32",
      "docstring": " Converts a 32-bit floating-point number to a 32-bit signed integer.\n\n Parameters:\n\n - `value` : The 32-bit floating-point number to be converted.\n\n Returns the 32-bit signed integer representation of the input floating-point\n number.",
      "signature": "fn f32_to_i32(value : Float) -> Int",
      "loc": { "line": 185, "column": 22 }
    },
    {
      "name": "f32_to_i64",
      "docstring": " Converts a 32-bit floating-point number to a 64-bit signed integer.\n\n Parameters:\n\n - `value` : A 32-bit floating-point number to be converted.\n\n Returns a 64-bit signed integer.",
      "signature": "fn f32_to_i64(value : Float) -> Int64",
      "loc": { "line": 195, "column": 22 }
    },
    {
      "name": "float_array2ptr",
      "docstring": " Converts a fixed-size array of floats to a pointer in WebAssembly memory.\n\n Parameters:\n\n - `array` : A fixed-size array of floats (`FixedArray[Float]`) to be\n converted.\n\n Returns an integer representing the pointer to the array in WebAssembly\n memory.",
      "signature": "fn float_array2ptr(array : <a href=\"moonbitlang/core/array#FixedArray\">FixedArray</a>[Float]) -> Int",
      "loc": { "line": 218, "column": 8 }
    },
    {
      "name": "free",
      "docstring": " De-allocates a block of memory at the specified address.\n\n Parameters:\n\n - `address` : The address of the memory block to be deallocated.",
      "signature": "fn free(address : Int) -> Unit",
      "loc": { "line": 316, "column": 8 }
    },
    {
      "name": "int64_array2ptr",
      "docstring": " Converts a fixed array of 64-bit integers to a pointer.\n\n Parameters:\n\n - `array` : A fixed array of 64-bit integers (`FixedArray[Int64]`).\n\n Returns an integer representing the pointer to the array.",
      "signature": "fn int64_array2ptr(array : <a href=\"moonbitlang/core/array#FixedArray\">FixedArray</a>[Int64]) -> Int",
      "loc": { "line": 181, "column": 8 }
    },
    {
      "name": "int_array2ptr",
      "docstring": " Converts a fixed-size integer array to a pointer.\n\n Parameters:\n\n - `array` : A fixed-size array of integers (`FixedArray[Int]`).\n\n Returns the pointer to the array as an integer.",
      "signature": "fn int_array2ptr(array : <a href=\"moonbitlang/core/array#FixedArray\">FixedArray</a>[Int]) -> Int",
      "loc": { "line": 145, "column": 8 }
    },
    {
      "name": "load16",
      "docstring": " Loads a 16-bit signed integer from memory at the specified `offset`.\n\n Parameters:\n\n - `offset` : The memory offset from which to load the 16-bit signed integer.\n\n Returns the loaded 16-bit signed integer.",
      "signature": "fn load16(offset : Int) -> Int",
      "loc": { "line": 71, "column": 22 }
    },
    {
      "name": "load16_u",
      "docstring": " Loads a 16-bit unsigned integer from memory at the specified offset.\n\n Parameters:\n\n - `offset` : The memory offset from which to load the 16-bit unsigned\n integer.\n\n Returns the 16-bit unsigned integer loaded from memory.",
      "signature": "fn load16_u(offset : Int) -> Int",
      "loc": { "line": 82, "column": 22 }
    },
    {
      "name": "load32",
      "docstring": " Loads a 32-bit integer from memory at the specified offset.\n\n Parameters:\n\n - `offset` : The memory offset from which to load the 32-bit integer.\n\n Returns the 32-bit integer loaded from memory at the specified offset.",
      "signature": "fn load32(offset : Int) -> Int",
      "loc": { "line": 104, "column": 22 }
    },
    {
      "name": "load64",
      "docstring": " Loads a 64-bit integer from memory at the specified offset.\n\n Parameters:\n\n - `offset` : The memory offset from which to load the 64-bit integer.\n\n Returns the 64-bit integer loaded from memory at the given offset.",
      "signature": "fn load64(offset : Int) -> Int64",
      "loc": { "line": 126, "column": 22 }
    },
    {
      "name": "load8",
      "docstring": " Loads a signed 8-bit integer from memory at the specified offset.\n\n Parameters:\n\n - `offset` : The memory offset from which to load the 8-bit integer.\n\n Returns the signed 8-bit integer value at the specified memory offset.",
      "signature": "fn load8(offset : Int) -> Int",
      "loc": { "line": 51, "column": 22 }
    },
    {
      "name": "load8_u",
      "docstring": " Loads an unsigned 8-bit integer from memory at the specified offset.\n\n Parameters:\n\n - `offset` : The memory offset from which to load the unsigned 8-bit integer.\n\n Returns the unsigned 8-bit integer value at the specified memory offset.",
      "signature": "fn load8_u(offset : Int) -> Int",
      "loc": { "line": 41, "column": 22 }
    },
    {
      "name": "loadf32",
      "docstring": " Loads a 32-bit floating-point number from memory at the specified offset.\n\n Parameters:\n\n - `offset` : The memory offset from which to load the 32-bit floating-point\n number.\n\n Returns the 32-bit floating-point number loaded from memory.",
      "signature": "fn loadf32(offset : Int) -> Float",
      "loc": { "line": 149, "column": 22 }
    },
    {
      "name": "loadf64",
      "docstring": " Loads a 64-bit floating-point number from memory at the specified offset.\n\n Parameters:\n\n - `offset` : The memory offset (in bytes) from which to load the 64-bit\n floating-point number.\n\n Returns the 64-bit floating-point number loaded from memory.",
      "signature": "fn loadf64(offset : Int) -> Double",
      "loc": { "line": 174, "column": 22 }
    },
    {
      "name": "malloc",
      "docstring": " Allocates a block of memory of the specified `size` and returns the address\n of the allocated memory.\n\n Parameters:\n\n - `size`: The size of the memory block to allocate, in bytes.\n\n Returns the address of the allocated memory block as an integer.",
      "signature": "fn malloc(size : Int) -> Int",
      "loc": { "line": 307, "column": 8 }
    },
    {
      "name": "ptr2byte_array",
      "docstring": " Converts a memory region pointed by a pointer into a fixed-size array of\n bytes and frees the memory afterwards.\n\n Parameters:\n\n * `pointer` : An integer representing the memory address of the source data.\n * `length` : The number of bytes to read from the memory address.\n\n Returns a fixed-size array of bytes containing the data read from the memory\n address.",
      "signature": "fn ptr2byte_array(ptr : Int, len : Int) -> <a href=\"moonbitlang/core/array#FixedArray\">FixedArray</a>[Byte]",
      "loc": { "line": 62, "column": 8 }
    },
    {
      "name": "ptr2double_array",
      "docstring": " Converts a pointer to a double array. Sets the 64-bit header and then\n retrieves the double array gfrom the pointer.\n\n Parameters:\n\n - `ptr` : The integer pointer to the start of the double array.\n - `len` : The length of the double array (unused in the function).\n\n Returns a `FixedArray[Double]` containing the double values from the pointer.",
      "signature": "fn ptr2double_array(ptr : Int, len : Int) -> <a href=\"moonbitlang/core/array#FixedArray\">FixedArray</a>[Double]",
      "loc": { "line": 272, "column": 8 }
    },
    {
      "name": "ptr2float_array",
      "docstring": " Converts a pointer to a WebAssembly memory buffer into a fixed-length array\n of floating-point numbers.\n\n Parameters:\n\n - `ptr` : An integer representing the memory address of the buffer containing\n the floating-point numbers.\n - `len` : An integer representing the number of floating-point numbers in the\n buffer.\n\n Returns a `FixedArray[Float]` containing the floating-point numbers from the\n specified memory buffer.",
      "signature": "fn ptr2float_array(ptr : Int, len : Int) -> <a href=\"moonbitlang/core/array#FixedArray\">FixedArray</a>[Float]",
      "loc": { "line": 238, "column": 8 }
    },
    {
      "name": "ptr2int64_array",
      "docstring": " Converts a pointer to an array of 64-bit integers. Sets the 64-bit header\n using an FFI call and then retrieves the array using another FFI call.\n\n Parameters:\n\n - `ptr` : The pointer to the memory location where the array starts.\n - `len` : The length of the array. This parameter is currently unused in the\n function.\n\n Returns a `FixedArray[Int64]` containing the 64-bit integers from the memory\n location pointed to by `ptr`.",
      "signature": "fn ptr2int64_array(ptr : Int, len : Int) -> <a href=\"moonbitlang/core/array#FixedArray\">FixedArray</a>[Int64]",
      "loc": { "line": 200, "column": 8 }
    },
    {
      "name": "ptr2int_array",
      "docstring": " Converts a pointer to an integer array in WebAssembly memory to a fixed-size\n array of integers.\n\n Parameters:\n\n - `ptr` : The pointer to the start of the integer array in WebAssembly\n memory.\n - `len` : The length of the integer array.\n\n Returns a `FixedArray[Int]` containing the integers from the specified memory\n location.",
      "signature": "fn ptr2int_array(ptr : Int, len : Int) -> <a href=\"moonbitlang/core/array#FixedArray\">FixedArray</a>[Int]",
      "loc": { "line": 165, "column": 8 }
    },
    {
      "name": "ptr2str",
      "docstring": " Converts a pointer and length to a string.\n\n Parameters:\n\n - `ptr` : The integer pointer to the start of the string in memory.\n - `len` : The length of the string in bytes.\n\n Returns the string constructed from the memory pointed to by `ptr` with the\n specified `len`.",
      "signature": "fn ptr2str(ptr : Int, len : Int) -> String",
      "loc": { "line": 26, "column": 8 }
    },
    {
      "name": "ptr2uint64_array",
      "docstring": " Converts a pointer to an array of `UInt64` values. Sets the 64-bit header and\n then retrieves the array from the pointer.\n\n Parameters:\n\n - `ptr` : The integer representing the pointer to the array.\n - `len` : The length of the array. This parameter is currently unused in the\n function.\n\n Returns a `FixedArray[UInt64]` containing the values from the pointer.",
      "signature": "fn ptr2uint64_array(ptr : Int, len : Int) -> <a href=\"moonbitlang/core/array#FixedArray\">FixedArray</a>[UInt64]",
      "loc": { "line": 129, "column": 8 }
    },
    {
      "name": "ptr2uint_array",
      "docstring": " Converts a pointer and length to a fixed-size array of unsigned integers.\n\n Parameters:\n\n - `ptr` : The pointer to the memory location where the array data starts.\n - `len` : The length of the array to be created.\n\n Returns a `FixedArray[UInt]` containing the data from the specified memory\n location.",
      "signature": "fn ptr2uint_array(ptr : Int, len : Int) -> <a href=\"moonbitlang/core/array#FixedArray\">FixedArray</a>[UInt]",
      "loc": { "line": 95, "column": 8 }
    },
    {
      "name": "realloc",
      "docstring": " Reallocate memory at the given `address` to the specified `size`.\n\n Parameters:\n\n - `address`: The memory address to reallocate.\n - `size`: The new size for the memory block.\n\n Returns the new memory address after reallocation.",
      "signature": "fn realloc(address : Int, size : Int) -> Int",
      "loc": { "line": 328, "column": 8 }
    },
    {
      "name": "store16",
      "docstring": " Stores a 16-bit integer value at a specified memory offset in WebAssembly\n memory.\n\n Parameters:\n\n - `offset` : The memory offset where the value will be stored.\n - `value` : The 16-bit integer value to be stored at the specified offset.",
      "signature": "fn store16(offset : Int, value : Int) -> Unit",
      "loc": { "line": 61, "column": 22 }
    },
    {
      "name": "store32",
      "docstring": " Stores a 32-bit integer value at a specified memory offset.\n\n Parameters:\n\n - `offset` : The memory offset where the value will be stored, represented as\n an integer.\n - `value` : The 32-bit integer value to be stored at the specified offset.\n\n Returns nothing.",
      "signature": "fn store32(offset : Int, value : Int) -> Unit",
      "loc": { "line": 94, "column": 22 }
    },
    {
      "name": "store64",
      "docstring": " Stores a 64-bit integer value at a specified memory offset in WebAssembly\n memory.\n\n Parameters:\n\n - `offset` : The memory offset (in bytes) where the 64-bit integer will be\n stored.\n - `value` : The 64-bit integer value to be stored at the specified memory\n offset.",
      "signature": "fn store64(offset : Int, value : Int64) -> Unit",
      "loc": { "line": 116, "column": 22 }
    },
    {
      "name": "store8",
      "docstring": " Stores a single byte at the specified memory offset in a WebAssembly memory.\n\n Parameters:\n\n - `offset` : The memory offset (in bytes) where the value will be stored.\n - `value` : The integer value (0-255) to be stored as a byte at the specified\n offset.",
      "signature": "fn store8(offset : Int, value : Int) -> Unit",
      "loc": { "line": 31, "column": 22 }
    },
    {
      "name": "storef32",
      "docstring": " Stores a 32-bit floating-point value at a specified memory offset in the\n WebAssembly linear memory.\n\n Parameters:\n\n - `offset` : The memory offset (in bytes) where the 32-bit floating-point\n value will be stored.\n - `value` : The 32-bit floating-point value to be stored at the specified\n memory offset.",
      "signature": "fn storef32(offset : Int, value : Float) -> Unit",
      "loc": { "line": 138, "column": 22 }
    },
    {
      "name": "storef64",
      "docstring": " Stores a 64-bit floating-point value at a specified memory offset in\n WebAssembly memory.\n\n Parameters:\n\n - `offset` : The memory offset (in bytes) where the 64-bit floating-point\n value will be stored.\n - `value` : The 64-bit floating-point value to be stored at the specified\n memory offset.\n\n Returns nothing.",
      "signature": "fn storef64(offset : Int, value : Double) -> Unit",
      "loc": { "line": 163, "column": 22 }
    },
    {
      "name": "str2ptr",
      "docstring": " Converts a string to a pointer suitable for WebAssembly memory.\n\n Parameters:\n\n - `str` : The string to be converted.\n\n Returns the pointer to the string in WebAssembly memory.",
      "signature": "fn str2ptr(str : String) -> Int",
      "loc": { "line": 8, "column": 8 }
    },
    {
      "name": "uint64_array2ptr",
      "docstring": " Converts a fixed array of `UInt64` values to a pointer in WebAssembly memory.\n\n Parameters:\n\n - `array` : A fixed array of `UInt64` values to be converted.\n\n Returns the pointer to the WebAssembly memory where the array is stored.",
      "signature": "fn uint64_array2ptr(array : <a href=\"moonbitlang/core/array#FixedArray\">FixedArray</a>[UInt64]) -> Int",
      "loc": { "line": 111, "column": 8 }
    },
    {
      "name": "uint_array2ptr",
      "docstring": " Converts a fixed array of unsigned integers to a pointer.\n\n Parameters:\n\n - `array` : A fixed array of unsigned integers (`FixedArray[UInt]`).\n\n Returns an integer representing the pointer to the array.",
      "signature": "fn uint_array2ptr(array : <a href=\"moonbitlang/core/array#FixedArray\">FixedArray</a>[UInt]) -> Int",
      "loc": { "line": 78, "column": 8 }
    }
  ],
  "misc": []
}