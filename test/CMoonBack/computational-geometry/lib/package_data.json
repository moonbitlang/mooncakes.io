{
  "readme": "",
  "name": "CMoonBack/computational-geometry/lib",
  "traits": [],
  "types": [
    {
      "name": "Circle",
      "docstring": "",
      "signature": "type Circle",
      "loc": { "line": 2, "column": 8 },
      "methods": [],
      "impls": []
    },
    {
      "name": "Line",
      "docstring": "",
      "signature": "type Line",
      "loc": { "line": 51, "column": 8 },
      "methods": [],
      "impls": []
    },
    {
      "name": "Line3d",
      "docstring": "",
      "signature": "type Line3d",
      "loc": { "line": 9, "column": 8 },
      "methods": [],
      "impls": []
    },
    {
      "name": "Plane3d",
      "docstring": "",
      "signature": "type Plane3d",
      "loc": { "line": 15, "column": 8 },
      "methods": [],
      "impls": []
    },
    {
      "name": "Point",
      "docstring": "",
      "signature": "type Point",
      "loc": { "line": 26, "column": 8 },
      "methods": [],
      "impls": []
    },
    {
      "name": "Point3d",
      "docstring": "",
      "signature": "type Point3d",
      "loc": { "line": 2, "column": 8 },
      "methods": [],
      "impls": []
    }
  ],
  "typealias": [],
  "values": [
    {
      "name": "new_line",
      "docstring": " Creates a new line segment in a 2D coordinate system defined by two\n endpoints.\n\n Parameters:\n\n * `start_point` : The starting point of the line segment.\n * `end_point` : The ending point of the line segment.\n\n Returns a `Line` struct representing the line segment between the two points.\n\n Examples:\n\n ```moonbit\n test \"new_line/horizontal\" {\n   let start = new_point(0.0, 0.0)\n   let end = new_point(3.0, 0.0)\n   let line = new_line(start, end)\n   inspect!(line.a.x, content=\"0.0\")\n   inspect!(line.a.y, content=\"0.0\")\n   inspect!(line.b.x, content=\"3.0\")\n   inspect!(line.b.y, content=\"0.0\")\n }\n \n test \"new_line/vertical\" {\n   let start = new_point(1.0, 0.0)\n   let end = new_point(1.0, 4.0)\n   let line = new_line(start, end)\n   inspect!(line.a.x, content=\"1.0\")\n   inspect!(line.a.y, content=\"0.0\")\n   inspect!(line.b.x, content=\"1.0\")\n   inspect!(line.b.y, content=\"4.0\")\n }\n \n test \"new_line/diagonal\" {\n   let start = new_point(-1.0, -1.0)\n   let end = new_point(1.0, 1.0)\n   let line = new_line(start, end)\n   inspect!(line.a.x, content=\"-1.0\")\n   inspect!(line.a.y, content=\"-1.0\")\n   inspect!(line.b.x, content=\"1.0\")\n   inspect!(line.b.y, content=\"1.0\")\n }\n ```",
      "signature": "fn new_line(a_ : <a href=\"CMoonBack/computational-geometry/lib#Point\">Point</a>, b_ : <a href=\"CMoonBack/computational-geometry/lib#Point\">Point</a>) -> <a href=\"CMoonBack/computational-geometry/lib#Line\">Line</a>",
      "loc": { "line": 802, "column": 8 }
    },
    {
      "name": "new_line3d",
      "docstring": "\n Creates a new 3D line segment defined by two endpoints in a three-dimensional\n coordinate system.\n\n Parameters:\n\n * `start_point` : The starting point of the line segment, represented as a\n `Point3d` structure with x, y, and z coordinates.\n * `end_point` : The ending point of the line segment, represented as a\n `Point3d` structure with x, y, and z coordinates.\n\n Returns a `Line3d` structure representing the line segment between the two\n specified points.\n\n Example:\n\n ```moonbit\n test \"new_line3d\" {\n   let start = new_point3d(1.0, 2.0, 3.0)\n   let end = new_point3d(4.0, 5.0, 6.0)\n   let line = new_line3d(start, end)\n   inspect!(line.a.x, content=\"1.0\")\n   inspect!(line.b.z, content=\"6.0\")\n }\n ```",
      "signature": "fn new_line3d(a_ : <a href=\"CMoonBack/computational-geometry/lib#Point3d\">Point3d</a>, b_ : <a href=\"CMoonBack/computational-geometry/lib#Point3d\">Point3d</a>) -> <a href=\"CMoonBack/computational-geometry/lib#Line3d\">Line3d</a>",
      "loc": { "line": 319, "column": 8 }
    },
    {
      "name": "new_plane_3d",
      "docstring": "\n Creates a new 3D plane defined by three non-collinear points. The plane is\n represented in point-normal form, where the normal vector is determined by\n the cross product of two vectors formed by these points.\n\n Parameters:\n\n * `point1` : The first point defining the plane.\n * `point2` : The second point defining the plane.\n * `point3` : The third point defining the plane.\n\n Returns a `plane3d` structure representing the plane passing through the\n three given points.\n\n Example:\n\n ```moonbit\n test \"new_plane_3d\" {\n   let p1 = new_point3d(0.0, 0.0, 0.0)\n   let p2 = new_point3d(1.0, 0.0, 0.0)\n   let p3 = new_point3d(0.0, 1.0, 0.0)\n   let plane = new_plane_3d(p1, p2, p3)\n   // Creates a plane with normal vector (0, 0, 1)\n   inspect!(plane.a.x, content=\"0.0\")\n   inspect!(plane.b.x, content=\"1.0\")\n   inspect!(plane.c.y, content=\"1.0\")\n }\n ```",
      "signature": "fn new_plane_3d(a_ : <a href=\"CMoonBack/computational-geometry/lib#Point3d\">Point3d</a>, b_ : <a href=\"CMoonBack/computational-geometry/lib#Point3d\">Point3d</a>, c_ : <a href=\"CMoonBack/computational-geometry/lib#Point3d\">Point3d</a>) -> <a href=\"CMoonBack/computational-geometry/lib#Plane3d\">Plane3d</a>",
      "loc": { "line": 352, "column": 8 }
    },
    {
      "name": "new_point",
      "docstring": " Creates a new point in a 2D coordinate system with the specified x and y\n coordinates.\n\n Parameters:\n\n * `x` : The x-coordinate of the point.\n * `y` : The y-coordinate of the point.\n\n Returns a `Point` struct containing the specified coordinates.\n\n Examples:\n\n ```moonbit\n test \"new_point\" {\n   let p = new_point(1.0, 2.0)\n   inspect!(p.x, content=\"1.0\")\n   inspect!(p.y, content=\"2.0\")\n }\n \n test \"new_point/negative_coordinates\" {\n   let p = new_point(-3.0, -4.0)\n   inspect!(p.x, content=\"-3.0\")\n   inspect!(p.y, content=\"-4.0\")\n }\n \n test \"new_point/zero_coordinates\" {\n   let p = new_point(0.0, 0.0)\n   inspect!(p.x, content=\"0.0\")\n   inspect!(p.y, content=\"0.0\")\n }\n ```",
      "signature": "fn new_point(x_ : Double, y_ : Double) -> <a href=\"CMoonBack/computational-geometry/lib#Point\">Point</a>",
      "loc": { "line": 754, "column": 8 }
    },
    {
      "name": "new_point3d",
      "docstring": "\n Creates a new point in a 3D coordinate system with the specified x, y, and z\n coordinates.\n\n Parameters:\n\n * `x` : The x-coordinate of the point.\n * `y` : The y-coordinate of the point.\n * `z` : The z-coordinate of the point.\n\n Returns a `Point3d` struct containing the specified coordinates.\n\n Examples:\n\n ```moonbit\n test \"new_point3d\" {\n   let p = new_point3d(1.0, 2.0, 3.0)\n   inspect!(p.x, content=\"1.0\")\n   inspect!(p.y, content=\"2.0\")\n   inspect!(p.z, content=\"3.0\")\n }\n \n test \"new_point3d/negative_coordinates\" {\n   let p = new_point3d(-3.0, -4.0, -5.0)\n   inspect!(p.x, content=\"-3.0\")\n   inspect!(p.y, content=\"-4.0\")\n   inspect!(p.z, content=\"-5.0\")\n }\n ```",
      "signature": "fn new_point3d(x_ : Double, y_ : Double, z_ : Double) -> <a href=\"CMoonBack/computational-geometry/lib#Point3d\">Point3d</a>",
      "loc": { "line": 289, "column": 8 }
    }
  ],
  "misc": []
}