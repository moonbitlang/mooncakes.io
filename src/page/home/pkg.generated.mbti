// Generated using `moon info`, DON'T EDIT IT
package "moonbitlang/mooncakes/page/home"

import(
  "Yoorkin/rabbit-tea/cmd"
  "Yoorkin/rabbit-tea/html"
  "moonbitlang/mooncakes/util"
)

// Values
fn filter_indices(String, Map[Char, Array[ModuleIndex]]) -> Array[ModuleIndex]

fn load() -> (@cmd.Cmd[Msg], Model)

fn update(Msg, Model) -> (@cmd.Cmd[Msg], Model)

fn view(Model) -> @html.Html[Msg]

// Errors

// Types and methods
type Indices

pub struct Model {
  recent_modules : @util.Status[Array[ModuleIndex]]
  all_modules : @util.Status[Map[Char, Array[ModuleIndex]]]
  filter : String
  filtered_modules : Array[ModuleIndex]
  showing_lines : Int
  showing_packages : Int
}

pub(all) struct ModuleIndex {
  author : String
  name : String
  path : String
  version : String
  keywords : Array[String]?
  description : String?
  created_at : String?
  is_new : Bool
}

pub enum Msg {
  GotAllModule(Result[Array[ModuleIndex], String])
  GotRecentModule(Result[Array[ModuleIndex], String])
  GotCount(Result[PackageCount, String])
  IncreaseAnimation(PackageCount, lines_inc_step~ : Int, packages_inc_step~ : Int, repeat_times~ : Int)
  FilterChanged(String)
}

type PackageCount

// Type aliases

// Traits

