{
  "readme": "# gmlewis/zlib\n[![check](https://github.com/gmlewis/moonbit-zlib/actions/workflows/check.yml/badge.svg)](https://github.com/gmlewis/moonbit-zlib/actions/workflows/check.yml)\n\nThis is a simplified zlib format compressed data package based on Go's implementation:\nhttps://cs.opensource.google/go/go/+/refs/tags/go1.23.3:src/compress/zlib/reader.go\nwhich has the copyright notice:\n\n```\n// Copyright 2009 The Go Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style\n// license that can be found in the LICENSE file.\n```\n\n## Status\n\nThe code has been updated to support compiler:\n\n```bash\n$ moon version --all\nmoon 0.1.20241216 (b57ed1c 2024-12-16) ~/.moon/bin/moon\nmoonc v0.1.20241216+68e710374 ~/.moon/bin/moonc\nmoonrun 0.1.20241216 (b57ed1c 2024-12-16) ~/.moon/bin/moonrun\n```\n\nUse `moonup` to manage `moon` compiler versions:\nhttps://github.com/chawyehsu/moonup\n",
  "name": "gmlewis/zlib",
  "traits": [
    {
      "name": "@gmlewis/zlib.resetter",
      "docstring": " resetter resets a ReadCloser returned by [Reader::new] or [Reader::new_dict]\n to switch to a new underlying Reader. This permits reusing a ReadCloser\n instead of allocating a new one.",
      "signature": "pub(open) trait @gmlewis/zlib.resetter {\n  reset(Self, <a href=\"gmlewis/io#Reader\">@gmlewis/io.Reader</a>, <a href=\"gmlewis/io#Slice\">@gmlewis/io.Slice</a>[Byte]) -> <a href=\"gmlewis/io#IOError\">@gmlewis/io.IOError</a>?\n}",
      "loc": { "line": 57, "column": 1 },
      "default_impls": [],
      "impls": []
    }
  ],
  "types": [
    {
      "name": "Reader",
      "docstring": "",
      "signature": "type Reader",
      "loc": { "line": 46, "column": 8 },
      "methods": [
        {
          "name": "close",
          "docstring": " Calling close does not close the wrapped [io.Reader] originally passed to [Reader::new].\n In order for the ZLIB checksum to be verified, the reader must be\n fully consumed until the [io.eof].",
          "signature": "fn <a href=\"gmlewis/zlib#Reader\">Reader</a>::close(self : <a href=\"gmlewis/zlib#Reader\">Reader</a>) -> <a href=\"gmlewis/io#IOError\">@gmlewis/io.IOError</a>?",
          "loc": { "line": 142, "column": 8 }
        },
        {
          "name": "new",
          "docstring": " Reader::new creates a new ReadCloser.\n Reads from the returned ReadCloser read and decompress data from r.\n If r does not implement [io.ByteReader], the decompressor may read more\n data than necessary from r.\n It is the caller's responsibility to call close on the ReadCloser when done.\n\n The [io.ReadCloser] returned by Reader::new also implements [resetter].",
          "signature": "fn <a href=\"gmlewis/zlib#Reader\">Reader</a>::new(r : <a href=\"gmlewis/flate#Reader\">@gmlewis/flate.Reader</a>) -> (<a href=\"gmlewis/io#ReadCloser\">@gmlewis/io.ReadCloser</a>, <a href=\"gmlewis/io#IOError\">@gmlewis/io.IOError</a>?)",
          "loc": { "line": 70, "column": 16 }
        },
        {
          "name": "new_dict",
          "docstring": " Reader::new_dict is like [Reader::new] but uses a preset dictionary.\n Reader::new_dict ignores the dictionary if the compressed data does not refer to it.\n If the compressed data refers to a different dictionary, Reader::new_dict returns [err_dictionary].\n\n The ReadCloser returned by Reader::new_dict also implements [resetter].",
          "signature": "fn <a href=\"gmlewis/zlib#Reader\">Reader</a>::new_dict(r : <a href=\"gmlewis/flate#Reader\">@gmlewis/flate.Reader</a>, dict : <a href=\"gmlewis/io#Slice\">@gmlewis/io.Slice</a>[Byte]) -> (<a href=\"gmlewis/io#ReadCloser\">@gmlewis/io.ReadCloser</a>, <a href=\"gmlewis/io#IOError\">@gmlewis/io.IOError</a>?)",
          "loc": { "line": 79, "column": 16 }
        },
        {
          "name": "read",
          "docstring": "",
          "signature": "fn <a href=\"gmlewis/zlib#Reader\">Reader</a>::read(self : <a href=\"gmlewis/zlib#Reader\">Reader</a>, p : <a href=\"gmlewis/io#Slice\">@gmlewis/io.Slice</a>[Byte]) -> (Int, <a href=\"gmlewis/io#IOError\">@gmlewis/io.IOError</a>?)",
          "loc": { "line": 95, "column": 8 }
        },
        {
          "name": "reset",
          "docstring": "",
          "signature": "fn <a href=\"gmlewis/zlib#Reader\">Reader</a>::reset(self : <a href=\"gmlewis/zlib#Reader\">Reader</a>, r : <a href=\"gmlewis/flate#Reader\">@gmlewis/flate.Reader</a>, dict : <a href=\"gmlewis/io#Slice\">@gmlewis/io.Slice</a>[Byte]) -> <a href=\"gmlewis/io#IOError\">@gmlewis/io.IOError</a>?",
          "loc": { "line": 151, "column": 8 }
        }
      ],
      "impls": []
    },
    {
      "name": "Writer",
      "docstring": "",
      "signature": "type Writer",
      "loc": { "line": 11, "column": 8 },
      "methods": [
        {
          "name": "close",
          "docstring": "",
          "signature": "fn <a href=\"gmlewis/zlib#Writer\">Writer</a>::close(self : <a href=\"gmlewis/zlib#Writer\">Writer</a>) -> <a href=\"gmlewis/io#IOError\">@gmlewis/io.IOError</a>?",
          "loc": { "line": 149, "column": 8 }
        },
        {
          "name": "flush",
          "docstring": "",
          "signature": "fn <a href=\"gmlewis/zlib#Writer\">Writer</a>::flush(self : <a href=\"gmlewis/zlib#Writer\">Writer</a>) -> <a href=\"gmlewis/io#IOError\">@gmlewis/io.IOError</a>?",
          "loc": { "line": 135, "column": 8 }
        },
        {
          "name": "new",
          "docstring": "",
          "signature": "fn <a href=\"gmlewis/zlib#Writer\">Writer</a>::new(w : <a href=\"gmlewis/io#Writer\">@gmlewis/io.Writer</a>) -> <a href=\"gmlewis/zlib#Writer\">Writer</a>",
          "loc": { "line": 28, "column": 16 }
        },
        {
          "name": "new_dict",
          "docstring": "",
          "signature": "fn <a href=\"gmlewis/zlib#Writer\">Writer</a>::new_dict(w : <a href=\"gmlewis/io#Writer\">@gmlewis/io.Writer</a>, dict : <a href=\"gmlewis/io#Slice\">@gmlewis/io.Slice</a>[Byte]) -> <a href=\"gmlewis/zlib#Writer\">Writer</a>",
          "loc": { "line": 34, "column": 16 }
        },
        {
          "name": "reset",
          "docstring": "",
          "signature": "fn <a href=\"gmlewis/zlib#Writer\">Writer</a>::reset(self : <a href=\"gmlewis/zlib#Writer\">Writer</a>, w : <a href=\"gmlewis/io#Writer\">@gmlewis/io.Writer</a>) -> Unit",
          "loc": { "line": 50, "column": 8 }
        },
        {
          "name": "write",
          "docstring": "",
          "signature": "fn <a href=\"gmlewis/zlib#Writer\">Writer</a>::write(self : <a href=\"gmlewis/zlib#Writer\">Writer</a>, p : <a href=\"gmlewis/io#Slice\">@gmlewis/io.Slice</a>[Byte]) -> (Int, <a href=\"gmlewis/io#IOError\">@gmlewis/io.IOError</a>?)",
          "loc": { "line": 114, "column": 8 }
        }
      ],
      "impls": []
    }
  ],
  "typealias": [],
  "values": [
    {
      "name": "err_checksum",
      "docstring": " err_checksum is returned when reading ZLIB data that has an invalid checksum.",
      "signature": "let err_checksum : <a href=\"gmlewis/io#IOError\">@gmlewis/io.IOError</a>",
      "loc": { "line": 37, "column": 9 }
    },
    {
      "name": "err_dictionary",
      "docstring": " err_dictionary is returned when reading ZLIB data that has an invalid dictionary.",
      "signature": "let err_dictionary : <a href=\"gmlewis/io#IOError\">@gmlewis/io.IOError</a>",
      "loc": { "line": 40, "column": 9 }
    },
    {
      "name": "err_header",
      "docstring": " err_header is returned when reading ZLIB data that has an invalid header.",
      "signature": "let err_header : <a href=\"gmlewis/io#IOError\">@gmlewis/io.IOError</a>",
      "loc": { "line": 43, "column": 9 }
    }
  ],
  "misc": []
}