{
  "readme": "# Immutable Priority Queue\n\nA priority queue is a data structure capable of maintaining maximum/minimum values at the front of the queue, which may have other names in other programming languages (C++ std::priority_queue / Rust BinaryHeap). The priority queue here is implemented as a pairing heap and has excellent performance.\n\n# Usage\n\n## Create\n\nYou can use `new()` or `of()` to create an immutable priority queue.\n\n```moonbit\nlet queue1 : @immut/priority_queue.T[Int] = @immut/priority_queue.new()\nlet queue2 = @immut/priority_queue.of([1, 2, 3])\n```\n\nNote, however, that the default immutable priority queue created is greater-first; if you need to create a less-first queue, you can write a struct belongs to Compare trait to implement it.\n\n## Length & Empty\n\nYou can use the `length` to get the length of the immutable priority queue.\n\n```moonbit\nlet pq = @immut/priority_queue.new()\nprintln(pq.length()) // 0\nprintln(pq.push(1).length()) // 1\n```\n\nYou can use the `is_empty` to determine whether the immutable priority queue is empty.\n\n```moonbit\nlet pq = @immut/priority_queue.new()\nprintln(pq.is_empty()) // true\n```\n\n## Peek & Push & Pop\n\nYou can use `peek()` to look at the head element of a queue, which must be either the maximum or minimum value of an element in the queue, depending on the nature of the specification. The return value of `peek()` is an Option, which means that the result will be `None` when the queue is empty.\n\n```moonbit\nlet pq = @immut/priority_queue.of([1, 2, 3, 4, 5])\nprintln(pq.peek()) // Some(5)\n```\n\nYou can use `push()` to add elements to the immutable priority queue and get a new queue.\n\n```moonbit\nlet pq : @immut/priority_queue.new()\nprintln(pq.push(1).peek()) // Some(1)\n```\n\nYou can use `pop()` to remove the element at the front of the priority queue and get a new immutable priority queue wrapped with Option. If the immutable priority queue is empty, then it will return None.\n\n```moonbit\nlet pq = @immut/priority_queue.of([5, 4, 3, 2, 1])\nmatch pq.pop(){\n    Some(q) => q.peek()\n    None => None\n}// Some(5)\n```\n",
  "name": "moonbitlang/core/immut/priority_queue",
  "traits": [],
  "types": [
    {
      "name": "T",
      "docstring": "",
      "signature": "type T",
      "loc": { "line": 22, "column": 8 },
      "methods": [
        {
          "name": "arbitrary",
          "docstring": "",
          "signature": "fn <a href=\"moonbitlang/core/immut/priority_queue#T\">T</a>::arbitrary[X : <a href=\"moonbitlang/core/quickcheck#Arbitrary\">@moonbitlang/core/quickcheck.Arbitrary</a> + <a href=\"moonbitlang/core/builtin#Compare\">Compare</a> + <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>](size : Int, rs : <a href=\"moonbitlang/core/quickcheck/splitmix#RandomState\">@moonbitlang/core/quickcheck/splitmix.RandomState</a>) -> <a href=\"moonbitlang/core/immut/priority_queue#T\">T</a>[X]",
          "loc": { "line": 228, "column": 83 }
        },
        {
          "name": "from_array",
          "docstring": "\n Creates a new immutable priority queue from an array.\n \n # Example\n ```\n let queue = @priority_queue.of([1, 2, 3, 4, 5])\n assert_eq!(queue.length(), 5)\n ```",
          "signature": "fn <a href=\"moonbitlang/core/immut/priority_queue#T\">T</a>::from_array[A : <a href=\"moonbitlang/core/builtin#Compare\">Compare</a> + <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>](arr : <a href=\"moonbitlang/core/array#Array\">Array</a>[A]) -> <a href=\"moonbitlang/core/immut/priority_queue#T\">T</a>[A]",
          "loc": { "line": 35, "column": 11 }
        },
        {
          "name": "from_iter",
          "docstring": "",
          "signature": "fn <a href=\"moonbitlang/core/immut/priority_queue#T\">T</a>::from_iter[A : <a href=\"moonbitlang/core/builtin#Compare\">Compare</a> + <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>](iter : <a href=\"moonbitlang/core/builtin#Iter\">Iter</a>[A]) -> <a href=\"moonbitlang/core/immut/priority_queue#T\">T</a>[A]",
          "loc": { "line": 85, "column": 11 }
        },
        {
          "name": "hash",
          "docstring": "",
          "signature": "fn <a href=\"moonbitlang/core/immut/priority_queue#T\">T</a>::hash[Self : <a href=\"moonbitlang/core/builtin#Hash\">Hash</a>](self : Self) -> Int",
          "loc": { "line": 40, "column": 1 }
        },
        {
          "name": "hash_combine",
          "docstring": "",
          "signature": "fn <a href=\"moonbitlang/core/immut/priority_queue#T\">T</a>::hash_combine[A : <a href=\"moonbitlang/core/builtin#Hash\">Hash</a> + <a href=\"moonbitlang/core/builtin#Compare\">Compare</a> + <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>](self : <a href=\"moonbitlang/core/immut/priority_queue#T\">T</a>[A], hasher : <a href=\"moonbitlang/core/builtin#Hasher\">Hasher</a>) -> Unit",
          "loc": { "line": 241, "column": 49 }
        },
        {
          "name": "is_empty",
          "docstring": "\n Checks if the immutable priority queue is empty.\n \n # Example\n ```\n let queue = @priority_queue.new()\n assert_eq!(queue.is_empty(), true)\n assert_eq!(queue.push(1).is_empty(), false)\n ```",
          "signature": "fn <a href=\"moonbitlang/core/immut/priority_queue#T\">T</a>::is_empty[A](self : <a href=\"moonbitlang/core/immut/priority_queue#T\">T</a>[A]) -> Bool",
          "loc": { "line": 186, "column": 8 }
        },
        {
          "name": "iter",
          "docstring": "",
          "signature": "fn <a href=\"moonbitlang/core/immut/priority_queue#T\">T</a>::iter[A : <a href=\"moonbitlang/core/builtin#Compare\">Compare</a> + <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>](self : <a href=\"moonbitlang/core/immut/priority_queue#T\">T</a>[A]) -> <a href=\"moonbitlang/core/builtin#Iter\">Iter</a>[A]",
          "loc": { "line": 71, "column": 8 }
        },
        {
          "name": "length",
          "docstring": "\n Return the length of the immutable priority queue.\n \n # Example\n ```\n let queue = @priority_queue.new()\n assert_eq!(queue.length(), 0)\n assert_eq!(queue.push(1).length(), 1)\n ```",
          "signature": "fn <a href=\"moonbitlang/core/immut/priority_queue#T\">T</a>::length[A](self : <a href=\"moonbitlang/core/immut/priority_queue#T\">T</a>[A]) -> Int",
          "loc": { "line": 202, "column": 8 }
        },
        {
          "name": "new",
          "docstring": "\n Creates a new empty immutable priority queue.\n \n # Example\n ```\n let queue = @priority_queue.new()\n assert_eq!(queue.push(1).length(), 1)\n ```",
          "signature": "fn <a href=\"moonbitlang/core/immut/priority_queue#T\">T</a>::new[A : <a href=\"moonbitlang/core/builtin#Compare\">Compare</a> + <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>]() -> <a href=\"moonbitlang/core/immut/priority_queue#T\">T</a>[A]",
          "loc": { "line": 23, "column": 11 }
        },
        {
          "name": "of",
          "docstring": "",
          "signature": "fn <a href=\"moonbitlang/core/immut/priority_queue#T\">T</a>::of[A : <a href=\"moonbitlang/core/builtin#Compare\">Compare</a> + <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>](arr : <a href=\"moonbitlang/core/array#FixedArray\">FixedArray</a>[A]) -> <a href=\"moonbitlang/core/immut/priority_queue#T\">T</a>[A]",
          "loc": { "line": 207, "column": 11 }
        },
        {
          "name": "op_equal",
          "docstring": "",
          "signature": "fn <a href=\"moonbitlang/core/immut/priority_queue#T\">T</a>::op_equal[A : <a href=\"moonbitlang/core/builtin#Compare\">Compare</a> + <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>](self : <a href=\"moonbitlang/core/immut/priority_queue#T\">T</a>[A], other : <a href=\"moonbitlang/core/immut/priority_queue#T\">T</a>[A]) -> Bool",
          "loc": { "line": 236, "column": 40 }
        },
        {
          "name": "output",
          "docstring": "",
          "signature": "fn <a href=\"moonbitlang/core/immut/priority_queue#T\">T</a>::output[A : <a href=\"moonbitlang/core/builtin#Show\">Show</a> + <a href=\"moonbitlang/core/builtin#Compare\">Compare</a> + <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>](self : <a href=\"moonbitlang/core/immut/priority_queue#T\">T</a>[A], logger : <a href=\"moonbitlang/core/builtin#Logger\">Logger</a>) -> Unit",
          "loc": { "line": 219, "column": 49 }
        },
        {
          "name": "peek",
          "docstring": "\n Peeks at the first value in the immutable priority queue, which returns None if the immutable priority queue is empty.\n \n # Example\n ```\n let queue = @priority_queue.of([1, 2, 3, 4])\n assert_eq!(queue.peek(), Some(4))\n ```",
          "signature": "fn <a href=\"moonbitlang/core/immut/priority_queue#T\">T</a>::peek[A](self : <a href=\"moonbitlang/core/immut/priority_queue#T\">T</a>[A]) -> A?",
          "loc": { "line": 170, "column": 8 }
        },
        {
          "name": "pop",
          "docstring": "\n Pops the first value from the immutable priority queue, which returns None if the queue is empty.\n \n # Example\n ```\n let queue = @priority_queue.of([1, 2, 3, 4])\n let first = queue.pop()\n assert_eq!(first, Some(@priority_queue.of([1, 2, 3])))\n ```",
          "signature": "fn <a href=\"moonbitlang/core/immut/priority_queue#T\">T</a>::pop[A : <a href=\"moonbitlang/core/builtin#Compare\">Compare</a> + <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>](self : <a href=\"moonbitlang/core/immut/priority_queue#T\">T</a>[A]) -> <a href=\"moonbitlang/core/immut/priority_queue#T\">T</a>[A]?",
          "loc": { "line": 120, "column": 8 }
        },
        {
          "name": "pop_exn",
          "docstring": "\n @alert deprecated \"Use `unsafe_pop` instead\"",
          "signature": "fn <a href=\"moonbitlang/core/immut/priority_queue#T\">T</a>::pop_exn[A : <a href=\"moonbitlang/core/builtin#Compare\">Compare</a> + <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>](self : <a href=\"moonbitlang/core/immut/priority_queue#T\">T</a>[A]) -> <a href=\"moonbitlang/core/immut/priority_queue#T\">T</a>[A]",
          "loc": { "line": 146, "column": 8 }
        },
        {
          "name": "push",
          "docstring": "\n Adds a value to the immutable priority queue.\n \n # Example\n ```\n let queue = @priority_queue.new()\n assert_eq!(queue.push(1).length(), 1)\n ```",
          "signature": "fn <a href=\"moonbitlang/core/immut/priority_queue#T\">T</a>::push[A : <a href=\"moonbitlang/core/builtin#Compare\">Compare</a> + <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>](self : <a href=\"moonbitlang/core/immut/priority_queue#T\">T</a>[A], value : A) -> <a href=\"moonbitlang/core/immut/priority_queue#T\">T</a>[A]",
          "loc": { "line": 158, "column": 8 }
        },
        {
          "name": "to_array",
          "docstring": "",
          "signature": "fn <a href=\"moonbitlang/core/immut/priority_queue#T\">T</a>::to_array[A : <a href=\"moonbitlang/core/builtin#Compare\">Compare</a> + <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>](self : <a href=\"moonbitlang/core/immut/priority_queue#T\">T</a>[A]) -> <a href=\"moonbitlang/core/array#Array\">Array</a>[A]",
          "loc": { "line": 47, "column": 8 }
        },
        {
          "name": "to_string",
          "docstring": "",
          "signature": "fn <a href=\"moonbitlang/core/immut/priority_queue#T\">T</a>::to_string[Self : <a href=\"moonbitlang/core/builtin#Show\">Show</a>](self : Self) -> String",
          "loc": { "line": 85, "column": 1 }
        },
        {
          "name": "unsafe_pop",
          "docstring": "\n Pops the first value from the immutable priority queue.\n \n Panics if the queue is empty.\n # Example\n ```\n let queue = @priority_queue.of([1, 2, 3, 4])\n let first = queue.unsafe_pop()\n assert_eq!(first, @priority_queue.of([1, 2, 3]))\n ```",
          "signature": "fn <a href=\"moonbitlang/core/immut/priority_queue#T\">T</a>::unsafe_pop[A : <a href=\"moonbitlang/core/builtin#Compare\">Compare</a> + <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>](self : <a href=\"moonbitlang/core/immut/priority_queue#T\">T</a>[A]) -> <a href=\"moonbitlang/core/immut/priority_queue#T\">T</a>[A]",
          "loc": { "line": 137, "column": 8 }
        }
      ],
      "impls": [
        {
          "name": "arbitrary",
          "docstring": "",
          "signature": "impl <a href=\"moonbitlang/core/quickcheck#Arbitrary\">@moonbitlang/core/quickcheck.Arbitrary</a> for <a href=\"moonbitlang/core/immut/priority_queue#T\">T</a> with arbitrary[X : <a href=\"moonbitlang/core/quickcheck#Arbitrary\">@moonbitlang/core/quickcheck.Arbitrary</a> + <a href=\"moonbitlang/core/builtin#Compare\">Compare</a> + <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>](size : Int, rs : <a href=\"moonbitlang/core/quickcheck/splitmix#RandomState\">@moonbitlang/core/quickcheck/splitmix.RandomState</a>) -> <a href=\"moonbitlang/core/immut/priority_queue#T\">T</a>[X]",
          "loc": { "line": 228, "column": 83 }
        },
        {
          "name": "hash_combine",
          "docstring": "",
          "signature": "impl <a href=\"moonbitlang/core/builtin#Hash\">Hash</a> for <a href=\"moonbitlang/core/immut/priority_queue#T\">T</a> with hash_combine[A : <a href=\"moonbitlang/core/builtin#Hash\">Hash</a> + <a href=\"moonbitlang/core/builtin#Compare\">Compare</a> + <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>](self : <a href=\"moonbitlang/core/immut/priority_queue#T\">T</a>[A], hasher : <a href=\"moonbitlang/core/builtin#Hasher\">Hasher</a>) -> Unit",
          "loc": { "line": 241, "column": 49 }
        },
        {
          "name": "op_equal",
          "docstring": "",
          "signature": "impl <a href=\"moonbitlang/core/builtin#Eq\">Eq</a> for <a href=\"moonbitlang/core/immut/priority_queue#T\">T</a> with op_equal[A : <a href=\"moonbitlang/core/builtin#Compare\">Compare</a> + <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>](self : <a href=\"moonbitlang/core/immut/priority_queue#T\">T</a>[A], other : <a href=\"moonbitlang/core/immut/priority_queue#T\">T</a>[A]) -> Bool",
          "loc": { "line": 236, "column": 40 }
        },
        {
          "name": "output",
          "docstring": "",
          "signature": "impl <a href=\"moonbitlang/core/builtin#Show\">Show</a> for <a href=\"moonbitlang/core/immut/priority_queue#T\">T</a> with output[A : <a href=\"moonbitlang/core/builtin#Show\">Show</a> + <a href=\"moonbitlang/core/builtin#Compare\">Compare</a> + <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>](self : <a href=\"moonbitlang/core/immut/priority_queue#T\">T</a>[A], logger : <a href=\"moonbitlang/core/builtin#Logger\">Logger</a>) -> Unit",
          "loc": { "line": 219, "column": 49 }
        }
      ]
    }
  ],
  "typealias": [],
  "values": [],
  "misc": [
    {
      "name": "Cont",
      "impls": [],
      "methods": [
        {
          "name": "to_string",
          "docstring": "",
          "signature": "fn <a href=\"moonbitlang/core/immut/priority_queue#Cont\">Cont</a>::to_string[Self : <a href=\"moonbitlang/core/builtin#Show\">Show</a>](self : Self) -> String",
          "loc": { "line": 85, "column": 1 }
        }
      ]
    }
  ]
}