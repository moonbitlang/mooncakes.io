{
  "readme": "",
  "name": "tiye/quaternion/lib",
  "traits": [],
  "types": [
    {
      "name": "QuatError",
      "docstring": "",
      "signature": "pub(all) type! QuatError String\n",
      "loc": { "line": 729, "column": 16 },
      "methods": [],
      "impls": []
    },
    {
      "name": "Quaternion",
      "docstring": " Quaternion {w, x, y, z}",
      "signature": "pub(all) struct Quaternion {\n  w : Float\n  x : Float\n  y : Float\n  z : Float\n}",
      "loc": { "line": 2, "column": 17 },
      "methods": [
        {
          "name": "conjugate",
          "docstring": "\n Returns a new quaternion that is the conjugate of the given quaternion. A\n quaternion conjugate is formed by negating the vector part (x, y, z\n components) while keeping the scalar part (w component) unchanged.\n\n Parameters:\n\n * `self`: The quaternion to be conjugated.\n\n Returns a new quaternion that is the conjugate of the input quaternion.\n\n Example:\n\n ```moonbit\n test \"Quaternion::conjugate\" {\n   let q = Quaternion::{ w: 1.0, x: 2.0, y: 3.0, z: 4.0 }\n   inspect!(\n     q.conjugate(),\n     content=\"Quaternion { w: 1.0, x: -2.0, y: -3.0, z: -4.0 }\",\n   )\n }\n ```",
          "signature": "fn <a href=\"tiye/quaternion/lib#Quaternion\">Quaternion</a>::conjugate(self : <a href=\"tiye/quaternion/lib#Quaternion\">Quaternion</a>) -> <a href=\"tiye/quaternion/lib#Quaternion\">Quaternion</a>",
          "loc": { "line": 304, "column": 20 }
        },
        {
          "name": "conjugate_mut",
          "docstring": "\n Modifies the quaternion in-place by negating its x, y, and z components while\n keeping the w component unchanged. The conjugate of a quaternion represents\n the same rotation in the opposite direction.\n\n Parameters:\n\n * `self`: The quaternion to be modified. The quaternion will be changed\n in-place.\n\n Example:\n\n ```moonbit\n test \"Quaternion::conjugate_mut\" {\n   let q = Quaternion::{ w: 1.0, x: 2.0, y: 3.0, z: 4.0 }\n   q.conjugate_mut()\n   inspect!(q, content=\"Quaternion { w: 1.0, x: -2.0, y: -3.0, z: -4.0 }\")\n }\n ```",
          "signature": "fn <a href=\"tiye/quaternion/lib#Quaternion\">Quaternion</a>::conjugate_mut(self : <a href=\"tiye/quaternion/lib#Quaternion\">Quaternion</a>) -> Unit",
          "loc": { "line": 327, "column": 20 }
        },
        {
          "name": "dot",
          "docstring": "\n Computes the dot product (scalar product) of two quaternions. The dot product\n is calculated as the sum of the products of corresponding components.\n\n Parameters:\n\n * `self` : The first quaternion.\n * `other` : The second quaternion.\n\n Returns a float value representing the dot product of the two quaternions.\n\n Example:\n\n ```moonbit\n test \"Quaternion::dot\" {\n   let q1 = Quaternion::{ w: 1.0, x: 2.0, y: 3.0, z: 4.0 }\n   let q2 = Quaternion::{ w: 2.0, x: 3.0, y: 4.0, z: 5.0 }\n   inspect!(q1.dot(q2), content=\"40.0\")\n }\n ```",
          "signature": "fn <a href=\"tiye/quaternion/lib#Quaternion\">Quaternion</a>::dot(self : <a href=\"tiye/quaternion/lib#Quaternion\">Quaternion</a>, other : <a href=\"tiye/quaternion/lib#Quaternion\">Quaternion</a>) -> Float",
          "loc": { "line": 278, "column": 20 }
        },
        {
          "name": "from_euler_angles",
          "docstring": " Construct a quaternion representing the given euler angle rotations (in radians)\n Notice: this function is not well tested yet",
          "signature": "fn <a href=\"tiye/quaternion/lib#Quaternion\">Quaternion</a>::from_euler_angles(x : Float, y : Float, z : Float) -> <a href=\"tiye/quaternion/lib#Quaternion\">Quaternion</a>",
          "loc": { "line": 3, "column": 20 }
        },
        {
          "name": "from_wxyz",
          "docstring": "",
          "signature": "fn <a href=\"tiye/quaternion/lib#Quaternion\">Quaternion</a>::from_wxyz(arr : <a href=\"moonbitlang/core/array#Array\">Array</a>[Float]) -> <a href=\"tiye/quaternion/lib#Quaternion\">Quaternion</a>!<a href=\"tiye/quaternion/lib#QuatError\">QuatError</a>",
          "loc": { "line": 732, "column": 20 }
        },
        {
          "name": "from_xyzw_array",
          "docstring": " from_xyzw_array",
          "signature": "fn <a href=\"tiye/quaternion/lib#Quaternion\">Quaternion</a>::from_xyzw_array(arr : <a href=\"moonbitlang/core/array#Array\">Array</a>[Float]) -> <a href=\"tiye/quaternion/lib#Quaternion\">Quaternion</a>!<a href=\"tiye/quaternion/lib#QuatError\">QuatError</a>",
          "loc": { "line": 740, "column": 20 }
        },
        {
          "name": "id",
          "docstring": "\n Returns an identity quaternion, which is a quaternion with w=1 and x=y=z=0.\n An identity quaternion represents no rotation in 3D space and acts as a\n multiplicative identity for quaternion multiplication.\n\n Returns a quaternion representing the identity rotation.\n\n Example:\n\n ```moonbit\n test \"Quaternion::id\" {\n   let q = Quaternion::id()\n   inspect!(q, content=\"Quaternion { w: 1.0, x: 0.0, y: 0.0, z: 0.0 }\")\n\n   // demonstrate identity property\n   let p = Quaternion::{ w: 2.0, x: 3.0, y: 4.0, z: 5.0 }\n   inspect!(p * q, content=p.to_string())\n }\n ```",
          "signature": "fn <a href=\"tiye/quaternion/lib#Quaternion\">Quaternion</a>::id() -> <a href=\"tiye/quaternion/lib#Quaternion\">Quaternion</a>",
          "loc": { "line": 114, "column": 20 }
        },
        {
          "name": "inverse",
          "docstring": "\n Returns a new quaternion that represents the multiplicative inverse of the\n input quaternion. The inverse of a quaternion q satisfies q \\* q^(-1) =\n q^(-1) \\* q = 1 (identity quaternion).\n\n Parameters:\n\n * `quaternion`: The input quaternion to be inverted. Must have non-zero\n length.\n\n Returns a new quaternion that is the inverse of the input quaternion.\n\n Example:\n\n ```moonbit\n test \"Quaternion::inverse\" {\n   let q = Quaternion::{ w: 1.0, x: 2.0, y: 3.0, z: 4.0 }\n   let q_inv = q.inverse()\n   inspect!((q * q_inv).roughly_eq(Quaternion::id()), content=\"true\")\n }\n ```",
          "signature": "fn <a href=\"tiye/quaternion/lib#Quaternion\">Quaternion</a>::inverse(self : <a href=\"tiye/quaternion/lib#Quaternion\">Quaternion</a>) -> <a href=\"tiye/quaternion/lib#Quaternion\">Quaternion</a>",
          "loc": { "line": 230, "column": 20 }
        },
        {
          "name": "inverse_mut",
          "docstring": "\n Mutates the quaternion by computing its inverse (reciprocal).\n\n For a quaternion q = w + xi + yj + zk, its inverse is q⁻¹ =\n conjugate(q)/|q|², where |q| is the length of the quaternion.\n\n Parameters:\n\n * `self`: The quaternion to be inverted in-place.\n\n Example:\n\n ```moonbit\n test \"Quaternion::inverse_mut\" {\n   let q = Quaternion::{ w: 2.0, x: 0.0, y: 0.0, z: 0.0 }\n   q.inverse_mut()\n   inspect!(q, content=\"Quaternion { w: 0.5, x: 0.0, y: 0.0, z: 0.0 }\")\n }\n ```",
          "signature": "fn <a href=\"tiye/quaternion/lib#Quaternion\">Quaternion</a>::inverse_mut(self : <a href=\"tiye/quaternion/lib#Quaternion\">Quaternion</a>) -> Unit",
          "loc": { "line": 253, "column": 20 }
        },
        {
          "name": "length",
          "docstring": "\n Computes the Euclidean length (magnitude) of a quaternion by taking the\n square root of the sum of squares of its components.\n\n Parameters:\n\n * `quaternion`: The quaternion whose length is to be computed.\n\n Returns a floating-point number representing the length of the quaternion.\n\n Example:\n\n ```moonbit\n test \"Quaternion::length\" {\n   let q = Quaternion::{ w: 1.0, x: 2.0, y: 2.0, z: 1.0 }\n   inspect!(q.length(), content=\"3.316624790355399\")\n }\n ```",
          "signature": "fn <a href=\"tiye/quaternion/lib#Quaternion\">Quaternion</a>::length(self : <a href=\"tiye/quaternion/lib#Quaternion\">Quaternion</a>) -> Float",
          "loc": { "line": 373, "column": 20 }
        },
        {
          "name": "new",
          "docstring": "\n Creates a new quaternion with optional components. If any component is not\n provided, it defaults to 0.0.\n\n Parameters:\n\n * `w` : The scalar (real) component of the quaternion. Defaults to 0.0.\n * `x` : The first vector (imaginary) component of the quaternion. Defaults to\n 0.0.\n * `y` : The second vector (imaginary) component of the quaternion. Defaults\n to 0.0.\n * `z` : The third vector (imaginary) component of the quaternion. Defaults to\n 0.0.\n\n Returns a new `Quaternion` instance with the specified or default components.\n\n Example:\n\n ```moonbit\n test \"Quaternion::new\" {\n   let q1 = Quaternion::new()\n   let q2 = Quaternion::new(w=1.0, x=2.0)\n   inspect!(q1, content=\"Quaternion { w: 0.0, x: 0.0, y: 0.0, z: 0.0 }\")\n   inspect!(q2, content=\"Quaternion { w: 1.0, x: 2.0, y: 0.0, z: 0.0 }\")\n }\n ```",
          "signature": "fn <a href=\"tiye/quaternion/lib#Quaternion\">Quaternion</a>::new(w? : Float, x? : Float, y? : Float, z? : Float) -> <a href=\"tiye/quaternion/lib#Quaternion\">Quaternion</a>",
          "loc": { "line": 144, "column": 20 }
        },
        {
          "name": "normalize",
          "docstring": "",
          "signature": "fn <a href=\"tiye/quaternion/lib#Quaternion\">Quaternion</a>::normalize(self : <a href=\"tiye/quaternion/lib#Quaternion\">Quaternion</a>) -> <a href=\"tiye/quaternion/lib#Quaternion\">Quaternion</a>",
          "loc": { "line": 748, "column": 20 }
        },
        {
          "name": "normalize_mut",
          "docstring": " normalize mutable",
          "signature": "fn <a href=\"tiye/quaternion/lib#Quaternion\">Quaternion</a>::normalize_mut(self : <a href=\"tiye/quaternion/lib#Quaternion\">Quaternion</a>) -> Unit!<a href=\"tiye/quaternion/lib#QuatError\">QuatError</a>",
          "loc": { "line": 757, "column": 20 }
        },
        {
          "name": "op_add",
          "docstring": "\n Adds two quaternions component-wise.\n\n Parameters:\n\n * `self` : The first quaternion.\n * `other` : The second quaternion.\n\n Returns a new quaternion where each component is the sum of the corresponding\n components of the input quaternions.\n\n Example:\n\n ```moonbit\n test \"Quaternion::op_add\" {\n   let q1 = Quaternion::{ w: 1.0, x: 2.0, y: 3.0, z: 4.0 }\n   let q2 = Quaternion::{ w: 5.0, x: 6.0, y: 7.0, z: 8.0 }\n   inspect!(q1 + q2, content=\"Quaternion { w: 6.0, x: 8.0, y: 10.0, z: 12.0 }\")\n }\n ```",
          "signature": "fn <a href=\"tiye/quaternion/lib#Quaternion\">Quaternion</a>::op_add(self : <a href=\"tiye/quaternion/lib#Quaternion\">Quaternion</a>, other : <a href=\"tiye/quaternion/lib#Quaternion\">Quaternion</a>) -> <a href=\"tiye/quaternion/lib#Quaternion\">Quaternion</a>",
          "loc": { "line": 464, "column": 20 }
        },
        {
          "name": "op_add_assign",
          "docstring": "\n Performs in-place addition of two quaternions by adding their corresponding\n components.\n\n Parameters:\n\n * `self` : The quaternion to be modified.\n * `other` : The quaternion to be added to `self`.\n\n Example:\n\n ```moonbit\n test \"Quaternion::op_add_assign\" {\n   let q1 = Quaternion::{ w: 1.0, x: 2.0, y: 3.0, z: 4.0 }\n   let q2 = Quaternion::{ w: 5.0, x: 6.0, y: 7.0, z: 8.0 }\n   q1.op_add_assign(q2)\n   inspect!(q1, content=\"Quaternion { w: 6.0, x: 8.0, y: 10.0, z: 12.0 }\")\n }\n ```",
          "signature": "fn <a href=\"tiye/quaternion/lib#Quaternion\">Quaternion</a>::op_add_assign(self : <a href=\"tiye/quaternion/lib#Quaternion\">Quaternion</a>, other : <a href=\"tiye/quaternion/lib#Quaternion\">Quaternion</a>) -> Unit",
          "loc": { "line": 492, "column": 20 }
        },
        {
          "name": "op_div",
          "docstring": "\n Divides two quaternions by multiplying the first quaternion with the inverse\n of the second quaternion.\n\n Parameters:\n\n * `self` : The dividend quaternion.\n * `divisor` : The quaternion to divide by.\n\n Returns a new quaternion representing the quotient of the division operation.\n\n Example:\n\n ```moonbit\n test \"Quaternion::op_div\" {\n   let a = Quaternion::{ w: 1.0, x: 0.0, y: 0.0, z: 0.0 }\n   let b = Quaternion::{ w: 2.0, x: 0.0, y: 0.0, z: 0.0 }\n   let result = a / b\n   inspect!(result, content=\"Quaternion { w: 0.5, x: 0.0, y: 0.0, z: 0.0 }\")\n }\n ```",
          "signature": "fn <a href=\"tiye/quaternion/lib#Quaternion\">Quaternion</a>::op_div(self : <a href=\"tiye/quaternion/lib#Quaternion\">Quaternion</a>, b : <a href=\"tiye/quaternion/lib#Quaternion\">Quaternion</a>) -> <a href=\"tiye/quaternion/lib#Quaternion\">Quaternion</a>",
          "loc": { "line": 597, "column": 20 }
        },
        {
          "name": "op_eq",
          "docstring": "\n Determines whether two quaternions are approximately equal by comparing their\n squared difference with a small epsilon value. This method is necessary\n because direct floating-point comparisons may not work correctly due to\n numerical precision issues.\n\n Parameters:\n\n * `self`: The first quaternion to compare.\n * `other`: The second quaternion to compare.\n\n Returns `true` if the squared distance between the two quaternions is less\n than the epsilon value (which is the reciprocal of the maximum representable\n float value), `false` otherwise.\n\n Example:\n\n ```moonbit\n test \"Quaternion::op_eq\" {\n   let q1 = Quaternion::{ w: 1.0, x: 0.0, y: 0.0, z: 0.0 }\n   let q2 = Quaternion::{ w: 1.0, x: 0.0000000001, y: 0.0, z: 0.0 }\n   inspect!(q1.op_eq(q2), content=\"true\")\n }\n ```",
          "signature": "fn <a href=\"tiye/quaternion/lib#Quaternion\">Quaternion</a>::op_eq(self : <a href=\"tiye/quaternion/lib#Quaternion\">Quaternion</a>, other : <a href=\"tiye/quaternion/lib#Quaternion\">Quaternion</a>) -> Bool",
          "loc": { "line": 409, "column": 20 }
        },
        {
          "name": "op_mul",
          "docstring": "\n Performs quaternion multiplication (Hamilton product) of two quaternions. The\n operation is non-commutative, meaning `a * b` is not necessarily equal to `b\n * a`. This operation can be used to combine rotations represented by\n quaternions.\n\n Parameters:\n\n * `self`: The first quaternion operand.\n * `other`: The second quaternion operand.\n\n Returns a new quaternion representing the product of the multiplication.\n\n Example:\n\n ```moonbit\n test \"Quaternion::op_mul\" {\n   let q1 = Quaternion::{ w: 1.0, x: 0.0, y: 0.0, z: 0.0 }\n   let q2 = Quaternion::{ w: 0.0, x: 1.0, y: 0.0, z: 0.0 }\n   let result = q1 * q2\n   inspect!(result, content=\"Quaternion { w: 0.0, x: 1.0, y: 0.0, z: 0.0 }\")\n }\n ```",
          "signature": "fn <a href=\"tiye/quaternion/lib#Quaternion\">Quaternion</a>::op_mul(self : <a href=\"tiye/quaternion/lib#Quaternion\">Quaternion</a>, other : <a href=\"tiye/quaternion/lib#Quaternion\">Quaternion</a>) -> <a href=\"tiye/quaternion/lib#Quaternion\">Quaternion</a>",
          "loc": { "line": 522, "column": 20 }
        },
        {
          "name": "op_mul_assign",
          "docstring": "\n Performs in-place multiplication of two quaternions using the Hamilton\n product rule. The result is stored in the first quaternion.\n\n Parameters:\n\n * `self`: The quaternion to be modified.\n * `other`: The quaternion to multiply with.\n\n Example:\n\n ```moonbit\n test \"Quaternion::op_mul_assign\" {\n   let q1 = Quaternion::{ w: 1.0, x: 2.0, y: 3.0, z: 4.0 }\n   let q2 = Quaternion::{ w: 2.0, x: -1.0, y: -2.0, z: -3.0 }\n   q1.op_mul_assign(q2)\n   inspect!(\n     q1.to_string(),\n     content=\"Quaternion { w: 12.0, x: 1.0, y: 0.0, z: -1.0 }\",\n   )\n }\n ```",
          "signature": "fn <a href=\"tiye/quaternion/lib#Quaternion\">Quaternion</a>::op_mul_assign(self : <a href=\"tiye/quaternion/lib#Quaternion\">Quaternion</a>, other : <a href=\"tiye/quaternion/lib#Quaternion\">Quaternion</a>) -> Unit",
          "loc": { "line": 553, "column": 20 }
        },
        {
          "name": "op_neg",
          "docstring": "\n Returns a new quaternion with all components negated. Equivalent to\n multiplying all components by -1.\n\n Parameters:\n\n * `quaternion`: The quaternion to be negated.\n\n Returns a new quaternion where each component (w, x, y, z) is the negation of\n the corresponding component in the input quaternion.\n\n Example:\n\n ```moonbit\n test \"Quaternion::op_neg\" {\n   let q = Quaternion::{ w: 1.0, x: 2.0, y: 3.0, z: 4.0 }\n   inspect!(\n     q.op_neg(),\n     content=\"Quaternion { w: -1.0, x: -2.0, y: -3.0, z: -4.0 }\",\n   )\n }\n ```",
          "signature": "fn <a href=\"tiye/quaternion/lib#Quaternion\">Quaternion</a>::op_neg(self : <a href=\"tiye/quaternion/lib#Quaternion\">Quaternion</a>) -> <a href=\"tiye/quaternion/lib#Quaternion\">Quaternion</a>",
          "loc": { "line": 679, "column": 20 }
        },
        {
          "name": "op_sub",
          "docstring": "\n Performs element-wise subtraction of two quaternions.\n\n Parameters:\n\n * `self`: The minuend quaternion.\n * `other`: The subtrahend quaternion.\n\n Returns a new quaternion where each component is the difference of the\n corresponding components of the input quaternions.\n\n Example:\n\n ```moonbit\n test \"Quaternion::op_sub\" {\n   let q1 = Quaternion::{ w: 1.0, x: 2.0, y: 3.0, z: 4.0 }\n   let q2 = Quaternion::{ w: 0.5, x: 1.0, y: 1.5, z: 2.0 }\n   let result = q1 - q2\n   inspect!(result, content=\"Quaternion { w: 0.5, x: 1.0, y: 1.5, z: 2.0 }\")\n }\n ```",
          "signature": "fn <a href=\"tiye/quaternion/lib#Quaternion\">Quaternion</a>::op_sub(self : <a href=\"tiye/quaternion/lib#Quaternion\">Quaternion</a>, other : <a href=\"tiye/quaternion/lib#Quaternion\">Quaternion</a>) -> <a href=\"tiye/quaternion/lib#Quaternion\">Quaternion</a>",
          "loc": { "line": 622, "column": 20 }
        },
        {
          "name": "op_sub_assign",
          "docstring": "\n Subtracts another quaternion from this quaternion in place, modifying the\n original quaternion.\n\n Parameters:\n\n * `self` : The quaternion to be modified.\n * `other` : The quaternion to subtract from `self`.\n\n Example:\n\n ```moonbit\n test \"Quaternion::op_sub_assign\" {\n   let q1 = Quaternion::{ w: 2.0, x: 3.0, y: 4.0, z: 5.0 }\n   let q2 = Quaternion::{ w: 1.0, x: 1.0, y: 1.0, z: 1.0 }\n   q1.op_sub_assign(q2)\n   inspect!(q1, content=\"Quaternion { w: 1.0, x: 2.0, y: 3.0, z: 4.0 }\")\n }\n ```",
          "signature": "fn <a href=\"tiye/quaternion/lib#Quaternion\">Quaternion</a>::op_sub_assign(self : <a href=\"tiye/quaternion/lib#Quaternion\">Quaternion</a>, other : <a href=\"tiye/quaternion/lib#Quaternion\">Quaternion</a>) -> Unit",
          "loc": { "line": 650, "column": 20 }
        },
        {
          "name": "roughly_eq",
          "docstring": "\n Determines if two quaternions are approximately equal within a specified\n epsilon value.\n\n Parameters:\n\n * `self`: The first quaternion to compare.\n * `other`: The second quaternion to compare.\n * `epsilon`: Optional threshold value for comparison. Defaults to\n 0.00000000001 if not provided.\n\n Returns true if the squared difference between the two quaternions is less\n than the epsilon value, false otherwise.\n\n Example:\n\n ```moonbit\n test \"Quaternion::roughly_eq\" {\n   let q1 = Quaternion::{ w: 1.0, x: 0.0, y: 0.0, z: 0.0 }\n   let q2 = Quaternion::{ w: 0.9999999999, x: 0.0, y: 0.0, z: 0.0 }\n   inspect!(q1.roughly_eq(q2), content=\"true\")\n }\n ```",
          "signature": "fn <a href=\"tiye/quaternion/lib#Quaternion\">Quaternion</a>::roughly_eq(self : <a href=\"tiye/quaternion/lib#Quaternion\">Quaternion</a>, other : <a href=\"tiye/quaternion/lib#Quaternion\">Quaternion</a>, epsilon? : Float) -> Bool",
          "loc": { "line": 436, "column": 20 }
        },
        {
          "name": "scale",
          "docstring": "\n Performs element-wise multiplication of a quaternion with a scalar value,\n producing a new quaternion.\n\n Parameters:\n\n * `self`: The quaternion to be scaled.\n * `scalar`: A floating-point value to scale the quaternion with.\n\n Returns a new quaternion where each component (w, x, y, z) is multiplied by\n the scalar value.\n\n Example:\n\n ```moonbit\n test \"Quaternion::scale\" {\n   let q = Quaternion::{ w: 1.0, x: 2.0, y: 3.0, z: 4.0 }\n   let scaled = q.scale(2.0)\n   inspect!(scaled, content=\"Quaternion { w: 2.0, x: 4.0, y: 6.0, z: 8.0 }\")\n }\n ```",
          "signature": "fn <a href=\"tiye/quaternion/lib#Quaternion\">Quaternion</a>::scale(self : <a href=\"tiye/quaternion/lib#Quaternion\">Quaternion</a>, t : Float) -> <a href=\"tiye/quaternion/lib#Quaternion\">Quaternion</a>",
          "loc": { "line": 179, "column": 20 }
        },
        {
          "name": "scale_mut",
          "docstring": "\n Scales a quaternion by multiplying each component with a scalar value\n in-place.\n\n Parameters:\n\n * `self` : The quaternion to be scaled.\n * `scalar` : The scaling factor to multiply with each component of the\n quaternion.\n\n Example:\n\n ```moonbit\n test \"Quaternion::scale_mut\" {\n   let q = Quaternion::{ w: 1.0, x: 2.0, y: 3.0, z: 4.0 }\n   q.scale_mut(2.0)\n   inspect!(q, content=\"Quaternion { w: 2.0, x: 4.0, y: 6.0, z: 8.0 }\")\n }\n ```",
          "signature": "fn <a href=\"tiye/quaternion/lib#Quaternion\">Quaternion</a>::scale_mut(self : <a href=\"tiye/quaternion/lib#Quaternion\">Quaternion</a>, t : Float) -> Unit",
          "loc": { "line": 202, "column": 20 }
        },
        {
          "name": "square_length",
          "docstring": "\n Computes the squared length (or squared norm) of a quaternion by summing up\n the squares of its components (w² + x² + y² + z²).\n\n Parameters:\n\n * `quaternion`: The quaternion whose squared length is to be computed.\n\n Returns the squared length of the quaternion as a floating-point number.\n\n Example:\n\n ```moonbit\n test \"Quaternion::square_length\" {\n   let q = Quaternion::{ w: 1.0, x: 2.0, y: 2.0, z: 1.0 }\n   inspect!(q.square_length(), content=\"10.0\")\n }\n ```",
          "signature": "fn <a href=\"tiye/quaternion/lib#Quaternion\">Quaternion</a>::square_length(self : <a href=\"tiye/quaternion/lib#Quaternion\">Quaternion</a>) -> Float",
          "loc": { "line": 351, "column": 20 }
        },
        {
          "name": "to_string",
          "docstring": "\n Converts a quaternion to its string representation in the format \"Quaternion\n { w: <w>, x: <x>, y: <y>, z: <z> }\".\n\n Parameters:\n\n * `quaternion`: The quaternion to be converted to string.\n\n Returns a string representation of the quaternion.\n\n Example:\n\n ```moonbit\n test \"Quaternion::to_string\" {\n   let q = Quaternion::{ w: 1.0, x: 2.0, y: 3.0, z: 4.0 }\n   inspect!(\n     q.to_string(),\n     content=\"Quaternion { w: 1.0, x: 2.0, y: 3.0, z: 4.0 }\",\n   )\n }\n ```",
          "signature": "fn <a href=\"tiye/quaternion/lib#Quaternion\">Quaternion</a>::to_string(self : <a href=\"tiye/quaternion/lib#Quaternion\">Quaternion</a>) -> String",
          "loc": { "line": 31, "column": 20 }
        },
        {
          "name": "to_wxyz",
          "docstring": "\n Converts a quaternion to an array of floats in the order \\[w, x, y, z].\n\n Parameters:\n\n * `self`: The quaternion to be converted.\n\n Returns an array of four floating-point numbers representing the components\n of the quaternion.\n\n Example:\n\n ```moonbit\n test \"Quaternion::to_array\" {\n   let q = Quaternion::{ w: 1.0, x: 2.0, y: 3.0, z: 4.0 }\n   inspect!(q.to_array(), content=\"[1.0, 2.0, 3.0, 4.0]\")\n }\n ```",
          "signature": "fn <a href=\"tiye/quaternion/lib#Quaternion\">Quaternion</a>::to_wxyz(self : <a href=\"tiye/quaternion/lib#Quaternion\">Quaternion</a>) -> <a href=\"moonbitlang/core/array#Array\">Array</a>[Float]",
          "loc": { "line": 701, "column": 20 }
        },
        {
          "name": "to_xyzw",
          "docstring": "\n Converts a quaternion to an array of floats in the order \\[x, y, z, w], which\n is a common format used in graphics programming.\n\n Parameters:\n\n * `self`: The quaternion to be converted.\n\n Returns an array of four floating-point numbers representing the components\n of the quaternion in XYZW order.\n\n Example:\n\n ```moonbit\n test \"Quaternion::to_xyzw\" {\n   let q = Quaternion::{ w: 1.0, x: 2.0, y: 3.0, z: 4.0 }\n   inspect!(q.to_xyzw(), content=\"[2.0, 3.0, 4.0, 1.0]\")\n }\n ```",
          "signature": "fn <a href=\"tiye/quaternion/lib#Quaternion\">Quaternion</a>::to_xyzw(self : <a href=\"tiye/quaternion/lib#Quaternion\">Quaternion</a>) -> <a href=\"moonbitlang/core/array#Array\">Array</a>[Float]",
          "loc": { "line": 724, "column": 20 }
        }
      ],
      "impls": [
        {
          "docstring": "",
          "signature": "impl <a href=\"moonbitlang/core/builtin#Default\">Default</a> for <a href=\"tiye/quaternion/lib#Quaternion\">Quaternion</a>",
          "methods": [
            {
              "name": "default",
              "docstring": "",
              "signature": "fn default() -> <a href=\"tiye/quaternion/lib#Quaternion\">Quaternion</a>",
              "loc": { "line": 378, "column": 38 }
            }
          ],
          "loc": { "line": 378, "column": 1 }
        },
        {
          "docstring": "",
          "signature": "impl <a href=\"moonbitlang/core/builtin#Eq\">Eq</a> for <a href=\"tiye/quaternion/lib#Quaternion\">Quaternion</a>",
          "methods": [
            {
              "name": "op_equal",
              "docstring": "automatically derived",
              "signature": "fn op_equal(<a href=\"tiye/quaternion/lib#Quaternion\">Quaternion</a>, <a href=\"tiye/quaternion/lib#Quaternion\">Quaternion</a>) -> Bool",
              "loc": { "line": 7, "column": 10 }
            }
          ],
          "loc": { "line": 7, "column": 10 }
        },
        {
          "docstring": "",
          "signature": "impl <a href=\"moonbitlang/core/builtin#Show\">Show</a> for <a href=\"tiye/quaternion/lib#Quaternion\">Quaternion</a>",
          "methods": [
            {
              "name": "output",
              "docstring": "",
              "signature": "fn output(self : <a href=\"tiye/quaternion/lib#Quaternion\">Quaternion</a>, logger : <a href=\"moonbitlang/core/builtin#Logger\">Logger</a>) -> Unit",
              "loc": { "line": 36, "column": 35 }
            }
          ],
          "loc": { "line": 36, "column": 1 }
        }
      ]
    }
  ],
  "typealias": [],
  "values": [
    {
      "name": "max_value",
      "docstring": "",
      "signature": "let max_value : Float",
      "loc": { "line": 383, "column": 9 }
    },
    {
      "name": "q",
      "docstring": "\n Creates a new quaternion with the given components. This is a shorter\n alternative to using the `Quaternion` constructor directly.\n\n Parameters:\n\n * `w` : The scalar (real) component of the quaternion.\n * `x` : The first vector (imaginary) component of the quaternion.\n * `y` : The second vector (imaginary) component of the quaternion.\n * `z` : The third vector (imaginary) component of the quaternion.\n\n Returns a new `Quaternion` instance with the specified components.\n\n Example:\n\n ```moonbit\n test \"q\" {\n   let quaternion = q(1.0, 2.0, 3.0, 4.0)\n   inspect!(\n     quaternion.to_string(),\n     content=\"Quaternion { w: 1.0, x: 2.0, y: 3.0, z: 4.0 }\",\n   )\n }\n ```",
      "signature": "fn q(w : Float, x : Float, y : Float, z : Float) -> <a href=\"tiye/quaternion/lib#Quaternion\">Quaternion</a>",
      "loc": { "line": 64, "column": 8 }
    },
    {
      "name": "qi",
      "docstring": "\n Creates a quaternion from four integer components by converting them to\n floating-point numbers. Serves as a convenient shortcut when working with\n integer values.\n\n Parameters:\n\n * `w` : The real (scalar) component of the quaternion.\n * `x` : The first imaginary component (i coefficient).\n * `y` : The second imaginary component (j coefficient).\n * `z` : The third imaginary component (k coefficient).\n\n Returns a new quaternion with the integer components converted to\n floating-point numbers.\n\n Example:\n\n ```moonbit\n test \"qi\" {\n   let quaternion = qi(1, 2, 3, 4)\n   inspect!(quaternion, content=\"Quaternion { w: 1.0, x: 2.0, y: 3.0, z: 4.0 }\")\n }\n ```",
      "signature": "fn qi(w : Int, x : Int, y : Int, z : Int) -> <a href=\"tiye/quaternion/lib#Quaternion\">Quaternion</a>",
      "loc": { "line": 91, "column": 8 }
    }
  ],
  "misc": []
}