{
  "readme": "# gmlewis/crc32\n[![check](https://github.com/gmlewis/moonbit-crc32/actions/workflows/check.yml/badge.svg)](https://github.com/gmlewis/moonbit-crc32/actions/workflows/check.yml)\n\nThis is a simple crc32 hash algorithm based on the Go Rosetta Stone implementation found here:\nhttps://rosettacode.org/wiki/CRC-32\nwhich has the copyright notice:\n\n```\nContent is available under GNU Free Document License 1.3 unless otherwise noted.\n```\n\n## Status\n\nThe code has been updated to support compiler:\n\n```bash\n$ moon version --all\nmoon 0.1.20241216 (b57ed1c 2024-12-16) ~/.moon/bin/moon\nmoonc v0.1.20241216+68e710374 ~/.moon/bin/moonc\nmoonrun 0.1.20241216 (b57ed1c 2024-12-16) ~/.moon/bin/moonrun\n```\n\nUse `moonup` to manage `moon` compiler versions:\nhttps://github.com/chawyehsu/moonup\n",
  "name": "gmlewis/crc32",
  "traits": [
    {
      "name": "@gmlewis/crc32.HashFunc",
      "docstring": " `HashFunc` represents a hash algorithm like `@crc32`, `@md5`, or `@sha256`.",
      "signature": "pub(open) trait @gmlewis/crc32.HashFunc {\n  name(Self) -> String\n  write(Self, Byte) -> Unit\n  check_sum(Self) -> String\n}",
      "loc": { "line": 2, "column": 1 },
      "default_impls": [],
      "impls": []
    }
  ],
  "types": [
    {
      "name": "Digest",
      "docstring": " `@crc32.Digest` implements the 32-bit cyclic redundancy check, or CRC-32,\n checksum. See https://en.wikipedia.org/wiki/Cyclic_redundancy_check for\n information.\n This package is based on the Go Rosetta Stone implementation found here:\n https://rosettacode.org/wiki/CRC-32",
      "signature": "pub(all) struct Digest {\n  crc : UInt\n  name : String\n}",
      "loc": { "line": 6, "column": 17 },
      "methods": [
        {
          "name": "check_sum",
          "docstring": " `check_sum` returns the final crc32 as a hex string.",
          "signature": "fn <a href=\"gmlewis/crc32#Digest\">Digest</a>::check_sum(self : <a href=\"gmlewis/crc32#Digest\">Digest</a>) -> String",
          "loc": { "line": 30, "column": 8 }
        },
        {
          "name": "digest",
          "docstring": " `digest` returns the final crc32 as a UInt.",
          "signature": "fn <a href=\"gmlewis/crc32#Digest\">Digest</a>::digest(self : <a href=\"gmlewis/crc32#Digest\">Digest</a>) -> UInt",
          "loc": { "line": 25, "column": 8 }
        },
        {
          "name": "name",
          "docstring": "",
          "signature": "fn <a href=\"gmlewis/crc32#Digest\">Digest</a>::name(self : <a href=\"gmlewis/crc32#Digest\">Digest</a>) -> String",
          "loc": { "line": 20, "column": 8 }
        },
        {
          "name": "new",
          "docstring": " `Digest::new` returns a new, reset Digest, ready to sum.",
          "signature": "fn <a href=\"gmlewis/crc32#Digest\">Digest</a>::new() -> <a href=\"gmlewis/crc32#Digest\">Digest</a>",
          "loc": { "line": 12, "column": 16 }
        },
        {
          "name": "write",
          "docstring": " `write` writes a byte to the digest.",
          "signature": "fn <a href=\"gmlewis/crc32#Digest\">Digest</a>::write(self : <a href=\"gmlewis/crc32#Digest\">Digest</a>, b : Byte) -> Unit",
          "loc": { "line": 55, "column": 8 }
        }
      ],
      "impls": []
    }
  ],
  "typealias": [],
  "values": [],
  "misc": []
}