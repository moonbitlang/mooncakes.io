{
  "readme": "",
  "name": "moonbitlang/core/builtin",
  "traits": [
    {
      "name": "Compare",
      "docstring": "\n Trait for types whose elements are ordered\n\n The return value of [compare] is:\n - zero, if the two arguments are equal\n - negative, if the first argument is smaller\n - positive, if the first argument is greater",
      "signature": "pub(open) trait Compare : <a href=\"moonbitlang/core/builtin#Eq\">Eq</a> {\n  compare(Self, Self) -> Int\n}",
      "loc": { "line": 28, "column": 1 },
      "default_impls": [],
      "impls": []
    },
    {
      "name": "Default",
      "docstring": "\n Trait for types with a default value",
      "signature": "pub(open) trait Default {\n  default() -> Self\n}",
      "loc": { "line": 48, "column": 1 },
      "default_impls": [],
      "impls": []
    },
    {
      "name": "Eq",
      "docstring": "\n Trait for types whose elements can test for equality",
      "signature": "pub(open) trait Eq {\n  op_equal(Self, Self) -> Bool\n}",
      "loc": { "line": 17, "column": 1 },
      "default_impls": [],
      "impls": []
    },
    {
      "name": "Hash",
      "docstring": "\n Trait for types that can be hashed",
      "signature": "pub(open) trait Hash {\n  hash_combine(Self, <a href=\"moonbitlang/core/builtin#Hasher\">Hasher</a>) -> Unit\n  hash(Self) -> Int\n}",
      "loc": { "line": 34, "column": 1 },
      "default_impls": [
        {
          "name": "hash",
          "docstring": "",
          "signature": "impl <a href=\"moonbitlang/core/builtin#Hash\">Hash</a> with hash(self : Self) -> Int",
          "loc": { "line": 40, "column": 1 }
        }
      ],
      "impls": [
        {
          "docstring": "",
          "signature": "impl <a href=\"moonbitlang/core/builtin#Hash\">Hash</a> for Byte",
          "methods": [
            {
              "name": "hash",
              "docstring": "",
              "signature": "fn hash(self : Byte) -> Int",
              "loc": { "line": 122, "column": 29 }
            },
            {
              "name": "hash_combine",
              "docstring": "",
              "signature": "fn hash_combine(self : Byte, hasher : <a href=\"moonbitlang/core/builtin#Hasher\">Hasher</a>) -> Unit",
              "loc": { "line": 125, "column": 29 }
            }
          ],
          "loc": { "line": 122, "column": 1 }
        },
        {
          "docstring": "",
          "signature": "impl <a href=\"moonbitlang/core/builtin#Hash\">Hash</a> for Int",
          "methods": [
            {
              "name": "hash",
              "docstring": "",
              "signature": "fn hash(self : Int) -> Int",
              "loc": { "line": 176, "column": 28 }
            },
            {
              "name": "hash_combine",
              "docstring": "",
              "signature": "fn hash_combine(self : Int, hasher : <a href=\"moonbitlang/core/builtin#Hasher\">Hasher</a>) -> Unit",
              "loc": { "line": 189, "column": 28 }
            }
          ],
          "loc": { "line": 176, "column": 1 }
        },
        {
          "docstring": "",
          "signature": "impl <a href=\"moonbitlang/core/builtin#Hash\">Hash</a> for UInt",
          "methods": [
            {
              "name": "hash_combine",
              "docstring": "",
              "signature": "fn hash_combine(self : UInt, hasher : <a href=\"moonbitlang/core/builtin#Hasher\">Hasher</a>) -> Unit",
              "loc": { "line": 194, "column": 29 }
            }
          ],
          "loc": { "line": 194, "column": 1 }
        },
        {
          "docstring": "",
          "signature": "impl <a href=\"moonbitlang/core/builtin#Hash\">Hash</a> for UInt64",
          "methods": [
            {
              "name": "hash_combine",
              "docstring": "",
              "signature": "fn hash_combine(self : UInt64, hasher : <a href=\"moonbitlang/core/builtin#Hasher\">Hasher</a>) -> Unit",
              "loc": { "line": 199, "column": 31 }
            }
          ],
          "loc": { "line": 199, "column": 1 }
        },
        {
          "docstring": "",
          "signature": "impl <a href=\"moonbitlang/core/builtin#Hash\">Hash</a> for String",
          "methods": [
            {
              "name": "hash_combine",
              "docstring": "",
              "signature": "fn hash_combine(self : String, hasher : <a href=\"moonbitlang/core/builtin#Hasher\">Hasher</a>) -> Unit",
              "loc": { "line": 170, "column": 31 }
            }
          ],
          "loc": { "line": 170, "column": 1 }
        },
        {
          "docstring": "",
          "signature": "impl[X : <a href=\"moonbitlang/core/builtin#Hash\">Hash</a>] <a href=\"moonbitlang/core/builtin#Hash\">Hash</a> for X?",
          "methods": [
            {
              "name": "hash_combine",
              "docstring": "",
              "signature": "fn hash_combine[X : <a href=\"moonbitlang/core/builtin#Hash\">Hash</a>](self : X?, hasher : <a href=\"moonbitlang/core/builtin#Hasher\">Hasher</a>) -> Unit",
              "loc": { "line": 204, "column": 37 }
            }
          ],
          "loc": { "line": 204, "column": 1 }
        },
        {
          "docstring": "",
          "signature": "impl[T : <a href=\"moonbitlang/core/builtin#Hash\">Hash</a>, E : <a href=\"moonbitlang/core/builtin#Hash\">Hash</a>] <a href=\"moonbitlang/core/builtin#Hash\">Hash</a> for <a href=\"moonbitlang/core/result#Result\">Result</a>[T, E]",
          "methods": [
            {
              "name": "hash_combine",
              "docstring": "",
              "signature": "fn hash_combine[T : <a href=\"moonbitlang/core/builtin#Hash\">Hash</a>, E : <a href=\"moonbitlang/core/builtin#Hash\">Hash</a>](self : <a href=\"moonbitlang/core/result#Result\">Result</a>[T, E], hasher : <a href=\"moonbitlang/core/builtin#Hasher\">Hasher</a>) -> Unit",
              "loc": { "line": 212, "column": 57 }
            }
          ],
          "loc": { "line": 212, "column": 1 }
        },
        {
          "docstring": "",
          "signature": "impl[A : <a href=\"moonbitlang/core/builtin#Hash\">Hash</a>, B : <a href=\"moonbitlang/core/builtin#Hash\">Hash</a>] <a href=\"moonbitlang/core/builtin#Hash\">Hash</a> for (A, B)",
          "methods": [
            {
              "name": "hash_combine",
              "docstring": "",
              "signature": "fn hash_combine[A : <a href=\"moonbitlang/core/builtin#Hash\">Hash</a>, B : <a href=\"moonbitlang/core/builtin#Hash\">Hash</a>](self : (A, B), hasher : <a href=\"moonbitlang/core/builtin#Hasher\">Hasher</a>) -> Unit",
              "loc": { "line": 16, "column": 51 }
            }
          ],
          "loc": { "line": 16, "column": 1 }
        },
        {
          "docstring": "",
          "signature": "impl[A : <a href=\"moonbitlang/core/builtin#Hash\">Hash</a>, B : <a href=\"moonbitlang/core/builtin#Hash\">Hash</a>, C : <a href=\"moonbitlang/core/builtin#Hash\">Hash</a>] <a href=\"moonbitlang/core/builtin#Hash\">Hash</a> for (A, B, C)",
          "methods": [
            {
              "name": "hash_combine",
              "docstring": "",
              "signature": "fn hash_combine[A : <a href=\"moonbitlang/core/builtin#Hash\">Hash</a>, B : <a href=\"moonbitlang/core/builtin#Hash\">Hash</a>, C : <a href=\"moonbitlang/core/builtin#Hash\">Hash</a>](self : (A, B, C), hasher : <a href=\"moonbitlang/core/builtin#Hasher\">Hasher</a>) -> Unit",
              "loc": { "line": 22, "column": 64 }
            }
          ],
          "loc": { "line": 22, "column": 1 }
        },
        {
          "docstring": "",
          "signature": "impl[A : <a href=\"moonbitlang/core/builtin#Hash\">Hash</a>, B : <a href=\"moonbitlang/core/builtin#Hash\">Hash</a>, C : <a href=\"moonbitlang/core/builtin#Hash\">Hash</a>, D : <a href=\"moonbitlang/core/builtin#Hash\">Hash</a>] <a href=\"moonbitlang/core/builtin#Hash\">Hash</a> for (A, B, C, D)",
          "methods": [
            {
              "name": "hash_combine",
              "docstring": "",
              "signature": "fn hash_combine[A : <a href=\"moonbitlang/core/builtin#Hash\">Hash</a>, B : <a href=\"moonbitlang/core/builtin#Hash\">Hash</a>, C : <a href=\"moonbitlang/core/builtin#Hash\">Hash</a>, D : <a href=\"moonbitlang/core/builtin#Hash\">Hash</a>](self : (A, B, C, D), hasher : <a href=\"moonbitlang/core/builtin#Hasher\">Hasher</a>) -> Unit",
              "loc": { "line": 31, "column": 77 }
            }
          ],
          "loc": { "line": 31, "column": 1 }
        },
        {
          "docstring": "",
          "signature": "impl[A : <a href=\"moonbitlang/core/builtin#Hash\">Hash</a>, B : <a href=\"moonbitlang/core/builtin#Hash\">Hash</a>, C : <a href=\"moonbitlang/core/builtin#Hash\">Hash</a>, D : <a href=\"moonbitlang/core/builtin#Hash\">Hash</a>, E : <a href=\"moonbitlang/core/builtin#Hash\">Hash</a>] <a href=\"moonbitlang/core/builtin#Hash\">Hash</a> for (A, B, C, D, E)",
          "methods": [
            {
              "name": "hash_combine",
              "docstring": "",
              "signature": "fn hash_combine[A : <a href=\"moonbitlang/core/builtin#Hash\">Hash</a>, B : <a href=\"moonbitlang/core/builtin#Hash\">Hash</a>, C : <a href=\"moonbitlang/core/builtin#Hash\">Hash</a>, D : <a href=\"moonbitlang/core/builtin#Hash\">Hash</a>, E : <a href=\"moonbitlang/core/builtin#Hash\">Hash</a>](self : (A, B, C, D, E), hasher : <a href=\"moonbitlang/core/builtin#Hasher\">Hasher</a>) -> Unit",
              "loc": { "line": 46, "column": 8 }
            }
          ],
          "loc": { "line": 40, "column": 1 }
        },
        {
          "docstring": "",
          "signature": "impl[A : <a href=\"moonbitlang/core/builtin#Hash\">Hash</a>, B : <a href=\"moonbitlang/core/builtin#Hash\">Hash</a>, C : <a href=\"moonbitlang/core/builtin#Hash\">Hash</a>, D : <a href=\"moonbitlang/core/builtin#Hash\">Hash</a>, E : <a href=\"moonbitlang/core/builtin#Hash\">Hash</a>, F : <a href=\"moonbitlang/core/builtin#Hash\">Hash</a>] <a href=\"moonbitlang/core/builtin#Hash\">Hash</a> for (A, B, C, D, E, F)",
          "methods": [
            {
              "name": "hash_combine",
              "docstring": "",
              "signature": "fn hash_combine[A : <a href=\"moonbitlang/core/builtin#Hash\">Hash</a>, B : <a href=\"moonbitlang/core/builtin#Hash\">Hash</a>, C : <a href=\"moonbitlang/core/builtin#Hash\">Hash</a>, D : <a href=\"moonbitlang/core/builtin#Hash\">Hash</a>, E : <a href=\"moonbitlang/core/builtin#Hash\">Hash</a>, F : <a href=\"moonbitlang/core/builtin#Hash\">Hash</a>](self : (A, B, C, D, E, F), hasher : <a href=\"moonbitlang/core/builtin#Hasher\">Hasher</a>) -> Unit",
              "loc": { "line": 59, "column": 8 }
            }
          ],
          "loc": { "line": 52, "column": 1 }
        },
        {
          "docstring": "",
          "signature": "impl[A : <a href=\"moonbitlang/core/builtin#Hash\">Hash</a>, B : <a href=\"moonbitlang/core/builtin#Hash\">Hash</a>, C : <a href=\"moonbitlang/core/builtin#Hash\">Hash</a>, D : <a href=\"moonbitlang/core/builtin#Hash\">Hash</a>, E : <a href=\"moonbitlang/core/builtin#Hash\">Hash</a>, F : <a href=\"moonbitlang/core/builtin#Hash\">Hash</a>, G : <a href=\"moonbitlang/core/builtin#Hash\">Hash</a>] <a href=\"moonbitlang/core/builtin#Hash\">Hash</a> for (A, B, C, D, E, F, G)",
          "methods": [
            {
              "name": "hash_combine",
              "docstring": "",
              "signature": "fn hash_combine[A : <a href=\"moonbitlang/core/builtin#Hash\">Hash</a>, B : <a href=\"moonbitlang/core/builtin#Hash\">Hash</a>, C : <a href=\"moonbitlang/core/builtin#Hash\">Hash</a>, D : <a href=\"moonbitlang/core/builtin#Hash\">Hash</a>, E : <a href=\"moonbitlang/core/builtin#Hash\">Hash</a>, F : <a href=\"moonbitlang/core/builtin#Hash\">Hash</a>, G : <a href=\"moonbitlang/core/builtin#Hash\">Hash</a>](self : (A, B, C, D, E, F, G), hasher : <a href=\"moonbitlang/core/builtin#Hasher\">Hasher</a>) -> Unit",
              "loc": { "line": 73, "column": 8 }
            }
          ],
          "loc": { "line": 65, "column": 1 }
        }
      ]
    },
    {
      "name": "Logger",
      "docstring": "\n Trait for a logger, where debug logs can be written into",
      "signature": "pub(open) trait Logger {\n  write_string(Self, String) -> Unit\n  write_substring(Self, String, Int, Int) -> Unit\n  write_sub_string(Self, String, Int, Int) -> Unit\n  write_char(Self, Char) -> Unit\n}",
      "loc": { "line": 54, "column": 1 },
      "default_impls": [
        {
          "name": "write_sub_string",
          "docstring": "",
          "signature": "impl <a href=\"moonbitlang/core/builtin#Logger\">Logger</a> with write_sub_string(self : Self, value : String, start : Int, len : Int) -> Unit",
          "loc": { "line": 63, "column": 1 }
        }
      ],
      "impls": []
    },
    {
      "name": "Show",
      "docstring": "\n Trait for types that can be converted to `String`",
      "signature": "pub(open) trait Show {\n  output(Self, <a href=\"moonbitlang/core/builtin#Logger\">Logger</a>) -> Unit\n  to_string(Self) -> String\n}",
      "loc": { "line": 69, "column": 1 },
      "default_impls": [
        {
          "name": "to_string",
          "docstring": "",
          "signature": "impl <a href=\"moonbitlang/core/builtin#Show\">Show</a> with to_string(self : Self) -> String",
          "loc": { "line": 85, "column": 1 }
        }
      ],
      "impls": [
        {
          "docstring": "",
          "signature": "impl <a href=\"moonbitlang/core/builtin#Show\">Show</a> for Unit",
          "methods": [
            {
              "name": "output",
              "docstring": "",
              "signature": "fn output(_self : Unit, logger : <a href=\"moonbitlang/core/builtin#Logger\">Logger</a>) -> Unit",
              "loc": { "line": 16, "column": 29 }
            }
          ],
          "loc": { "line": 16, "column": 1 }
        },
        {
          "docstring": "",
          "signature": "impl <a href=\"moonbitlang/core/builtin#Show\">Show</a> for Bool",
          "methods": [
            {
              "name": "output",
              "docstring": "",
              "signature": "fn output(self : Bool, logger : <a href=\"moonbitlang/core/builtin#Logger\">Logger</a>) -> Unit",
              "loc": { "line": 19, "column": 29 }
            }
          ],
          "loc": { "line": 19, "column": 1 }
        },
        {
          "docstring": "",
          "signature": "impl <a href=\"moonbitlang/core/builtin#Show\">Show</a> for Byte",
          "methods": [
            {
              "name": "output",
              "docstring": "",
              "signature": "fn output(self : Byte, logger : <a href=\"moonbitlang/core/builtin#Logger\">Logger</a>) -> Unit",
              "loc": { "line": 44, "column": 29 }
            }
          ],
          "loc": { "line": 44, "column": 1 }
        },
        {
          "docstring": "",
          "signature": "impl <a href=\"moonbitlang/core/builtin#Show\">Show</a> for Char",
          "methods": [
            {
              "name": "output",
              "docstring": "",
              "signature": "fn output(self : Char, logger : <a href=\"moonbitlang/core/builtin#Logger\">Logger</a>) -> Unit",
              "loc": { "line": 228, "column": 29 }
            }
          ],
          "loc": { "line": 228, "column": 1 }
        },
        {
          "docstring": "",
          "signature": "impl <a href=\"moonbitlang/core/builtin#Show\">Show</a> for Int",
          "methods": [
            {
              "name": "output",
              "docstring": "",
              "signature": "fn output(self : Int, logger : <a href=\"moonbitlang/core/builtin#Logger\">Logger</a>) -> Unit",
              "loc": { "line": 24, "column": 28 }
            }
          ],
          "loc": { "line": 24, "column": 1 }
        },
        {
          "docstring": "",
          "signature": "impl <a href=\"moonbitlang/core/builtin#Show\">Show</a> for Int64",
          "methods": [
            {
              "name": "output",
              "docstring": "",
              "signature": "fn output(self : Int64, logger : <a href=\"moonbitlang/core/builtin#Logger\">Logger</a>) -> Unit",
              "loc": { "line": 29, "column": 30 }
            }
          ],
          "loc": { "line": 29, "column": 1 }
        },
        {
          "docstring": "",
          "signature": "impl <a href=\"moonbitlang/core/builtin#Show\">Show</a> for UInt",
          "methods": [
            {
              "name": "output",
              "docstring": "",
              "signature": "fn output(self : UInt, logger : <a href=\"moonbitlang/core/builtin#Logger\">Logger</a>) -> Unit",
              "loc": { "line": 34, "column": 29 }
            }
          ],
          "loc": { "line": 34, "column": 1 }
        },
        {
          "docstring": "",
          "signature": "impl <a href=\"moonbitlang/core/builtin#Show\">Show</a> for UInt64",
          "methods": [
            {
              "name": "output",
              "docstring": "",
              "signature": "fn output(self : UInt64, logger : <a href=\"moonbitlang/core/builtin#Logger\">Logger</a>) -> Unit",
              "loc": { "line": 39, "column": 31 }
            }
          ],
          "loc": { "line": 39, "column": 1 }
        },
        {
          "docstring": "",
          "signature": "impl <a href=\"moonbitlang/core/builtin#Show\">Show</a> for String",
          "methods": [
            {
              "name": "output",
              "docstring": "",
              "signature": "fn output(self : String, logger : <a href=\"moonbitlang/core/builtin#Logger\">Logger</a>) -> Unit",
              "loc": { "line": 100, "column": 31 }
            },
            {
              "name": "to_string",
              "docstring": "",
              "signature": "fn to_string(self : String) -> String",
              "loc": { "line": 159, "column": 31 }
            }
          ],
          "loc": { "line": 100, "column": 1 }
        },
        {
          "docstring": "",
          "signature": "impl[X : <a href=\"moonbitlang/core/builtin#Show\">Show</a>] <a href=\"moonbitlang/core/builtin#Show\">Show</a> for X?",
          "methods": [
            {
              "name": "output",
              "docstring": "",
              "signature": "fn output[X : <a href=\"moonbitlang/core/builtin#Show\">Show</a>](self : X?, logger : <a href=\"moonbitlang/core/builtin#Logger\">Logger</a>) -> Unit",
              "loc": { "line": 177, "column": 37 }
            }
          ],
          "loc": { "line": 177, "column": 1 }
        },
        {
          "docstring": "",
          "signature": "impl[T : <a href=\"moonbitlang/core/builtin#Show\">Show</a>, E : <a href=\"moonbitlang/core/builtin#Show\">Show</a>] <a href=\"moonbitlang/core/builtin#Show\">Show</a> for <a href=\"moonbitlang/core/result#Result\">Result</a>[T, E]",
          "methods": [
            {
              "name": "output",
              "docstring": "",
              "signature": "fn output[T : <a href=\"moonbitlang/core/builtin#Show\">Show</a>, E : <a href=\"moonbitlang/core/builtin#Show\">Show</a>](self : <a href=\"moonbitlang/core/result#Result\">Result</a>[T, E], logger : <a href=\"moonbitlang/core/builtin#Logger\">Logger</a>) -> Unit",
              "loc": { "line": 186, "column": 57 }
            }
          ],
          "loc": { "line": 186, "column": 1 }
        },
        {
          "docstring": "",
          "signature": "impl[X : <a href=\"moonbitlang/core/builtin#Show\">Show</a>] <a href=\"moonbitlang/core/builtin#Show\">Show</a> for <a href=\"moonbitlang/core/array#FixedArray\">FixedArray</a>[X]",
          "methods": [
            {
              "name": "output",
              "docstring": "",
              "signature": "fn output[X : <a href=\"moonbitlang/core/builtin#Show\">Show</a>](self : <a href=\"moonbitlang/core/array#FixedArray\">FixedArray</a>[X], logger : <a href=\"moonbitlang/core/builtin#Logger\">Logger</a>) -> Unit",
              "loc": { "line": 199, "column": 48 }
            }
          ],
          "loc": { "line": 199, "column": 1 }
        },
        {
          "docstring": "",
          "signature": "impl <a href=\"moonbitlang/core/builtin#Show\">Show</a> for Bytes",
          "methods": [
            {
              "name": "output",
              "docstring": "",
              "signature": "fn output(self : Bytes, logger : <a href=\"moonbitlang/core/builtin#Logger\">Logger</a>) -> Unit",
              "loc": { "line": 49, "column": 30 }
            },
            {
              "name": "to_string",
              "docstring": "",
              "signature": "fn to_string(self : Bytes) -> String",
              "loc": { "line": 71, "column": 30 }
            }
          ],
          "loc": { "line": 49, "column": 1 }
        },
        {
          "docstring": "",
          "signature": "impl[X : <a href=\"moonbitlang/core/builtin#Show\">Show</a>] <a href=\"moonbitlang/core/builtin#Show\">Show</a> for <a href=\"moonbitlang/core/ref#Ref\">Ref</a>[X]",
          "methods": [
            {
              "name": "output",
              "docstring": "",
              "signature": "fn output[X : <a href=\"moonbitlang/core/builtin#Show\">Show</a>](self : <a href=\"moonbitlang/core/ref#Ref\">Ref</a>[X], logger : <a href=\"moonbitlang/core/builtin#Logger\">Logger</a>) -> Unit",
              "loc": { "line": 194, "column": 41 }
            }
          ],
          "loc": { "line": 194, "column": 1 }
        },
        {
          "docstring": "",
          "signature": "impl[A : <a href=\"moonbitlang/core/builtin#Show\">Show</a>, B : <a href=\"moonbitlang/core/builtin#Show\">Show</a>] <a href=\"moonbitlang/core/builtin#Show\">Show</a> for (A, B)",
          "methods": [
            {
              "name": "output",
              "docstring": "",
              "signature": "fn output[A : <a href=\"moonbitlang/core/builtin#Show\">Show</a>, B : <a href=\"moonbitlang/core/builtin#Show\">Show</a>](self : (A, B), logger : <a href=\"moonbitlang/core/builtin#Logger\">Logger</a>) -> Unit",
              "loc": { "line": 16, "column": 51 }
            }
          ],
          "loc": { "line": 16, "column": 1 }
        },
        {
          "docstring": "",
          "signature": "impl[A : <a href=\"moonbitlang/core/builtin#Show\">Show</a>, B : <a href=\"moonbitlang/core/builtin#Show\">Show</a>, C : <a href=\"moonbitlang/core/builtin#Show\">Show</a>] <a href=\"moonbitlang/core/builtin#Show\">Show</a> for (A, B, C)",
          "methods": [
            {
              "name": "output",
              "docstring": "",
              "signature": "fn output[A : <a href=\"moonbitlang/core/builtin#Show\">Show</a>, B : <a href=\"moonbitlang/core/builtin#Show\">Show</a>, C : <a href=\"moonbitlang/core/builtin#Show\">Show</a>](self : (A, B, C), logger : <a href=\"moonbitlang/core/builtin#Logger\">Logger</a>) -> Unit",
              "loc": { "line": 27, "column": 64 }
            }
          ],
          "loc": { "line": 27, "column": 1 }
        },
        {
          "docstring": "",
          "signature": "impl[A : <a href=\"moonbitlang/core/builtin#Show\">Show</a>, B : <a href=\"moonbitlang/core/builtin#Show\">Show</a>, C : <a href=\"moonbitlang/core/builtin#Show\">Show</a>, D : <a href=\"moonbitlang/core/builtin#Show\">Show</a>] <a href=\"moonbitlang/core/builtin#Show\">Show</a> for (A, B, C, D)",
          "methods": [
            {
              "name": "output",
              "docstring": "",
              "signature": "fn output[A : <a href=\"moonbitlang/core/builtin#Show\">Show</a>, B : <a href=\"moonbitlang/core/builtin#Show\">Show</a>, C : <a href=\"moonbitlang/core/builtin#Show\">Show</a>, D : <a href=\"moonbitlang/core/builtin#Show\">Show</a>](self : (A, B, C, D), logger : <a href=\"moonbitlang/core/builtin#Logger\">Logger</a>) -> Unit",
              "loc": { "line": 43, "column": 77 }
            }
          ],
          "loc": { "line": 43, "column": 1 }
        },
        {
          "docstring": "",
          "signature": "impl[A : <a href=\"moonbitlang/core/builtin#Show\">Show</a>, B : <a href=\"moonbitlang/core/builtin#Show\">Show</a>, C : <a href=\"moonbitlang/core/builtin#Show\">Show</a>, D : <a href=\"moonbitlang/core/builtin#Show\">Show</a>, E : <a href=\"moonbitlang/core/builtin#Show\">Show</a>] <a href=\"moonbitlang/core/builtin#Show\">Show</a> for (A, B, C, D, E)",
          "methods": [
            {
              "name": "output",
              "docstring": "",
              "signature": "fn output[A : <a href=\"moonbitlang/core/builtin#Show\">Show</a>, B : <a href=\"moonbitlang/core/builtin#Show\">Show</a>, C : <a href=\"moonbitlang/core/builtin#Show\">Show</a>, D : <a href=\"moonbitlang/core/builtin#Show\">Show</a>, E : <a href=\"moonbitlang/core/builtin#Show\">Show</a>](self : (A, B, C, D, E), logger : <a href=\"moonbitlang/core/builtin#Logger\">Logger</a>) -> Unit",
              "loc": { "line": 67, "column": 8 }
            }
          ],
          "loc": { "line": 61, "column": 1 }
        },
        {
          "docstring": "",
          "signature": "impl[A : <a href=\"moonbitlang/core/builtin#Show\">Show</a>, B : <a href=\"moonbitlang/core/builtin#Show\">Show</a>, C : <a href=\"moonbitlang/core/builtin#Show\">Show</a>, D : <a href=\"moonbitlang/core/builtin#Show\">Show</a>, E : <a href=\"moonbitlang/core/builtin#Show\">Show</a>, F : <a href=\"moonbitlang/core/builtin#Show\">Show</a>] <a href=\"moonbitlang/core/builtin#Show\">Show</a> for (A, B, C, D, E, F)",
          "methods": [
            {
              "name": "output",
              "docstring": "",
              "signature": "fn output[A : <a href=\"moonbitlang/core/builtin#Show\">Show</a>, B : <a href=\"moonbitlang/core/builtin#Show\">Show</a>, C : <a href=\"moonbitlang/core/builtin#Show\">Show</a>, D : <a href=\"moonbitlang/core/builtin#Show\">Show</a>, E : <a href=\"moonbitlang/core/builtin#Show\">Show</a>, F : <a href=\"moonbitlang/core/builtin#Show\">Show</a>](self : (A, B, C, D, E, F), logger : <a href=\"moonbitlang/core/builtin#Logger\">Logger</a>) -> Unit",
              "loc": { "line": 91, "column": 8 }
            }
          ],
          "loc": { "line": 84, "column": 1 }
        },
        {
          "docstring": "",
          "signature": "impl[A : <a href=\"moonbitlang/core/builtin#Show\">Show</a>, B : <a href=\"moonbitlang/core/builtin#Show\">Show</a>, C : <a href=\"moonbitlang/core/builtin#Show\">Show</a>, D : <a href=\"moonbitlang/core/builtin#Show\">Show</a>, E : <a href=\"moonbitlang/core/builtin#Show\">Show</a>, F : <a href=\"moonbitlang/core/builtin#Show\">Show</a>, G : <a href=\"moonbitlang/core/builtin#Show\">Show</a>] <a href=\"moonbitlang/core/builtin#Show\">Show</a> for (A, B, C, D, E, F, G)",
          "methods": [
            {
              "name": "output",
              "docstring": "",
              "signature": "fn output[A : <a href=\"moonbitlang/core/builtin#Show\">Show</a>, B : <a href=\"moonbitlang/core/builtin#Show\">Show</a>, C : <a href=\"moonbitlang/core/builtin#Show\">Show</a>, D : <a href=\"moonbitlang/core/builtin#Show\">Show</a>, E : <a href=\"moonbitlang/core/builtin#Show\">Show</a>, F : <a href=\"moonbitlang/core/builtin#Show\">Show</a>, G : <a href=\"moonbitlang/core/builtin#Show\">Show</a>](self : (A, B, C, D, E, F, G), logger : <a href=\"moonbitlang/core/builtin#Logger\">Logger</a>) -> Unit",
              "loc": { "line": 118, "column": 8 }
            }
          ],
          "loc": { "line": 110, "column": 1 }
        },
        {
          "docstring": "",
          "signature": "impl[T0 : <a href=\"moonbitlang/core/builtin#Show\">Show</a>, T1 : <a href=\"moonbitlang/core/builtin#Show\">Show</a>, T2 : <a href=\"moonbitlang/core/builtin#Show\">Show</a>, T3 : <a href=\"moonbitlang/core/builtin#Show\">Show</a>, T4 : <a href=\"moonbitlang/core/builtin#Show\">Show</a>, T5 : <a href=\"moonbitlang/core/builtin#Show\">Show</a>, T6 : <a href=\"moonbitlang/core/builtin#Show\">Show</a>, T7 : <a href=\"moonbitlang/core/builtin#Show\">Show</a>] <a href=\"moonbitlang/core/builtin#Show\">Show</a> for (T0, T1, T2, T3, T4, T5, T6, T7)",
          "methods": [
            {
              "name": "output",
              "docstring": "",
              "signature": "fn output[T0 : <a href=\"moonbitlang/core/builtin#Show\">Show</a>, T1 : <a href=\"moonbitlang/core/builtin#Show\">Show</a>, T2 : <a href=\"moonbitlang/core/builtin#Show\">Show</a>, T3 : <a href=\"moonbitlang/core/builtin#Show\">Show</a>, T4 : <a href=\"moonbitlang/core/builtin#Show\">Show</a>, T5 : <a href=\"moonbitlang/core/builtin#Show\">Show</a>, T6 : <a href=\"moonbitlang/core/builtin#Show\">Show</a>, T7 : <a href=\"moonbitlang/core/builtin#Show\">Show</a>](self : (T0, T1, T2, T3, T4, T5, T6, T7), logger : <a href=\"moonbitlang/core/builtin#Logger\">Logger</a>) -> Unit",
              "loc": { "line": 148, "column": 8 }
            }
          ],
          "loc": { "line": 139, "column": 1 }
        },
        {
          "docstring": "",
          "signature": "impl[T0 : <a href=\"moonbitlang/core/builtin#Show\">Show</a>, T1 : <a href=\"moonbitlang/core/builtin#Show\">Show</a>, T2 : <a href=\"moonbitlang/core/builtin#Show\">Show</a>, T3 : <a href=\"moonbitlang/core/builtin#Show\">Show</a>, T4 : <a href=\"moonbitlang/core/builtin#Show\">Show</a>, T5 : <a href=\"moonbitlang/core/builtin#Show\">Show</a>, T6 : <a href=\"moonbitlang/core/builtin#Show\">Show</a>, T7 : <a href=\"moonbitlang/core/builtin#Show\">Show</a>, T8 : <a href=\"moonbitlang/core/builtin#Show\">Show</a>] <a href=\"moonbitlang/core/builtin#Show\">Show</a> for (T0, T1, T2, T3, T4, T5, T6, T7, T8)",
          "methods": [
            {
              "name": "output",
              "docstring": "",
              "signature": "fn output[T0 : <a href=\"moonbitlang/core/builtin#Show\">Show</a>, T1 : <a href=\"moonbitlang/core/builtin#Show\">Show</a>, T2 : <a href=\"moonbitlang/core/builtin#Show\">Show</a>, T3 : <a href=\"moonbitlang/core/builtin#Show\">Show</a>, T4 : <a href=\"moonbitlang/core/builtin#Show\">Show</a>, T5 : <a href=\"moonbitlang/core/builtin#Show\">Show</a>, T6 : <a href=\"moonbitlang/core/builtin#Show\">Show</a>, T7 : <a href=\"moonbitlang/core/builtin#Show\">Show</a>, T8 : <a href=\"moonbitlang/core/builtin#Show\">Show</a>](self : (T0, T1, T2, T3, T4, T5, T6, T7, T8), logger : <a href=\"moonbitlang/core/builtin#Logger\">Logger</a>) -> Unit",
              "loc": { "line": 181, "column": 8 }
            }
          ],
          "loc": { "line": 171, "column": 1 }
        },
        {
          "docstring": "",
          "signature": "impl[T0 : <a href=\"moonbitlang/core/builtin#Show\">Show</a>, T1 : <a href=\"moonbitlang/core/builtin#Show\">Show</a>, T2 : <a href=\"moonbitlang/core/builtin#Show\">Show</a>, T3 : <a href=\"moonbitlang/core/builtin#Show\">Show</a>, T4 : <a href=\"moonbitlang/core/builtin#Show\">Show</a>, T5 : <a href=\"moonbitlang/core/builtin#Show\">Show</a>, T6 : <a href=\"moonbitlang/core/builtin#Show\">Show</a>, T7 : <a href=\"moonbitlang/core/builtin#Show\">Show</a>, T8 : <a href=\"moonbitlang/core/builtin#Show\">Show</a>, T9 : <a href=\"moonbitlang/core/builtin#Show\">Show</a>] <a href=\"moonbitlang/core/builtin#Show\">Show</a> for (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9)",
          "methods": [
            {
              "name": "output",
              "docstring": "",
              "signature": "fn output[T0 : <a href=\"moonbitlang/core/builtin#Show\">Show</a>, T1 : <a href=\"moonbitlang/core/builtin#Show\">Show</a>, T2 : <a href=\"moonbitlang/core/builtin#Show\">Show</a>, T3 : <a href=\"moonbitlang/core/builtin#Show\">Show</a>, T4 : <a href=\"moonbitlang/core/builtin#Show\">Show</a>, T5 : <a href=\"moonbitlang/core/builtin#Show\">Show</a>, T6 : <a href=\"moonbitlang/core/builtin#Show\">Show</a>, T7 : <a href=\"moonbitlang/core/builtin#Show\">Show</a>, T8 : <a href=\"moonbitlang/core/builtin#Show\">Show</a>, T9 : <a href=\"moonbitlang/core/builtin#Show\">Show</a>](self : (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9), logger : <a href=\"moonbitlang/core/builtin#Logger\">Logger</a>) -> Unit",
              "loc": { "line": 217, "column": 8 }
            }
          ],
          "loc": { "line": 206, "column": 1 }
        },
        {
          "docstring": "",
          "signature": "impl[T0 : <a href=\"moonbitlang/core/builtin#Show\">Show</a>, T1 : <a href=\"moonbitlang/core/builtin#Show\">Show</a>, T2 : <a href=\"moonbitlang/core/builtin#Show\">Show</a>, T3 : <a href=\"moonbitlang/core/builtin#Show\">Show</a>, T4 : <a href=\"moonbitlang/core/builtin#Show\">Show</a>, T5 : <a href=\"moonbitlang/core/builtin#Show\">Show</a>, T6 : <a href=\"moonbitlang/core/builtin#Show\">Show</a>, T7 : <a href=\"moonbitlang/core/builtin#Show\">Show</a>, T8 : <a href=\"moonbitlang/core/builtin#Show\">Show</a>, T9 : <a href=\"moonbitlang/core/builtin#Show\">Show</a>, T10 : <a href=\"moonbitlang/core/builtin#Show\">Show</a>] <a href=\"moonbitlang/core/builtin#Show\">Show</a> for (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10)",
          "methods": [
            {
              "name": "output",
              "docstring": "",
              "signature": "fn output[T0 : <a href=\"moonbitlang/core/builtin#Show\">Show</a>, T1 : <a href=\"moonbitlang/core/builtin#Show\">Show</a>, T2 : <a href=\"moonbitlang/core/builtin#Show\">Show</a>, T3 : <a href=\"moonbitlang/core/builtin#Show\">Show</a>, T4 : <a href=\"moonbitlang/core/builtin#Show\">Show</a>, T5 : <a href=\"moonbitlang/core/builtin#Show\">Show</a>, T6 : <a href=\"moonbitlang/core/builtin#Show\">Show</a>, T7 : <a href=\"moonbitlang/core/builtin#Show\">Show</a>, T8 : <a href=\"moonbitlang/core/builtin#Show\">Show</a>, T9 : <a href=\"moonbitlang/core/builtin#Show\">Show</a>, T10 : <a href=\"moonbitlang/core/builtin#Show\">Show</a>](self : (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10), logger : <a href=\"moonbitlang/core/builtin#Logger\">Logger</a>) -> Unit",
              "loc": { "line": 256, "column": 8 }
            }
          ],
          "loc": { "line": 244, "column": 1 }
        },
        {
          "docstring": "",
          "signature": "impl[T0 : <a href=\"moonbitlang/core/builtin#Show\">Show</a>, T1 : <a href=\"moonbitlang/core/builtin#Show\">Show</a>, T2 : <a href=\"moonbitlang/core/builtin#Show\">Show</a>, T3 : <a href=\"moonbitlang/core/builtin#Show\">Show</a>, T4 : <a href=\"moonbitlang/core/builtin#Show\">Show</a>, T5 : <a href=\"moonbitlang/core/builtin#Show\">Show</a>, T6 : <a href=\"moonbitlang/core/builtin#Show\">Show</a>, T7 : <a href=\"moonbitlang/core/builtin#Show\">Show</a>, T8 : <a href=\"moonbitlang/core/builtin#Show\">Show</a>, T9 : <a href=\"moonbitlang/core/builtin#Show\">Show</a>, T10 : <a href=\"moonbitlang/core/builtin#Show\">Show</a>, T11 : <a href=\"moonbitlang/core/builtin#Show\">Show</a>] <a href=\"moonbitlang/core/builtin#Show\">Show</a> for (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11)",
          "methods": [
            {
              "name": "output",
              "docstring": "",
              "signature": "fn output[T0 : <a href=\"moonbitlang/core/builtin#Show\">Show</a>, T1 : <a href=\"moonbitlang/core/builtin#Show\">Show</a>, T2 : <a href=\"moonbitlang/core/builtin#Show\">Show</a>, T3 : <a href=\"moonbitlang/core/builtin#Show\">Show</a>, T4 : <a href=\"moonbitlang/core/builtin#Show\">Show</a>, T5 : <a href=\"moonbitlang/core/builtin#Show\">Show</a>, T6 : <a href=\"moonbitlang/core/builtin#Show\">Show</a>, T7 : <a href=\"moonbitlang/core/builtin#Show\">Show</a>, T8 : <a href=\"moonbitlang/core/builtin#Show\">Show</a>, T9 : <a href=\"moonbitlang/core/builtin#Show\">Show</a>, T10 : <a href=\"moonbitlang/core/builtin#Show\">Show</a>, T11 : <a href=\"moonbitlang/core/builtin#Show\">Show</a>](self : (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11), logger : <a href=\"moonbitlang/core/builtin#Logger\">Logger</a>) -> Unit",
              "loc": { "line": 298, "column": 8 }
            }
          ],
          "loc": { "line": 285, "column": 1 }
        },
        {
          "docstring": "",
          "signature": "impl[T0 : <a href=\"moonbitlang/core/builtin#Show\">Show</a>, T1 : <a href=\"moonbitlang/core/builtin#Show\">Show</a>, T2 : <a href=\"moonbitlang/core/builtin#Show\">Show</a>, T3 : <a href=\"moonbitlang/core/builtin#Show\">Show</a>, T4 : <a href=\"moonbitlang/core/builtin#Show\">Show</a>, T5 : <a href=\"moonbitlang/core/builtin#Show\">Show</a>, T6 : <a href=\"moonbitlang/core/builtin#Show\">Show</a>, T7 : <a href=\"moonbitlang/core/builtin#Show\">Show</a>, T8 : <a href=\"moonbitlang/core/builtin#Show\">Show</a>, T9 : <a href=\"moonbitlang/core/builtin#Show\">Show</a>, T10 : <a href=\"moonbitlang/core/builtin#Show\">Show</a>, T11 : <a href=\"moonbitlang/core/builtin#Show\">Show</a>, T12 : <a href=\"moonbitlang/core/builtin#Show\">Show</a>] <a href=\"moonbitlang/core/builtin#Show\">Show</a> for (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12)",
          "methods": [
            {
              "name": "output",
              "docstring": "",
              "signature": "fn output[T0 : <a href=\"moonbitlang/core/builtin#Show\">Show</a>, T1 : <a href=\"moonbitlang/core/builtin#Show\">Show</a>, T2 : <a href=\"moonbitlang/core/builtin#Show\">Show</a>, T3 : <a href=\"moonbitlang/core/builtin#Show\">Show</a>, T4 : <a href=\"moonbitlang/core/builtin#Show\">Show</a>, T5 : <a href=\"moonbitlang/core/builtin#Show\">Show</a>, T6 : <a href=\"moonbitlang/core/builtin#Show\">Show</a>, T7 : <a href=\"moonbitlang/core/builtin#Show\">Show</a>, T8 : <a href=\"moonbitlang/core/builtin#Show\">Show</a>, T9 : <a href=\"moonbitlang/core/builtin#Show\">Show</a>, T10 : <a href=\"moonbitlang/core/builtin#Show\">Show</a>, T11 : <a href=\"moonbitlang/core/builtin#Show\">Show</a>, T12 : <a href=\"moonbitlang/core/builtin#Show\">Show</a>](self : (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12), logger : <a href=\"moonbitlang/core/builtin#Logger\">Logger</a>) -> Unit",
              "loc": { "line": 343, "column": 8 }
            }
          ],
          "loc": { "line": 329, "column": 1 }
        },
        {
          "docstring": "",
          "signature": "impl[T0 : <a href=\"moonbitlang/core/builtin#Show\">Show</a>, T1 : <a href=\"moonbitlang/core/builtin#Show\">Show</a>, T2 : <a href=\"moonbitlang/core/builtin#Show\">Show</a>, T3 : <a href=\"moonbitlang/core/builtin#Show\">Show</a>, T4 : <a href=\"moonbitlang/core/builtin#Show\">Show</a>, T5 : <a href=\"moonbitlang/core/builtin#Show\">Show</a>, T6 : <a href=\"moonbitlang/core/builtin#Show\">Show</a>, T7 : <a href=\"moonbitlang/core/builtin#Show\">Show</a>, T8 : <a href=\"moonbitlang/core/builtin#Show\">Show</a>, T9 : <a href=\"moonbitlang/core/builtin#Show\">Show</a>, T10 : <a href=\"moonbitlang/core/builtin#Show\">Show</a>, T11 : <a href=\"moonbitlang/core/builtin#Show\">Show</a>, T12 : <a href=\"moonbitlang/core/builtin#Show\">Show</a>, T13 : <a href=\"moonbitlang/core/builtin#Show\">Show</a>] <a href=\"moonbitlang/core/builtin#Show\">Show</a> for (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13)",
          "methods": [
            {
              "name": "output",
              "docstring": "",
              "signature": "fn output[T0 : <a href=\"moonbitlang/core/builtin#Show\">Show</a>, T1 : <a href=\"moonbitlang/core/builtin#Show\">Show</a>, T2 : <a href=\"moonbitlang/core/builtin#Show\">Show</a>, T3 : <a href=\"moonbitlang/core/builtin#Show\">Show</a>, T4 : <a href=\"moonbitlang/core/builtin#Show\">Show</a>, T5 : <a href=\"moonbitlang/core/builtin#Show\">Show</a>, T6 : <a href=\"moonbitlang/core/builtin#Show\">Show</a>, T7 : <a href=\"moonbitlang/core/builtin#Show\">Show</a>, T8 : <a href=\"moonbitlang/core/builtin#Show\">Show</a>, T9 : <a href=\"moonbitlang/core/builtin#Show\">Show</a>, T10 : <a href=\"moonbitlang/core/builtin#Show\">Show</a>, T11 : <a href=\"moonbitlang/core/builtin#Show\">Show</a>, T12 : <a href=\"moonbitlang/core/builtin#Show\">Show</a>, T13 : <a href=\"moonbitlang/core/builtin#Show\">Show</a>](self : (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13), logger : <a href=\"moonbitlang/core/builtin#Logger\">Logger</a>) -> Unit",
              "loc": { "line": 391, "column": 8 }
            }
          ],
          "loc": { "line": 376, "column": 1 }
        },
        {
          "docstring": "",
          "signature": "impl[T0 : <a href=\"moonbitlang/core/builtin#Show\">Show</a>, T1 : <a href=\"moonbitlang/core/builtin#Show\">Show</a>, T2 : <a href=\"moonbitlang/core/builtin#Show\">Show</a>, T3 : <a href=\"moonbitlang/core/builtin#Show\">Show</a>, T4 : <a href=\"moonbitlang/core/builtin#Show\">Show</a>, T5 : <a href=\"moonbitlang/core/builtin#Show\">Show</a>, T6 : <a href=\"moonbitlang/core/builtin#Show\">Show</a>, T7 : <a href=\"moonbitlang/core/builtin#Show\">Show</a>, T8 : <a href=\"moonbitlang/core/builtin#Show\">Show</a>, T9 : <a href=\"moonbitlang/core/builtin#Show\">Show</a>, T10 : <a href=\"moonbitlang/core/builtin#Show\">Show</a>, T11 : <a href=\"moonbitlang/core/builtin#Show\">Show</a>, T12 : <a href=\"moonbitlang/core/builtin#Show\">Show</a>, T13 : <a href=\"moonbitlang/core/builtin#Show\">Show</a>, T14 : <a href=\"moonbitlang/core/builtin#Show\">Show</a>] <a href=\"moonbitlang/core/builtin#Show\">Show</a> for (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14)",
          "methods": [
            {
              "name": "output",
              "docstring": "",
              "signature": "fn output[T0 : <a href=\"moonbitlang/core/builtin#Show\">Show</a>, T1 : <a href=\"moonbitlang/core/builtin#Show\">Show</a>, T2 : <a href=\"moonbitlang/core/builtin#Show\">Show</a>, T3 : <a href=\"moonbitlang/core/builtin#Show\">Show</a>, T4 : <a href=\"moonbitlang/core/builtin#Show\">Show</a>, T5 : <a href=\"moonbitlang/core/builtin#Show\">Show</a>, T6 : <a href=\"moonbitlang/core/builtin#Show\">Show</a>, T7 : <a href=\"moonbitlang/core/builtin#Show\">Show</a>, T8 : <a href=\"moonbitlang/core/builtin#Show\">Show</a>, T9 : <a href=\"moonbitlang/core/builtin#Show\">Show</a>, T10 : <a href=\"moonbitlang/core/builtin#Show\">Show</a>, T11 : <a href=\"moonbitlang/core/builtin#Show\">Show</a>, T12 : <a href=\"moonbitlang/core/builtin#Show\">Show</a>, T13 : <a href=\"moonbitlang/core/builtin#Show\">Show</a>, T14 : <a href=\"moonbitlang/core/builtin#Show\">Show</a>](self : (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14), logger : <a href=\"moonbitlang/core/builtin#Logger\">Logger</a>) -> Unit",
              "loc": { "line": 442, "column": 8 }
            }
          ],
          "loc": { "line": 426, "column": 1 }
        },
        {
          "docstring": "",
          "signature": "impl[T0 : <a href=\"moonbitlang/core/builtin#Show\">Show</a>, T1 : <a href=\"moonbitlang/core/builtin#Show\">Show</a>, T2 : <a href=\"moonbitlang/core/builtin#Show\">Show</a>, T3 : <a href=\"moonbitlang/core/builtin#Show\">Show</a>, T4 : <a href=\"moonbitlang/core/builtin#Show\">Show</a>, T5 : <a href=\"moonbitlang/core/builtin#Show\">Show</a>, T6 : <a href=\"moonbitlang/core/builtin#Show\">Show</a>, T7 : <a href=\"moonbitlang/core/builtin#Show\">Show</a>, T8 : <a href=\"moonbitlang/core/builtin#Show\">Show</a>, T9 : <a href=\"moonbitlang/core/builtin#Show\">Show</a>, T10 : <a href=\"moonbitlang/core/builtin#Show\">Show</a>, T11 : <a href=\"moonbitlang/core/builtin#Show\">Show</a>, T12 : <a href=\"moonbitlang/core/builtin#Show\">Show</a>, T13 : <a href=\"moonbitlang/core/builtin#Show\">Show</a>, T14 : <a href=\"moonbitlang/core/builtin#Show\">Show</a>, T15 : <a href=\"moonbitlang/core/builtin#Show\">Show</a>] <a href=\"moonbitlang/core/builtin#Show\">Show</a> for (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15)",
          "methods": [
            {
              "name": "output",
              "docstring": "",
              "signature": "fn output[T0 : <a href=\"moonbitlang/core/builtin#Show\">Show</a>, T1 : <a href=\"moonbitlang/core/builtin#Show\">Show</a>, T2 : <a href=\"moonbitlang/core/builtin#Show\">Show</a>, T3 : <a href=\"moonbitlang/core/builtin#Show\">Show</a>, T4 : <a href=\"moonbitlang/core/builtin#Show\">Show</a>, T5 : <a href=\"moonbitlang/core/builtin#Show\">Show</a>, T6 : <a href=\"moonbitlang/core/builtin#Show\">Show</a>, T7 : <a href=\"moonbitlang/core/builtin#Show\">Show</a>, T8 : <a href=\"moonbitlang/core/builtin#Show\">Show</a>, T9 : <a href=\"moonbitlang/core/builtin#Show\">Show</a>, T10 : <a href=\"moonbitlang/core/builtin#Show\">Show</a>, T11 : <a href=\"moonbitlang/core/builtin#Show\">Show</a>, T12 : <a href=\"moonbitlang/core/builtin#Show\">Show</a>, T13 : <a href=\"moonbitlang/core/builtin#Show\">Show</a>, T14 : <a href=\"moonbitlang/core/builtin#Show\">Show</a>, T15 : <a href=\"moonbitlang/core/builtin#Show\">Show</a>](self : (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15), logger : <a href=\"moonbitlang/core/builtin#Logger\">Logger</a>) -> Unit",
              "loc": { "line": 496, "column": 8 }
            }
          ],
          "loc": { "line": 479, "column": 1 }
        }
      ]
    },
    {
      "name": "ToJson",
      "docstring": "\n Trait for types that can be converted to `Json`",
      "signature": "pub(open) trait ToJson {\n  to_json(Self) -> <a href=\"moonbitlang/core/json#Json\">Json</a>\n}",
      "loc": { "line": 28, "column": 1 },
      "default_impls": [],
      "impls": [
        {
          "docstring": "",
          "signature": "impl[A : <a href=\"moonbitlang/core/builtin#ToJson\">ToJson</a>, B : <a href=\"moonbitlang/core/builtin#ToJson\">ToJson</a>] <a href=\"moonbitlang/core/builtin#ToJson\">ToJson</a> for (A, B)",
          "methods": [
            {
              "name": "to_json",
              "docstring": "",
              "signature": "fn to_json[A : <a href=\"moonbitlang/core/builtin#ToJson\">ToJson</a>, B : <a href=\"moonbitlang/core/builtin#ToJson\">ToJson</a>](self : (A, B)) -> <a href=\"moonbitlang/core/json#Json\">Json</a>",
              "loc": { "line": 16, "column": 57 }
            }
          ],
          "loc": { "line": 16, "column": 1 }
        },
        {
          "docstring": "",
          "signature": "impl[A : <a href=\"moonbitlang/core/builtin#ToJson\">ToJson</a>, B : <a href=\"moonbitlang/core/builtin#ToJson\">ToJson</a>, C : <a href=\"moonbitlang/core/builtin#ToJson\">ToJson</a>] <a href=\"moonbitlang/core/builtin#ToJson\">ToJson</a> for (A, B, C)",
          "methods": [
            {
              "name": "to_json",
              "docstring": "",
              "signature": "fn to_json[A : <a href=\"moonbitlang/core/builtin#ToJson\">ToJson</a>, B : <a href=\"moonbitlang/core/builtin#ToJson\">ToJson</a>, C : <a href=\"moonbitlang/core/builtin#ToJson\">ToJson</a>](self : (A, B, C)) -> <a href=\"moonbitlang/core/json#Json\">Json</a>",
              "loc": { "line": 21, "column": 72 }
            }
          ],
          "loc": { "line": 21, "column": 1 }
        },
        {
          "docstring": "",
          "signature": "impl[A : <a href=\"moonbitlang/core/builtin#ToJson\">ToJson</a>, B : <a href=\"moonbitlang/core/builtin#ToJson\">ToJson</a>, C : <a href=\"moonbitlang/core/builtin#ToJson\">ToJson</a>, D : <a href=\"moonbitlang/core/builtin#ToJson\">ToJson</a>] <a href=\"moonbitlang/core/builtin#ToJson\">ToJson</a> for (A, B, C, D)",
          "methods": [
            {
              "name": "to_json",
              "docstring": "",
              "signature": "fn to_json[A : <a href=\"moonbitlang/core/builtin#ToJson\">ToJson</a>, B : <a href=\"moonbitlang/core/builtin#ToJson\">ToJson</a>, C : <a href=\"moonbitlang/core/builtin#ToJson\">ToJson</a>, D : <a href=\"moonbitlang/core/builtin#ToJson\">ToJson</a>](self : (A, B, C, D)) -> <a href=\"moonbitlang/core/json#Json\">Json</a>",
              "loc": { "line": 28, "column": 87 }
            }
          ],
          "loc": { "line": 28, "column": 1 }
        },
        {
          "docstring": "",
          "signature": "impl[A : <a href=\"moonbitlang/core/builtin#ToJson\">ToJson</a>, B : <a href=\"moonbitlang/core/builtin#ToJson\">ToJson</a>, C : <a href=\"moonbitlang/core/builtin#ToJson\">ToJson</a>, D : <a href=\"moonbitlang/core/builtin#ToJson\">ToJson</a>, E : <a href=\"moonbitlang/core/builtin#ToJson\">ToJson</a>] <a href=\"moonbitlang/core/builtin#ToJson\">ToJson</a> for (A, B, C, D, E)",
          "methods": [
            {
              "name": "to_json",
              "docstring": "",
              "signature": "fn to_json[A : <a href=\"moonbitlang/core/builtin#ToJson\">ToJson</a>, B : <a href=\"moonbitlang/core/builtin#ToJson\">ToJson</a>, C : <a href=\"moonbitlang/core/builtin#ToJson\">ToJson</a>, D : <a href=\"moonbitlang/core/builtin#ToJson\">ToJson</a>, E : <a href=\"moonbitlang/core/builtin#ToJson\">ToJson</a>](self : (A, B, C, D, E)) -> <a href=\"moonbitlang/core/json#Json\">Json</a>",
              "loc": { "line": 41, "column": 8 }
            }
          ],
          "loc": { "line": 35, "column": 1 }
        },
        {
          "docstring": "",
          "signature": "impl[A : <a href=\"moonbitlang/core/builtin#ToJson\">ToJson</a>, B : <a href=\"moonbitlang/core/builtin#ToJson\">ToJson</a>, C : <a href=\"moonbitlang/core/builtin#ToJson\">ToJson</a>, D : <a href=\"moonbitlang/core/builtin#ToJson\">ToJson</a>, E : <a href=\"moonbitlang/core/builtin#ToJson\">ToJson</a>, F : <a href=\"moonbitlang/core/builtin#ToJson\">ToJson</a>] <a href=\"moonbitlang/core/builtin#ToJson\">ToJson</a> for (A, B, C, D, E, F)",
          "methods": [
            {
              "name": "to_json",
              "docstring": "",
              "signature": "fn to_json[A : <a href=\"moonbitlang/core/builtin#ToJson\">ToJson</a>, B : <a href=\"moonbitlang/core/builtin#ToJson\">ToJson</a>, C : <a href=\"moonbitlang/core/builtin#ToJson\">ToJson</a>, D : <a href=\"moonbitlang/core/builtin#ToJson\">ToJson</a>, E : <a href=\"moonbitlang/core/builtin#ToJson\">ToJson</a>, F : <a href=\"moonbitlang/core/builtin#ToJson\">ToJson</a>](self : (A, B, C, D, E, F)) -> <a href=\"moonbitlang/core/json#Json\">Json</a>",
              "loc": { "line": 59, "column": 8 }
            }
          ],
          "loc": { "line": 52, "column": 1 }
        },
        {
          "docstring": "",
          "signature": "impl[A : <a href=\"moonbitlang/core/builtin#ToJson\">ToJson</a>, B : <a href=\"moonbitlang/core/builtin#ToJson\">ToJson</a>, C : <a href=\"moonbitlang/core/builtin#ToJson\">ToJson</a>, D : <a href=\"moonbitlang/core/builtin#ToJson\">ToJson</a>, E : <a href=\"moonbitlang/core/builtin#ToJson\">ToJson</a>, F : <a href=\"moonbitlang/core/builtin#ToJson\">ToJson</a>, G : <a href=\"moonbitlang/core/builtin#ToJson\">ToJson</a>] <a href=\"moonbitlang/core/builtin#ToJson\">ToJson</a> for (A, B, C, D, E, F, G)",
          "methods": [
            {
              "name": "to_json",
              "docstring": "",
              "signature": "fn to_json[A : <a href=\"moonbitlang/core/builtin#ToJson\">ToJson</a>, B : <a href=\"moonbitlang/core/builtin#ToJson\">ToJson</a>, C : <a href=\"moonbitlang/core/builtin#ToJson\">ToJson</a>, D : <a href=\"moonbitlang/core/builtin#ToJson\">ToJson</a>, E : <a href=\"moonbitlang/core/builtin#ToJson\">ToJson</a>, F : <a href=\"moonbitlang/core/builtin#ToJson\">ToJson</a>, G : <a href=\"moonbitlang/core/builtin#ToJson\">ToJson</a>](self : (A, B, C, D, E, F, G)) -> <a href=\"moonbitlang/core/json#Json\">Json</a>",
              "loc": { "line": 79, "column": 8 }
            }
          ],
          "loc": { "line": 71, "column": 1 }
        },
        {
          "docstring": "",
          "signature": "impl[A : <a href=\"moonbitlang/core/builtin#ToJson\">ToJson</a>, B : <a href=\"moonbitlang/core/builtin#ToJson\">ToJson</a>, C : <a href=\"moonbitlang/core/builtin#ToJson\">ToJson</a>, D : <a href=\"moonbitlang/core/builtin#ToJson\">ToJson</a>, E : <a href=\"moonbitlang/core/builtin#ToJson\">ToJson</a>, F : <a href=\"moonbitlang/core/builtin#ToJson\">ToJson</a>, G : <a href=\"moonbitlang/core/builtin#ToJson\">ToJson</a>, H : <a href=\"moonbitlang/core/builtin#ToJson\">ToJson</a>] <a href=\"moonbitlang/core/builtin#ToJson\">ToJson</a> for (A, B, C, D, E, F, G, H)",
          "methods": [
            {
              "name": "to_json",
              "docstring": "",
              "signature": "fn to_json[A : <a href=\"moonbitlang/core/builtin#ToJson\">ToJson</a>, B : <a href=\"moonbitlang/core/builtin#ToJson\">ToJson</a>, C : <a href=\"moonbitlang/core/builtin#ToJson\">ToJson</a>, D : <a href=\"moonbitlang/core/builtin#ToJson\">ToJson</a>, E : <a href=\"moonbitlang/core/builtin#ToJson\">ToJson</a>, F : <a href=\"moonbitlang/core/builtin#ToJson\">ToJson</a>, G : <a href=\"moonbitlang/core/builtin#ToJson\">ToJson</a>, H : <a href=\"moonbitlang/core/builtin#ToJson\">ToJson</a>](self : (A, B, C, D, E, F, G, H)) -> <a href=\"moonbitlang/core/json#Json\">Json</a>",
              "loc": { "line": 101, "column": 8 }
            }
          ],
          "loc": { "line": 92, "column": 1 }
        },
        {
          "docstring": "",
          "signature": "impl[A : <a href=\"moonbitlang/core/builtin#ToJson\">ToJson</a>, B : <a href=\"moonbitlang/core/builtin#ToJson\">ToJson</a>, C : <a href=\"moonbitlang/core/builtin#ToJson\">ToJson</a>, D : <a href=\"moonbitlang/core/builtin#ToJson\">ToJson</a>, E : <a href=\"moonbitlang/core/builtin#ToJson\">ToJson</a>, F : <a href=\"moonbitlang/core/builtin#ToJson\">ToJson</a>, G : <a href=\"moonbitlang/core/builtin#ToJson\">ToJson</a>, H : <a href=\"moonbitlang/core/builtin#ToJson\">ToJson</a>, I : <a href=\"moonbitlang/core/builtin#ToJson\">ToJson</a>] <a href=\"moonbitlang/core/builtin#ToJson\">ToJson</a> for (A, B, C, D, E, F, G, H, I)",
          "methods": [
            {
              "name": "to_json",
              "docstring": "",
              "signature": "fn to_json[A : <a href=\"moonbitlang/core/builtin#ToJson\">ToJson</a>, B : <a href=\"moonbitlang/core/builtin#ToJson\">ToJson</a>, C : <a href=\"moonbitlang/core/builtin#ToJson\">ToJson</a>, D : <a href=\"moonbitlang/core/builtin#ToJson\">ToJson</a>, E : <a href=\"moonbitlang/core/builtin#ToJson\">ToJson</a>, F : <a href=\"moonbitlang/core/builtin#ToJson\">ToJson</a>, G : <a href=\"moonbitlang/core/builtin#ToJson\">ToJson</a>, H : <a href=\"moonbitlang/core/builtin#ToJson\">ToJson</a>, I : <a href=\"moonbitlang/core/builtin#ToJson\">ToJson</a>](self : (A, B, C, D, E, F, G, H, I)) -> <a href=\"moonbitlang/core/json#Json\">Json</a>",
              "loc": { "line": 125, "column": 8 }
            }
          ],
          "loc": { "line": 115, "column": 1 }
        },
        {
          "docstring": "",
          "signature": "impl[A : <a href=\"moonbitlang/core/builtin#ToJson\">ToJson</a>, B : <a href=\"moonbitlang/core/builtin#ToJson\">ToJson</a>, C : <a href=\"moonbitlang/core/builtin#ToJson\">ToJson</a>, D : <a href=\"moonbitlang/core/builtin#ToJson\">ToJson</a>, E : <a href=\"moonbitlang/core/builtin#ToJson\">ToJson</a>, F : <a href=\"moonbitlang/core/builtin#ToJson\">ToJson</a>, G : <a href=\"moonbitlang/core/builtin#ToJson\">ToJson</a>, H : <a href=\"moonbitlang/core/builtin#ToJson\">ToJson</a>, I : <a href=\"moonbitlang/core/builtin#ToJson\">ToJson</a>, J : <a href=\"moonbitlang/core/builtin#ToJson\">ToJson</a>] <a href=\"moonbitlang/core/builtin#ToJson\">ToJson</a> for (A, B, C, D, E, F, G, H, I, J)",
          "methods": [
            {
              "name": "to_json",
              "docstring": "",
              "signature": "fn to_json[A : <a href=\"moonbitlang/core/builtin#ToJson\">ToJson</a>, B : <a href=\"moonbitlang/core/builtin#ToJson\">ToJson</a>, C : <a href=\"moonbitlang/core/builtin#ToJson\">ToJson</a>, D : <a href=\"moonbitlang/core/builtin#ToJson\">ToJson</a>, E : <a href=\"moonbitlang/core/builtin#ToJson\">ToJson</a>, F : <a href=\"moonbitlang/core/builtin#ToJson\">ToJson</a>, G : <a href=\"moonbitlang/core/builtin#ToJson\">ToJson</a>, H : <a href=\"moonbitlang/core/builtin#ToJson\">ToJson</a>, I : <a href=\"moonbitlang/core/builtin#ToJson\">ToJson</a>, J : <a href=\"moonbitlang/core/builtin#ToJson\">ToJson</a>](self : (A, B, C, D, E, F, G, H, I, J)) -> <a href=\"moonbitlang/core/json#Json\">Json</a>",
              "loc": { "line": 151, "column": 8 }
            }
          ],
          "loc": { "line": 140, "column": 1 }
        },
        {
          "docstring": "",
          "signature": "impl[A : <a href=\"moonbitlang/core/builtin#ToJson\">ToJson</a>, B : <a href=\"moonbitlang/core/builtin#ToJson\">ToJson</a>, C : <a href=\"moonbitlang/core/builtin#ToJson\">ToJson</a>, D : <a href=\"moonbitlang/core/builtin#ToJson\">ToJson</a>, E : <a href=\"moonbitlang/core/builtin#ToJson\">ToJson</a>, F : <a href=\"moonbitlang/core/builtin#ToJson\">ToJson</a>, G : <a href=\"moonbitlang/core/builtin#ToJson\">ToJson</a>, H : <a href=\"moonbitlang/core/builtin#ToJson\">ToJson</a>, I : <a href=\"moonbitlang/core/builtin#ToJson\">ToJson</a>, J : <a href=\"moonbitlang/core/builtin#ToJson\">ToJson</a>, K : <a href=\"moonbitlang/core/builtin#ToJson\">ToJson</a>] <a href=\"moonbitlang/core/builtin#ToJson\">ToJson</a> for (A, B, C, D, E, F, G, H, I, J, K)",
          "methods": [
            {
              "name": "to_json",
              "docstring": "",
              "signature": "fn to_json[A : <a href=\"moonbitlang/core/builtin#ToJson\">ToJson</a>, B : <a href=\"moonbitlang/core/builtin#ToJson\">ToJson</a>, C : <a href=\"moonbitlang/core/builtin#ToJson\">ToJson</a>, D : <a href=\"moonbitlang/core/builtin#ToJson\">ToJson</a>, E : <a href=\"moonbitlang/core/builtin#ToJson\">ToJson</a>, F : <a href=\"moonbitlang/core/builtin#ToJson\">ToJson</a>, G : <a href=\"moonbitlang/core/builtin#ToJson\">ToJson</a>, H : <a href=\"moonbitlang/core/builtin#ToJson\">ToJson</a>, I : <a href=\"moonbitlang/core/builtin#ToJson\">ToJson</a>, J : <a href=\"moonbitlang/core/builtin#ToJson\">ToJson</a>, K : <a href=\"moonbitlang/core/builtin#ToJson\">ToJson</a>](self : (A, B, C, D, E, F, G, H, I, J, K)) -> <a href=\"moonbitlang/core/json#Json\">Json</a>",
              "loc": { "line": 179, "column": 8 }
            }
          ],
          "loc": { "line": 167, "column": 1 }
        },
        {
          "docstring": "",
          "signature": "impl[A : <a href=\"moonbitlang/core/builtin#ToJson\">ToJson</a>, B : <a href=\"moonbitlang/core/builtin#ToJson\">ToJson</a>, C : <a href=\"moonbitlang/core/builtin#ToJson\">ToJson</a>, D : <a href=\"moonbitlang/core/builtin#ToJson\">ToJson</a>, E : <a href=\"moonbitlang/core/builtin#ToJson\">ToJson</a>, F : <a href=\"moonbitlang/core/builtin#ToJson\">ToJson</a>, G : <a href=\"moonbitlang/core/builtin#ToJson\">ToJson</a>, H : <a href=\"moonbitlang/core/builtin#ToJson\">ToJson</a>, I : <a href=\"moonbitlang/core/builtin#ToJson\">ToJson</a>, J : <a href=\"moonbitlang/core/builtin#ToJson\">ToJson</a>, K : <a href=\"moonbitlang/core/builtin#ToJson\">ToJson</a>, L : <a href=\"moonbitlang/core/builtin#ToJson\">ToJson</a>] <a href=\"moonbitlang/core/builtin#ToJson\">ToJson</a> for (A, B, C, D, E, F, G, H, I, J, K, L)",
          "methods": [
            {
              "name": "to_json",
              "docstring": "",
              "signature": "fn to_json[A : <a href=\"moonbitlang/core/builtin#ToJson\">ToJson</a>, B : <a href=\"moonbitlang/core/builtin#ToJson\">ToJson</a>, C : <a href=\"moonbitlang/core/builtin#ToJson\">ToJson</a>, D : <a href=\"moonbitlang/core/builtin#ToJson\">ToJson</a>, E : <a href=\"moonbitlang/core/builtin#ToJson\">ToJson</a>, F : <a href=\"moonbitlang/core/builtin#ToJson\">ToJson</a>, G : <a href=\"moonbitlang/core/builtin#ToJson\">ToJson</a>, H : <a href=\"moonbitlang/core/builtin#ToJson\">ToJson</a>, I : <a href=\"moonbitlang/core/builtin#ToJson\">ToJson</a>, J : <a href=\"moonbitlang/core/builtin#ToJson\">ToJson</a>, K : <a href=\"moonbitlang/core/builtin#ToJson\">ToJson</a>, L : <a href=\"moonbitlang/core/builtin#ToJson\">ToJson</a>](self : (A, B, C, D, E, F, G, H, I, J, K, L)) -> <a href=\"moonbitlang/core/json#Json\">Json</a>",
              "loc": { "line": 209, "column": 8 }
            }
          ],
          "loc": { "line": 196, "column": 1 }
        },
        {
          "docstring": "",
          "signature": "impl[A : <a href=\"moonbitlang/core/builtin#ToJson\">ToJson</a>, B : <a href=\"moonbitlang/core/builtin#ToJson\">ToJson</a>, C : <a href=\"moonbitlang/core/builtin#ToJson\">ToJson</a>, D : <a href=\"moonbitlang/core/builtin#ToJson\">ToJson</a>, E : <a href=\"moonbitlang/core/builtin#ToJson\">ToJson</a>, F : <a href=\"moonbitlang/core/builtin#ToJson\">ToJson</a>, G : <a href=\"moonbitlang/core/builtin#ToJson\">ToJson</a>, H : <a href=\"moonbitlang/core/builtin#ToJson\">ToJson</a>, I : <a href=\"moonbitlang/core/builtin#ToJson\">ToJson</a>, J : <a href=\"moonbitlang/core/builtin#ToJson\">ToJson</a>, K : <a href=\"moonbitlang/core/builtin#ToJson\">ToJson</a>, L : <a href=\"moonbitlang/core/builtin#ToJson\">ToJson</a>, M : <a href=\"moonbitlang/core/builtin#ToJson\">ToJson</a>] <a href=\"moonbitlang/core/builtin#ToJson\">ToJson</a> for (A, B, C, D, E, F, G, H, I, J, K, L, M)",
          "methods": [
            {
              "name": "to_json",
              "docstring": "",
              "signature": "fn to_json[A : <a href=\"moonbitlang/core/builtin#ToJson\">ToJson</a>, B : <a href=\"moonbitlang/core/builtin#ToJson\">ToJson</a>, C : <a href=\"moonbitlang/core/builtin#ToJson\">ToJson</a>, D : <a href=\"moonbitlang/core/builtin#ToJson\">ToJson</a>, E : <a href=\"moonbitlang/core/builtin#ToJson\">ToJson</a>, F : <a href=\"moonbitlang/core/builtin#ToJson\">ToJson</a>, G : <a href=\"moonbitlang/core/builtin#ToJson\">ToJson</a>, H : <a href=\"moonbitlang/core/builtin#ToJson\">ToJson</a>, I : <a href=\"moonbitlang/core/builtin#ToJson\">ToJson</a>, J : <a href=\"moonbitlang/core/builtin#ToJson\">ToJson</a>, K : <a href=\"moonbitlang/core/builtin#ToJson\">ToJson</a>, L : <a href=\"moonbitlang/core/builtin#ToJson\">ToJson</a>, M : <a href=\"moonbitlang/core/builtin#ToJson\">ToJson</a>](self : (A, B, C, D, E, F, G, H, I, J, K, L, M)) -> <a href=\"moonbitlang/core/json#Json\">Json</a>",
              "loc": { "line": 241, "column": 8 }
            }
          ],
          "loc": { "line": 227, "column": 1 }
        },
        {
          "docstring": "",
          "signature": "impl[A : <a href=\"moonbitlang/core/builtin#ToJson\">ToJson</a>, B : <a href=\"moonbitlang/core/builtin#ToJson\">ToJson</a>, C : <a href=\"moonbitlang/core/builtin#ToJson\">ToJson</a>, D : <a href=\"moonbitlang/core/builtin#ToJson\">ToJson</a>, E : <a href=\"moonbitlang/core/builtin#ToJson\">ToJson</a>, F : <a href=\"moonbitlang/core/builtin#ToJson\">ToJson</a>, G : <a href=\"moonbitlang/core/builtin#ToJson\">ToJson</a>, H : <a href=\"moonbitlang/core/builtin#ToJson\">ToJson</a>, I : <a href=\"moonbitlang/core/builtin#ToJson\">ToJson</a>, J : <a href=\"moonbitlang/core/builtin#ToJson\">ToJson</a>, K : <a href=\"moonbitlang/core/builtin#ToJson\">ToJson</a>, L : <a href=\"moonbitlang/core/builtin#ToJson\">ToJson</a>, M : <a href=\"moonbitlang/core/builtin#ToJson\">ToJson</a>, N : <a href=\"moonbitlang/core/builtin#ToJson\">ToJson</a>] <a href=\"moonbitlang/core/builtin#ToJson\">ToJson</a> for (A, B, C, D, E, F, G, H, I, J, K, L, M, N)",
          "methods": [
            {
              "name": "to_json",
              "docstring": "",
              "signature": "fn to_json[A : <a href=\"moonbitlang/core/builtin#ToJson\">ToJson</a>, B : <a href=\"moonbitlang/core/builtin#ToJson\">ToJson</a>, C : <a href=\"moonbitlang/core/builtin#ToJson\">ToJson</a>, D : <a href=\"moonbitlang/core/builtin#ToJson\">ToJson</a>, E : <a href=\"moonbitlang/core/builtin#ToJson\">ToJson</a>, F : <a href=\"moonbitlang/core/builtin#ToJson\">ToJson</a>, G : <a href=\"moonbitlang/core/builtin#ToJson\">ToJson</a>, H : <a href=\"moonbitlang/core/builtin#ToJson\">ToJson</a>, I : <a href=\"moonbitlang/core/builtin#ToJson\">ToJson</a>, J : <a href=\"moonbitlang/core/builtin#ToJson\">ToJson</a>, K : <a href=\"moonbitlang/core/builtin#ToJson\">ToJson</a>, L : <a href=\"moonbitlang/core/builtin#ToJson\">ToJson</a>, M : <a href=\"moonbitlang/core/builtin#ToJson\">ToJson</a>, N : <a href=\"moonbitlang/core/builtin#ToJson\">ToJson</a>](self : (A, B, C, D, E, F, G, H, I, J, K, L, M, N)) -> <a href=\"moonbitlang/core/json#Json\">Json</a>",
              "loc": { "line": 275, "column": 8 }
            }
          ],
          "loc": { "line": 260, "column": 1 }
        },
        {
          "docstring": "",
          "signature": "impl[A : <a href=\"moonbitlang/core/builtin#ToJson\">ToJson</a>, B : <a href=\"moonbitlang/core/builtin#ToJson\">ToJson</a>, C : <a href=\"moonbitlang/core/builtin#ToJson\">ToJson</a>, D : <a href=\"moonbitlang/core/builtin#ToJson\">ToJson</a>, E : <a href=\"moonbitlang/core/builtin#ToJson\">ToJson</a>, F : <a href=\"moonbitlang/core/builtin#ToJson\">ToJson</a>, G : <a href=\"moonbitlang/core/builtin#ToJson\">ToJson</a>, H : <a href=\"moonbitlang/core/builtin#ToJson\">ToJson</a>, I : <a href=\"moonbitlang/core/builtin#ToJson\">ToJson</a>, J : <a href=\"moonbitlang/core/builtin#ToJson\">ToJson</a>, K : <a href=\"moonbitlang/core/builtin#ToJson\">ToJson</a>, L : <a href=\"moonbitlang/core/builtin#ToJson\">ToJson</a>, M : <a href=\"moonbitlang/core/builtin#ToJson\">ToJson</a>, N : <a href=\"moonbitlang/core/builtin#ToJson\">ToJson</a>, O : <a href=\"moonbitlang/core/builtin#ToJson\">ToJson</a>] <a href=\"moonbitlang/core/builtin#ToJson\">ToJson</a> for (A, B, C, D, E, F, G, H, I, J, K, L, M, N, O)",
          "methods": [
            {
              "name": "to_json",
              "docstring": "",
              "signature": "fn to_json[A : <a href=\"moonbitlang/core/builtin#ToJson\">ToJson</a>, B : <a href=\"moonbitlang/core/builtin#ToJson\">ToJson</a>, C : <a href=\"moonbitlang/core/builtin#ToJson\">ToJson</a>, D : <a href=\"moonbitlang/core/builtin#ToJson\">ToJson</a>, E : <a href=\"moonbitlang/core/builtin#ToJson\">ToJson</a>, F : <a href=\"moonbitlang/core/builtin#ToJson\">ToJson</a>, G : <a href=\"moonbitlang/core/builtin#ToJson\">ToJson</a>, H : <a href=\"moonbitlang/core/builtin#ToJson\">ToJson</a>, I : <a href=\"moonbitlang/core/builtin#ToJson\">ToJson</a>, J : <a href=\"moonbitlang/core/builtin#ToJson\">ToJson</a>, K : <a href=\"moonbitlang/core/builtin#ToJson\">ToJson</a>, L : <a href=\"moonbitlang/core/builtin#ToJson\">ToJson</a>, M : <a href=\"moonbitlang/core/builtin#ToJson\">ToJson</a>, N : <a href=\"moonbitlang/core/builtin#ToJson\">ToJson</a>, O : <a href=\"moonbitlang/core/builtin#ToJson\">ToJson</a>](self : (A, B, C, D, E, F, G, H, I, J, K, L, M, N, O)) -> <a href=\"moonbitlang/core/json#Json\">Json</a>",
              "loc": { "line": 311, "column": 8 }
            }
          ],
          "loc": { "line": 295, "column": 1 }
        },
        {
          "docstring": "",
          "signature": "impl[A : <a href=\"moonbitlang/core/builtin#ToJson\">ToJson</a>, B : <a href=\"moonbitlang/core/builtin#ToJson\">ToJson</a>, C : <a href=\"moonbitlang/core/builtin#ToJson\">ToJson</a>, D : <a href=\"moonbitlang/core/builtin#ToJson\">ToJson</a>, E : <a href=\"moonbitlang/core/builtin#ToJson\">ToJson</a>, F : <a href=\"moonbitlang/core/builtin#ToJson\">ToJson</a>, G : <a href=\"moonbitlang/core/builtin#ToJson\">ToJson</a>, H : <a href=\"moonbitlang/core/builtin#ToJson\">ToJson</a>, I : <a href=\"moonbitlang/core/builtin#ToJson\">ToJson</a>, J : <a href=\"moonbitlang/core/builtin#ToJson\">ToJson</a>, K : <a href=\"moonbitlang/core/builtin#ToJson\">ToJson</a>, L : <a href=\"moonbitlang/core/builtin#ToJson\">ToJson</a>, M : <a href=\"moonbitlang/core/builtin#ToJson\">ToJson</a>, N : <a href=\"moonbitlang/core/builtin#ToJson\">ToJson</a>, O : <a href=\"moonbitlang/core/builtin#ToJson\">ToJson</a>, P : <a href=\"moonbitlang/core/builtin#ToJson\">ToJson</a>] <a href=\"moonbitlang/core/builtin#ToJson\">ToJson</a> for (A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P)",
          "methods": [
            {
              "name": "to_json",
              "docstring": "",
              "signature": "fn to_json[A : <a href=\"moonbitlang/core/builtin#ToJson\">ToJson</a>, B : <a href=\"moonbitlang/core/builtin#ToJson\">ToJson</a>, C : <a href=\"moonbitlang/core/builtin#ToJson\">ToJson</a>, D : <a href=\"moonbitlang/core/builtin#ToJson\">ToJson</a>, E : <a href=\"moonbitlang/core/builtin#ToJson\">ToJson</a>, F : <a href=\"moonbitlang/core/builtin#ToJson\">ToJson</a>, G : <a href=\"moonbitlang/core/builtin#ToJson\">ToJson</a>, H : <a href=\"moonbitlang/core/builtin#ToJson\">ToJson</a>, I : <a href=\"moonbitlang/core/builtin#ToJson\">ToJson</a>, J : <a href=\"moonbitlang/core/builtin#ToJson\">ToJson</a>, K : <a href=\"moonbitlang/core/builtin#ToJson\">ToJson</a>, L : <a href=\"moonbitlang/core/builtin#ToJson\">ToJson</a>, M : <a href=\"moonbitlang/core/builtin#ToJson\">ToJson</a>, N : <a href=\"moonbitlang/core/builtin#ToJson\">ToJson</a>, O : <a href=\"moonbitlang/core/builtin#ToJson\">ToJson</a>, P : <a href=\"moonbitlang/core/builtin#ToJson\">ToJson</a>](self : (A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P)) -> <a href=\"moonbitlang/core/json#Json\">Json</a>",
              "loc": { "line": 349, "column": 8 }
            }
          ],
          "loc": { "line": 332, "column": 1 }
        }
      ]
    }
  ],
  "types": [
    {
      "name": "ArgsLoc",
      "docstring": "",
      "signature": "pub(all) type ArgsLoc <a href=\"moonbitlang/core/array#Array\">Array</a>[<a href=\"moonbitlang/core/builtin#SourceLoc\">SourceLoc</a>?]",
      "loc": { "line": 27, "column": 15 },
      "methods": [
        {
          "name": "to_json",
          "docstring": "",
          "signature": "fn <a href=\"moonbitlang/core/builtin#ArgsLoc\">ArgsLoc</a>::to_json(self : <a href=\"moonbitlang/core/builtin#ArgsLoc\">ArgsLoc</a>) -> String",
          "loc": { "line": 30, "column": 17 }
        }
      ],
      "impls": [
        {
          "docstring": "",
          "signature": "impl <a href=\"moonbitlang/core/builtin#Show\">Show</a> for <a href=\"moonbitlang/core/builtin#ArgsLoc\">ArgsLoc</a>",
          "methods": [
            {
              "name": "output",
              "docstring": "automatically derived",
              "signature": "fn output(<a href=\"moonbitlang/core/builtin#ArgsLoc\">ArgsLoc</a>, <a href=\"moonbitlang/core/builtin#Logger\">Logger</a>) -> Unit",
              "loc": { "line": 27, "column": 48 }
            }
          ],
          "loc": { "line": 27, "column": 48 }
        }
      ]
    },
    {
      "name": "Array",
      "docstring": "\n An `Array` is a collection of values that supports random access and can\n grow in size.",
      "signature": "type Array",
      "loc": { "line": 21, "column": 8 },
      "methods": [
        {
          "name": "append",
          "docstring": "\n Appends all the elements of other array into self\n\n # Example\n ```\n let v1 = [3, 4, 5]\n let v2 = [6, 7, 8]\n v1.append(v2)\n ```",
          "signature": "fn <a href=\"moonbitlang/core/array#Array\">Array</a>::append[T](self : <a href=\"moonbitlang/core/array#Array\">Array</a>[T], other : <a href=\"moonbitlang/core/array#Array\">Array</a>[T]) -> Unit",
          "loc": { "line": 167, "column": 8 }
        },
        {
          "name": "binary_search",
          "docstring": "\n Performs a binary search on a sorted array to find the index of a given element.\n \n # Example\n ```\n let v = [3, 4, 5]\n let result = v.binary_search(3)\n assert_eq!(result, Ok(0)) // The element 3 is found at index 0\n ```\n \n # Arguments\n - `self`: The array in which to perform the search.\n - `value`: The element to search for in the array.\n \n # Returns\n - `Result[Int, Int]`:\n If the element is found, an `Ok` variant is returned, containing the index of the matching element in the array. \n If there are multiple matches, the leftmost match will be returned. \n If the element is not found, an `Err` variant is returned, containing the index where the element could be inserted to maintain the sorted order.\n \n # Notes\n - Ensure that the array is sorted in increasing order before calling this function. \n - If the array is not sorted, the returned result is undefined and should not be relied on.",
          "signature": "fn <a href=\"moonbitlang/core/array#Array\">Array</a>::binary_search[T : <a href=\"moonbitlang/core/builtin#Compare\">Compare</a> + <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>](self : <a href=\"moonbitlang/core/array#Array\">Array</a>[T], value : T) -> <a href=\"moonbitlang/core/result#Result\">Result</a>[Int, Int]",
          "loc": { "line": 626, "column": 8 }
        },
        {
          "name": "binary_search_by",
          "docstring": "\n Performs a binary search on a sorted array using a custom comparator function, and returns the index of the given element.\n \n The comparator function should return an `Int` that indicates whether the argument is less than `(-1)`, equal to `(0)`, or greater than `(1)` \n the target element.\n \n # Example\n ```\n let v = [3, 4, 5]\n let result = v.binary_search_by(\n   fn(v : Int) { if v < 3 { -1 } else if v == 3 { 0 } else { 1 } },\n )\n assert_eq!(result, Ok(0)) // The element 3 is found at index 0\n ```\n # Type Parameters\n - `T`: The type of elements in the array.\n \n # Arguments\n - `self`: The array in which to perform the search.\n - `cmp`: A closure that defines the comparator function, taking an element of type `T` and returning an `Int`.\n \n # Returns\n - `Result[Int, Int]`: If the element is found, `Ok` is returned with the index of the element.\n If the element is not found, `Err` is returned with the index where the element could be inserted to maintain sorted order.\n \n # Notes\n - The array must be sorted, and the comparator function should be consistent with the sorted order of the array.\n - If not, the returned result is undefined and should not be relied on.",
          "signature": "fn <a href=\"moonbitlang/core/array#Array\">Array</a>::binary_search_by[T](self : <a href=\"moonbitlang/core/array#Array\">Array</a>[T], cmp : (T) -> Int) -> <a href=\"moonbitlang/core/result#Result\">Result</a>[Int, Int]",
          "loc": { "line": 677, "column": 8 }
        },
        {
          "name": "blit_to",
          "docstring": "\n Copies elements from one array to another array. The destination array will grow if necessary.\n \n # Arguments\n - `self`: The source array to copy elements from\n - `dst`: The destination array to copy elements to\n - `len`: The number of elements to copy\n - `src_offset`: Starting index in the source array (default: 0)\n - `dst_offset`: Starting index in the destination array (default: 0)\n\n # Panics\n Panics if:\n - `len` is negative\n - `src_offset` is negative\n - `dst_offset` is negative  \n - `src_offset + len` exceeds source array length\n - `dst_offset` exceeds destination array length",
          "signature": "fn <a href=\"moonbitlang/core/array#Array\">Array</a>::blit_to[A](self : <a href=\"moonbitlang/core/array#Array\">Array</a>[A], dst : <a href=\"moonbitlang/core/array#Array\">Array</a>[A], len~ : Int, src_offset~ : Int = .., dst_offset~ : Int = ..) -> Unit",
          "loc": { "line": 66, "column": 15 }
        },
        {
          "name": "capacity",
          "docstring": "\n Returns the total number of elements the array can hold without reallocating.",
          "signature": "fn <a href=\"moonbitlang/core/array#Array\">Array</a>::capacity[T](self : <a href=\"moonbitlang/core/array#Array\">Array</a>[T]) -> Int",
          "loc": { "line": 36, "column": 8 }
        },
        {
          "name": "chunk_by",
          "docstring": "\n Group the elements of the array into chunks based on a predicate.\n\n # Example\n ```\n let v = [1, 1, 2, 3, 2, 3, 2, 3, 4]\n let chunks = v.chunk_by(fn(x, y) { x <= y })\n assert_eq!(chunks, [[1, 1, 2, 3], [2, 3], [2, 3, 4]])\n ```",
          "signature": "fn <a href=\"moonbitlang/core/array#Array\">Array</a>::chunk_by[T](self : <a href=\"moonbitlang/core/array#Array\">Array</a>[T], pred : (T, T) -> Bool) -> <a href=\"moonbitlang/core/array#Array\">Array</a>[<a href=\"moonbitlang/core/array#Array\">Array</a>[T]]",
          "loc": { "line": 1014, "column": 8 }
        },
        {
          "name": "chunks",
          "docstring": "\n Group the elements of the array into sized chunks.\n\n If the elements of the array cannot be divided into equal-sized chunks, the last chunk will be smaller.\n\n # Example\n ```\n let v = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n let chunks = v.chunks(3)\n assert_eq!(chunks, [[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n ```",
          "signature": "fn <a href=\"moonbitlang/core/array#Array\">Array</a>::chunks[T](self : <a href=\"moonbitlang/core/array#Array\">Array</a>[T], size : Int) -> <a href=\"moonbitlang/core/array#Array\">Array</a>[<a href=\"moonbitlang/core/array#Array\">Array</a>[T]]",
          "loc": { "line": 991, "column": 8 }
        },
        {
          "name": "clear",
          "docstring": "\n Clears the array, removing all values.\n\n This method has no effect on the allocated capacity of the array, only setting the length to 0.\n\n # Example\n ```\n let v = [3, 4, 5]\n v.clear()\n assert_eq!(v.length(), 0)\n ```",
          "signature": "fn <a href=\"moonbitlang/core/array#Array\">Array</a>::clear[T](self : <a href=\"moonbitlang/core/array#Array\">Array</a>[T]) -> Unit",
          "loc": { "line": 263, "column": 8 }
        },
        {
          "name": "compare",
          "docstring": "",
          "signature": "fn <a href=\"moonbitlang/core/array#Array\">Array</a>::compare[T : <a href=\"moonbitlang/core/builtin#Compare\">Compare</a> + <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>](self : <a href=\"moonbitlang/core/array#Array\">Array</a>[T], other : <a href=\"moonbitlang/core/array#Array\">Array</a>[T]) -> Int",
          "loc": { "line": 119, "column": 8 }
        },
        {
          "name": "contains",
          "docstring": "\n Checks if the array contains an element.\n\n # Example\n ```\n let v = [3, 4, 5]\n assert_true!(v.contains(3))\n ```",
          "signature": "fn <a href=\"moonbitlang/core/array#Array\">Array</a>::contains[T : <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>](self : <a href=\"moonbitlang/core/array#Array\">Array</a>[T], value : T) -> Bool",
          "loc": { "line": 453, "column": 8 }
        },
        {
          "name": "dedup",
          "docstring": "\n Removes consecutive repeated elements in the array according to the Eq trait.\n\n # Example\n\n ```\n let v = [3, 4, 4, 5, 5, 5]\n v.dedup() // v = [3, 4, 5]\n ```\n\n # Notes\n\n Usually, you might want to sort the array before calling this function. For example:\n\n ```\n let v = [3, 4, 5, 4, 5, 5]\n v.sort()\n v.dedup() // v = [3, 4, 5]\n ```",
          "signature": "fn <a href=\"moonbitlang/core/array#Array\">Array</a>::dedup[T : <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>](self : <a href=\"moonbitlang/core/array#Array\">Array</a>[T]) -> Unit",
          "loc": { "line": 939, "column": 8 }
        },
        {
          "name": "default",
          "docstring": "",
          "signature": "fn <a href=\"moonbitlang/core/array#Array\">Array</a>::default[T]() -> <a href=\"moonbitlang/core/array#Array\">Array</a>[T]",
          "loc": { "line": 1079, "column": 15 }
        },
        {
          "name": "drain",
          "docstring": "\n Removes the specified range from the array and returns it.\n\n This functions returns a array range from `begin` to `end` `[begin, end)`\n\n # Example\n ```\n let v = [3, 4, 5]\n let vv = v.drain(1, 2) // vv = [4], v = [3, 5]\n assert_eq!(vv, [4])\n assert_eq!(v, [3, 5])\n ```\n @alert unsafe \"Panic if index is out of bounds.\"",
          "signature": "fn <a href=\"moonbitlang/core/array#Array\">Array</a>::drain[T](self : <a href=\"moonbitlang/core/array#Array\">Array</a>[T], begin : Int, end : Int) -> <a href=\"moonbitlang/core/array#Array\">Array</a>[T]",
          "loc": { "line": 302, "column": 8 }
        },
        {
          "name": "each",
          "docstring": "\n Iterates over the elements of the array.\n\n # Example\n ```\n let v = Array::new(capacity=3)\n v.push(3)\n v.push(4)\n v.push(5)\n let mut sum = 0\n v.each(fn (x) {sum = sum + x})\n ```",
          "signature": "fn <a href=\"moonbitlang/core/array#Array\">Array</a>::each[T](self : <a href=\"moonbitlang/core/array#Array\">Array</a>[T], f : (T) -> Unit) -> Unit",
          "loc": { "line": 188, "column": 8 }
        },
        {
          "name": "eachi",
          "docstring": "\n Iterates over the elements of the array with index.\n\n # Example\n ```\n let v = [3, 4, 5]\n let mut sum = 0\n v.eachi(fn (i, x) {sum = sum + x + i})\n ```",
          "signature": "fn <a href=\"moonbitlang/core/array#Array\">Array</a>::eachi[T](self : <a href=\"moonbitlang/core/array#Array\">Array</a>[T], f : (Int, T) -> Unit) -> Unit",
          "loc": { "line": 246, "column": 8 }
        },
        {
          "name": "ends_with",
          "docstring": "\n Check if the array ends with a given suffix.\n\n # Example\n ```\n let v = [3, 4, 5]\n assert_true!(v.ends_with([5]))\n ```",
          "signature": "fn <a href=\"moonbitlang/core/array#Array\">Array</a>::ends_with[T : <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>](self : <a href=\"moonbitlang/core/array#Array\">Array</a>[T], suffix : <a href=\"moonbitlang/core/array#Array\">Array</a>[T]) -> Bool",
          "loc": { "line": 492, "column": 8 }
        },
        {
          "name": "extract_if",
          "docstring": "\n Extract elements from the array according to the given function.\n\n This function will remove the elements from the original array and return a new array.\n # Example\n ```\n let \n v = [3, 4, 5]\n let vv = v.extract_if(fn(x) { x > 3 })\n assert_eq!(vv, [4, 5])\n assert_eq!(v, [3])\n ```",
          "signature": "fn <a href=\"moonbitlang/core/array#Array\">Array</a>::extract_if[T](self : <a href=\"moonbitlang/core/array#Array\">Array</a>[T], f : (T) -> Bool) -> <a href=\"moonbitlang/core/array#Array\">Array</a>[T]",
          "loc": { "line": 965, "column": 8 }
        },
        {
          "name": "filter",
          "docstring": "\n Filters the array with a predicate function.\n\n # Example\n ```\n let arr = [1, 2, 3, 4, 5, 6]\n let v = arr.filter(fn (x) { x % 2 == 0 })\n assert_eq!(v, [2, 4, 6])\n ```",
          "signature": "fn <a href=\"moonbitlang/core/array#Array\">Array</a>::filter[T](self : <a href=\"moonbitlang/core/array#Array\">Array</a>[T], f : (T) -> Bool) -> <a href=\"moonbitlang/core/array#Array\">Array</a>[T]",
          "loc": { "line": 343, "column": 8 }
        },
        {
          "name": "find_index",
          "docstring": "\n @alert deprecated \"Use `search_by` instead.\"\n @coverage.skip",
          "signature": "fn <a href=\"moonbitlang/core/array#Array\">Array</a>::find_index[T](self : <a href=\"moonbitlang/core/array#Array\">Array</a>[T], f : (T) -> Bool) -> Int?",
          "loc": { "line": 577, "column": 8 }
        },
        {
          "name": "flatten",
          "docstring": "\n Flattens a array of arrays into a array.\n\n # Example\n ```\n let v = [[3, 4], [5, 6]].flatten()\n assert_eq!(v, [3, 4, 5, 6])\n ```\n TODO: perf could be improved by pre-allocated",
          "signature": "fn <a href=\"moonbitlang/core/array#Array\">Array</a>::flatten[T](self : <a href=\"moonbitlang/core/array#Array\">Array</a>[<a href=\"moonbitlang/core/array#Array\">Array</a>[T]]) -> <a href=\"moonbitlang/core/array#Array\">Array</a>[T]",
          "loc": { "line": 775, "column": 8 }
        },
        {
          "name": "fold",
          "docstring": "\n Fold out values from an array according to certain rules.\n\n # Example\n ```\n let sum = [1, 2, 3, 4, 5].fold(init=0, fn { sum, elem => sum + elem })\n assert_eq!(sum, 15)\n ```",
          "signature": "fn <a href=\"moonbitlang/core/array#Array\">Array</a>::fold[A, B](self : <a href=\"moonbitlang/core/array#Array\">Array</a>[A], init~ : B, f : (B, A) -> B) -> B",
          "loc": { "line": 807, "column": 8 }
        },
        {
          "name": "fold_left",
          "docstring": "\n Fold out values from an array according to certain rules.\n\n # Example\n ```\n let sum = [1, 2, 3, 4, 5].fold(init=0, fn { sum, elem => sum + elem })\n assert_eq!(sum, 15)\n ```\n @alert deprecated \"Use `fold` instead.\"\n @coverage.skip",
          "signature": "fn <a href=\"moonbitlang/core/array#Array\">Array</a>::fold_left[T, U](self : <a href=\"moonbitlang/core/array#Array\">Array</a>[T], f : (U, T) -> U, init~ : U) -> U",
          "loc": { "line": 874, "column": 8 }
        },
        {
          "name": "fold_lefti",
          "docstring": "\n Fold out values from an array according to certain rules with index.\n\n # Example\n ```\n let sum = [1, 2, 3, 4, 5].foldi(init=0, fn { index, sum, _elem => sum + index })\n assert_eq!(sum, 10)\n ```\n @alert deprecated \"Use `foldi` instead.\"\n @coverage.skip",
          "signature": "fn <a href=\"moonbitlang/core/array#Array\">Array</a>::fold_lefti[T, U](self : <a href=\"moonbitlang/core/array#Array\">Array</a>[T], f : (Int, U, T) -> U, init~ : U) -> U",
          "loc": { "line": 902, "column": 8 }
        },
        {
          "name": "fold_right",
          "docstring": "\n Fold out values from an array according to certain rules in reversed turn.\n\n # Example\n ```\n let sum = [1, 2, 3, 4, 5].rev_fold(init=0, fn { sum, elem => sum + elem })\n assert_eq!(sum, 15)\n ```\n @alert deprecated \"Use `rev_fold` instead.\"\n @coverage.skip",
          "signature": "fn <a href=\"moonbitlang/core/array#Array\">Array</a>::fold_right[T, U](self : <a href=\"moonbitlang/core/array#Array\">Array</a>[T], f : (U, T) -> U, init~ : U) -> U",
          "loc": { "line": 888, "column": 8 }
        },
        {
          "name": "fold_righti",
          "docstring": "\n Fold out values from an array according to certain rules in reversed turn with index.\n\n # Example\n ```\n let sum = [1, 2, 3, 4, 5].rev_foldi(init=0, fn { index, sum, _elem => sum + index })\n assert_eq!(sum, 10)\n ```\n @alert deprecated \"Use `rev_foldi` instead.\"\n @coverage.skip",
          "signature": "fn <a href=\"moonbitlang/core/array#Array\">Array</a>::fold_righti[T, U](self : <a href=\"moonbitlang/core/array#Array\">Array</a>[T], f : (Int, U, T) -> U, init~ : U) -> U",
          "loc": { "line": 916, "column": 8 }
        },
        {
          "name": "foldi",
          "docstring": "\n Fold out values from an array according to certain rules with index.\n\n # Example\n ```\n let sum = [1, 2, 3, 4, 5].foldi(init=0, fn { index, sum, _elem => sum + index })\n assert_eq!(sum, 10)\n ```",
          "signature": "fn <a href=\"moonbitlang/core/array#Array\">Array</a>::foldi[A, B](self : <a href=\"moonbitlang/core/array#Array\">Array</a>[A], init~ : B, f : (Int, B, A) -> B) -> B",
          "loc": { "line": 839, "column": 8 }
        },
        {
          "name": "from_fixed_array",
          "docstring": "\n Creates a new array from an array.",
          "signature": "fn <a href=\"moonbitlang/core/array#Array\">Array</a>::from_fixed_array[T](arr : <a href=\"moonbitlang/core/array#FixedArray\">FixedArray</a>[T]) -> <a href=\"moonbitlang/core/array#Array\">Array</a>[T]",
          "loc": { "line": 17, "column": 15 }
        },
        {
          "name": "get",
          "docstring": "\n Retrieves the element at the specified index from the array, or `None` if index is out of bounds\n\n # Example\n ```\n let v = []\n v.push(3)\n assert_eq!(v.get(0), Some(3))\n ```",
          "signature": "fn <a href=\"moonbitlang/core/array#Array\">Array</a>::get[T](self : <a href=\"moonbitlang/core/array#Array\">Array</a>[T], index : Int) -> T?",
          "loc": { "line": 73, "column": 8 }
        },
        {
          "name": "insert",
          "docstring": "\n Inserts an element at a given index within the array.\n\n # Example\n ```\n [3, 4, 5].insert(1, 6)\n ```\n @alert unsafe \"Panic if index is out of bounds.\"",
          "signature": "fn <a href=\"moonbitlang/core/array#Array\">Array</a>::insert[T](self : <a href=\"moonbitlang/core/array#Array\">Array</a>[T], index : Int, value : T) -> Unit",
          "loc": { "line": 326, "column": 8 }
        },
        {
          "name": "is_empty",
          "docstring": "\n Test if the array is empty.\n\n # Example\n ```\n let v : Array[Int] = []\n assert_true!(v.is_empty())\n ```",
          "signature": "fn <a href=\"moonbitlang/core/array#Array\">Array</a>::is_empty[T](self : <a href=\"moonbitlang/core/array#Array\">Array</a>[T]) -> Bool",
          "loc": { "line": 361, "column": 8 }
        },
        {
          "name": "is_sorted",
          "docstring": "\n Test if the array is sorted.\n\n # Example\n ```\n let v = [3, 4, 5]\n assert_true!(v.is_sorted())\n ```",
          "signature": "fn <a href=\"moonbitlang/core/array#Array\">Array</a>::is_sorted[T : <a href=\"moonbitlang/core/builtin#Compare\">Compare</a> + <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>](self : <a href=\"moonbitlang/core/array#Array\">Array</a>[T]) -> Bool",
          "loc": { "line": 373, "column": 8 }
        },
        {
          "name": "iter",
          "docstring": "",
          "signature": "fn <a href=\"moonbitlang/core/array#Array\">Array</a>::iter[T](self : <a href=\"moonbitlang/core/array#Array\">Array</a>[T]) -> <a href=\"moonbitlang/core/builtin#Iter\">Iter</a>[T]",
          "loc": { "line": 1055, "column": 8 }
        },
        {
          "name": "iter2",
          "docstring": "",
          "signature": "fn <a href=\"moonbitlang/core/array#Array\">Array</a>::iter2[A](self : <a href=\"moonbitlang/core/array#Array\">Array</a>[A]) -> <a href=\"moonbitlang/core/builtin#Iter2\">Iter2</a>[Int, A]",
          "loc": { "line": 1067, "column": 8 }
        },
        {
          "name": "length",
          "docstring": "\n Returns the number of elements in the array.\n @intrinsic %array.length",
          "signature": "fn <a href=\"moonbitlang/core/array#Array\">Array</a>::length[T](self : <a href=\"moonbitlang/core/array#Array\">Array</a>[T]) -> Int",
          "loc": { "line": 44, "column": 8 }
        },
        {
          "name": "make",
          "docstring": "\n Creates a new array, with the specified length [len] and element [elem].",
          "signature": "fn <a href=\"moonbitlang/core/array#Array\">Array</a>::make[T](len : Int, elem : T) -> <a href=\"moonbitlang/core/array#Array\">Array</a>[T]",
          "loc": { "line": 26, "column": 15 }
        },
        {
          "name": "map",
          "docstring": "\n Maps a function over the elements of the array.\n\n # Example\n ```\n let v = [3, 4, 5]\n let v2 = v.map(fn (x) {x + 1})\n assert_eq!(v2, [4, 5, 6])\n ```",
          "signature": "fn <a href=\"moonbitlang/core/array#Array\">Array</a>::map[T, U](self : <a href=\"moonbitlang/core/array#Array\">Array</a>[T], f : (T) -> U) -> <a href=\"moonbitlang/core/array#Array\">Array</a>[U]",
          "loc": { "line": 276, "column": 8 }
        },
        {
          "name": "map_inplace",
          "docstring": "\n Maps a function over the elements of the array in place.\n\n # Example\n ```\n let v = [3, 4, 5]\n v.map_inplace(fn (x) {x + 1})\n assert_eq!(v, [4, 5, 6])\n ```",
          "signature": "fn <a href=\"moonbitlang/core/array#Array\">Array</a>::map_inplace[T](self : <a href=\"moonbitlang/core/array#Array\">Array</a>[T], f : (T) -> T) -> Unit",
          "loc": { "line": 293, "column": 8 }
        },
        {
          "name": "mapi",
          "docstring": "\n Maps a function over the elements of the array with index.\n\n # Example\n ```\n let v = [3, 4, 5]\n let v2 = v.mapi(fn (i, x) {x + i})\n assert_eq!(v2, [3, 5, 7])\n ```",
          "signature": "fn <a href=\"moonbitlang/core/array#Array\">Array</a>::mapi[T, U](self : <a href=\"moonbitlang/core/array#Array\">Array</a>[T], f : (Int, T) -> U) -> <a href=\"moonbitlang/core/array#Array\">Array</a>[U]",
          "loc": { "line": 308, "column": 8 }
        },
        {
          "name": "mapi_inplace",
          "docstring": "\n Maps a function over the elements of the array with index in place.\n\n # Example\n ```\n let v = [3, 4, 5]\n v.mapi_inplace(fn (i, x) {x + i})\n assert_eq!(v, [3, 5, 7])\n ```",
          "signature": "fn <a href=\"moonbitlang/core/array#Array\">Array</a>::mapi_inplace[T](self : <a href=\"moonbitlang/core/array#Array\">Array</a>[T], f : (Int, T) -> T) -> Unit",
          "loc": { "line": 328, "column": 8 }
        },
        {
          "name": "new",
          "docstring": "\n Creates a new array.",
          "signature": "fn <a href=\"moonbitlang/core/array#Array\">Array</a>::new[T](capacity~ : Int = ..) -> <a href=\"moonbitlang/core/array#Array\">Array</a>[T]",
          "loc": { "line": 33, "column": 15 }
        },
        {
          "name": "op_add",
          "docstring": "",
          "signature": "fn <a href=\"moonbitlang/core/array#Array\">Array</a>::op_add[T](self : <a href=\"moonbitlang/core/array#Array\">Array</a>[T], other : <a href=\"moonbitlang/core/array#Array\">Array</a>[T]) -> <a href=\"moonbitlang/core/array#Array\">Array</a>[T]",
          "loc": { "line": 139, "column": 8 }
        },
        {
          "name": "op_as_view",
          "docstring": "",
          "signature": "fn <a href=\"moonbitlang/core/array#Array\">Array</a>::op_as_view[T](self : <a href=\"moonbitlang/core/array#Array\">Array</a>[T], start~ : Int = .., end? : Int) -> <a href=\"moonbitlang/core/array#ArrayView\">ArrayView</a>[T]",
          "loc": { "line": 68, "column": 8 }
        },
        {
          "name": "op_equal",
          "docstring": "\n Compares two arrays for equality.",
          "signature": "fn <a href=\"moonbitlang/core/array#Array\">Array</a>::op_equal[T : <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>](self : <a href=\"moonbitlang/core/array#Array\">Array</a>[T], other : <a href=\"moonbitlang/core/array#Array\">Array</a>[T]) -> Bool",
          "loc": { "line": 104, "column": 8 }
        },
        {
          "name": "op_get",
          "docstring": "\n Retrieves the element at the specified index from the array.\n\n # Example\n ```\n let v = []\n v.push(3)\n assert_eq!(v[0], 3)\n ```\n @alert unsafe \"Panic if index is out of bounds\"\n @intrinsic %array.get",
          "signature": "fn <a href=\"moonbitlang/core/array#Array\">Array</a>::op_get[T](self : <a href=\"moonbitlang/core/array#Array\">Array</a>[T], index : Int) -> T",
          "loc": { "line": 58, "column": 8 }
        },
        {
          "name": "op_set",
          "docstring": "\n Sets the value of the element at the specified index.\n\n # Example\n ```\n let v = []\n v.push(3)\n assert_eq!(v[0], 3)\n ```\n @alert unsafe \"Panic if index is out of bounds.\"\n @intrinsic %array.set",
          "signature": "fn <a href=\"moonbitlang/core/array#Array\">Array</a>::op_set[T](self : <a href=\"moonbitlang/core/array#Array\">Array</a>[T], index : Int, value : T) -> Unit",
          "loc": { "line": 96, "column": 8 }
        },
        {
          "name": "pop",
          "docstring": "\n Removes the last element from a array and returns it, or `None` if it is empty.\n\n # Example\n ```\n let v = [1, 2, 3]\n assert_eq!(v.pop(), Some(3))\n assert_eq!(v, [1, 2])\n ```",
          "signature": "fn <a href=\"moonbitlang/core/array#Array\">Array</a>::pop[T](self : <a href=\"moonbitlang/core/array#Array\">Array</a>[T]) -> T?",
          "loc": { "line": 225, "column": 8 }
        },
        {
          "name": "pop_exn",
          "docstring": "\n @alert deprecated \"Use `unsafe_pop` instead\"\n @coverage.skip",
          "signature": "fn <a href=\"moonbitlang/core/array#Array\">Array</a>::pop_exn[T](self : <a href=\"moonbitlang/core/array#Array\">Array</a>[T]) -> T",
          "loc": { "line": 241, "column": 8 }
        },
        {
          "name": "push",
          "docstring": "\n Adds an element to the end of the array.\n\n If the array is at capacity, it will be reallocated.\n\n # Example\n ```\n let v = []\n v.push(3)\n ```",
          "signature": "fn <a href=\"moonbitlang/core/array#Array\">Array</a>::push[T](self : <a href=\"moonbitlang/core/array#Array\">Array</a>[T], value : T) -> Unit",
          "loc": { "line": 207, "column": 8 }
        },
        {
          "name": "remove",
          "docstring": "\n Remove an element from the array at a given index.\n\n Removes and returns the element at position index within the array, shifting all elements after it to the left.\n\n # Example\n ```\n let v = [3, 4, 5]\n assert_eq!(v.remove(1), 4)\n assert_eq!(v, [3, 5])\n ```\n @alert unsafe \"Panic if index is out of bounds.\"",
          "signature": "fn <a href=\"moonbitlang/core/array#Array\">Array</a>::remove[T](self : <a href=\"moonbitlang/core/array#Array\">Array</a>[T], index : Int) -> T",
          "loc": { "line": 271, "column": 8 }
        },
        {
          "name": "repeat",
          "docstring": "\n Create a array by repeat a given array for a given times.\n\n # Example\n ```\n let v = [3, 4].repeat(2)\n assert_eq!(v, [3, 4, 3, 4])\n ```",
          "signature": "fn <a href=\"moonbitlang/core/array#Array\">Array</a>::repeat[T](self : <a href=\"moonbitlang/core/array#Array\">Array</a>[T], times : Int) -> <a href=\"moonbitlang/core/array#Array\">Array</a>[T]",
          "loc": { "line": 791, "column": 8 }
        },
        {
          "name": "reserve_capacity",
          "docstring": "\n Reserves capacity to ensure that it can hold at least the number of elements\n specified by the `capacity` argument.\n\n # Example\n\n ```\n let v = [1]\n v.reserve_capacity(10)\n assert_eq!(v.capacity(), 10)\n ```",
          "signature": "fn <a href=\"moonbitlang/core/array#Array\">Array</a>::reserve_capacity[T](self : <a href=\"moonbitlang/core/array#Array\">Array</a>[T], capacity : Int) -> Unit",
          "loc": { "line": 170, "column": 8 }
        },
        {
          "name": "resize",
          "docstring": "\n Resize the array to a new length with a default value.\n\n # Example\n ```\n let v = [3, 4, 5]\n v.resize(1, 0)\n assert_eq!(v, [3])\n ```\n @alert unsafe \"Panic if new length is negative.\"",
          "signature": "fn <a href=\"moonbitlang/core/array#Array\">Array</a>::resize[T](self : <a href=\"moonbitlang/core/array#Array\">Array</a>[T], new_len : Int, f : T) -> Unit",
          "loc": { "line": 753, "column": 8 }
        },
        {
          "name": "retain",
          "docstring": "\n Retains only the elements specified by the predicate.\n\n # Example\n ```\n let v = [3, 4, 5]\n v.retain(fn(x) { x > 3 })\n ```\n TODO: perf could be improved",
          "signature": "fn <a href=\"moonbitlang/core/array#Array\">Array</a>::retain[T](self : <a href=\"moonbitlang/core/array#Array\">Array</a>[T], f : (T) -> Bool) -> Unit",
          "loc": { "line": 730, "column": 8 }
        },
        {
          "name": "rev",
          "docstring": "\n Reverses the order of elements in the Array and returns a new Array.",
          "signature": "fn <a href=\"moonbitlang/core/array#Array\">Array</a>::rev[T](self : <a href=\"moonbitlang/core/array#Array\">Array</a>[T]) -> <a href=\"moonbitlang/core/array#Array\">Array</a>[T]",
          "loc": { "line": 403, "column": 8 }
        },
        {
          "name": "rev_each",
          "docstring": "\n Iterates over the elements of the array in reverse order, applying the given\n function to each element.\n\n Parameters:\n\n * `array` : The array to iterate over.\n * `f` : A function that takes an element of type `T` and returns `Unit`. This\n function is applied to each element of the array in reverse order.\n\n Example:\n\n ```\n let v = [3, 4, 5]\n let mut sum = 0\n v.rev_each(fn(x) { sum = sum - x })\n @json.inspect!(sum, content=-12)\n \n ```",
          "signature": "fn <a href=\"moonbitlang/core/array#Array\">Array</a>::rev_each[T](self : <a href=\"moonbitlang/core/array#Array\">Array</a>[T], f : (T) -> Unit) -> Unit",
          "loc": { "line": 213, "column": 8 }
        },
        {
          "name": "rev_eachi",
          "docstring": "\n Iterates over the elements of the array with index in reversed order.\n \n # Example\n ```\n let v = [3, 4, 5]\n let mut sum = 0\n v.rev_eachi(fn(i, x) { sum = sum + x + i })\n assert_eq!(sum, 15)\n ```",
          "signature": "fn <a href=\"moonbitlang/core/array#Array\">Array</a>::rev_eachi[T](self : <a href=\"moonbitlang/core/array#Array\">Array</a>[T], f : (Int, T) -> Unit) -> Unit",
          "loc": { "line": 230, "column": 8 }
        },
        {
          "name": "rev_fold",
          "docstring": "\n Fold out values from an array according to certain rules in reversed turn.\n\n # Example\n ```\n let sum = [1, 2, 3, 4, 5].rev_fold(init=0, fn { sum, elem => sum + elem })\n assert_eq!(sum, 15)\n ```",
          "signature": "fn <a href=\"moonbitlang/core/array#Array\">Array</a>::rev_fold[A, B](self : <a href=\"moonbitlang/core/array#Array\">Array</a>[A], init~ : B, f : (B, A) -> B) -> B",
          "loc": { "line": 823, "column": 8 }
        },
        {
          "name": "rev_foldi",
          "docstring": "\n Fold out values from an array according to certain rules in reversed turn with index.\n\n # Example\n ```\n let sum = [1, 2, 3, 4, 5].rev_foldi(init=0, fn { index, sum, _elem => sum + index })\n assert_eq!(sum, 10)\n ```",
          "signature": "fn <a href=\"moonbitlang/core/array#Array\">Array</a>::rev_foldi[A, B](self : <a href=\"moonbitlang/core/array#Array\">Array</a>[A], init~ : B, f : (Int, B, A) -> B) -> B",
          "loc": { "line": 855, "column": 8 }
        },
        {
          "name": "rev_inplace",
          "docstring": "\n Reverses the order of elements in the Array, in place.\n\n # Example\n ```\n let v = [3, 4, 5]\n v.rev_inplace()\n ```",
          "signature": "fn <a href=\"moonbitlang/core/array#Array\">Array</a>::rev_inplace[T](self : <a href=\"moonbitlang/core/array#Array\">Array</a>[T]) -> Unit",
          "loc": { "line": 393, "column": 8 }
        },
        {
          "name": "search",
          "docstring": "\n Search the array index for a given element.\n\n # Example\n ```\n let v = [3, 4, 5]\n let index = v.search(3)\n assert_eq!(index, Some(0))\n ```",
          "signature": "fn <a href=\"moonbitlang/core/array#Array\">Array</a>::search[T : <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>](self : <a href=\"moonbitlang/core/array#Array\">Array</a>[T], value : T) -> Int?",
          "loc": { "line": 564, "column": 8 }
        },
        {
          "name": "search_by",
          "docstring": "\n Search the index of the first element that satisfies the predicate.\n\n # Example\n \n ```\n let v = [1, 2, 3, 4, 5]\n match v.search_by(fn(x) { x == 3 }) {\n   Some(index) => assert_eq!(index, 2) // 2\n   None => println(\"Not found\")\n }\n ```",
          "signature": "fn <a href=\"moonbitlang/core/array#Array\">Array</a>::search_by[T](self : <a href=\"moonbitlang/core/array#Array\">Array</a>[T], f : (T) -> Bool) -> Int?",
          "loc": { "line": 593, "column": 8 }
        },
        {
          "name": "shrink_to_fit",
          "docstring": "\n Shrinks the capacity of the array as much as possible.\n\n # Example\n\n ```\n let v = Array::new(capacity=10)\n v.push(1)\n v.push(2)\n v.push(3)\n v.shrink_to_fit()\n assert_eq!(v.capacity(), 3)\n ```",
          "signature": "fn <a href=\"moonbitlang/core/array#Array\">Array</a>::shrink_to_fit[T](self : <a href=\"moonbitlang/core/array#Array\">Array</a>[T]) -> Unit",
          "loc": { "line": 190, "column": 8 }
        },
        {
          "name": "split",
          "docstring": "\n Split the array into chunks based on a predicate.\n\n # Example\n ```\n let v = [1, 0, 2, 0, 3, 0, 4]\n let chunks = v.split(fn(x) { x == 0 })\n assert_eq!(chunks, [[1], [2], [3], [4]])\n ```",
          "signature": "fn <a href=\"moonbitlang/core/array#Array\">Array</a>::split[T](self : <a href=\"moonbitlang/core/array#Array\">Array</a>[T], pred : (T) -> Bool) -> <a href=\"moonbitlang/core/array#Array\">Array</a>[<a href=\"moonbitlang/core/array#Array\">Array</a>[T]]",
          "loc": { "line": 1039, "column": 8 }
        },
        {
          "name": "split_at",
          "docstring": "\n Split the array into two at the given index.\n\n # Example\n ```\n let v = [3, 4, 5]\n let (v1, v2) = v.split_at(1)\n assert_eq!(v1, [3])\n assert_eq!(v2, [4, 5])\n ```\n TODO: perf could be optimized\n @alert unsafe \"Panic if index is out of bounds.\"",
          "signature": "fn <a href=\"moonbitlang/core/array#Array\">Array</a>::split_at[T](self : <a href=\"moonbitlang/core/array#Array\">Array</a>[T], index : Int) -> (<a href=\"moonbitlang/core/array#Array\">Array</a>[T], <a href=\"moonbitlang/core/array#Array\">Array</a>[T])",
          "loc": { "line": 423, "column": 8 }
        },
        {
          "name": "starts_with",
          "docstring": "\n Check if the array starts with a given prefix.\n\n # Example\n ```\n let v = [3, 4, 5]\n assert_true!(v.starts_with([3, 4]))\n ```",
          "signature": "fn <a href=\"moonbitlang/core/array#Array\">Array</a>::starts_with[T : <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>](self : <a href=\"moonbitlang/core/array#Array\">Array</a>[T], prefix : <a href=\"moonbitlang/core/array#Array\">Array</a>[T]) -> Bool",
          "loc": { "line": 471, "column": 8 }
        },
        {
          "name": "strip_prefix",
          "docstring": "\n Strip a prefix from the array.\n\n If the array starts with the prefix, return the array after the prefix, otherwise return None.\n\n # Example\n ```\n let v = [3, 4, 5]\n let v2 = v.strip_prefix([3])\n assert_eq!(v2, Some([4, 5]))\n ```",
          "signature": "fn <a href=\"moonbitlang/core/array#Array\">Array</a>::strip_prefix[T : <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>](self : <a href=\"moonbitlang/core/array#Array\">Array</a>[T], prefix : <a href=\"moonbitlang/core/array#Array\">Array</a>[T]) -> <a href=\"moonbitlang/core/array#Array\">Array</a>[T]?",
          "loc": { "line": 517, "column": 8 }
        },
        {
          "name": "strip_suffix",
          "docstring": "\n Strip a suffix from the array.\n\n If the array ends with the suffix, return the array before the suffix, otherwise return None.\n\n # Example\n ```\n let v = [3, 4, 5]\n let v2 = v.strip_suffix([5])\n assert_eq!(v2, Some([3, 4]))\n ```",
          "signature": "fn <a href=\"moonbitlang/core/array#Array\">Array</a>::strip_suffix[T : <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>](self : <a href=\"moonbitlang/core/array#Array\">Array</a>[T], suffix : <a href=\"moonbitlang/core/array#Array\">Array</a>[T]) -> <a href=\"moonbitlang/core/array#Array\">Array</a>[T]?",
          "loc": { "line": 544, "column": 8 }
        },
        {
          "name": "swap",
          "docstring": "\n Swap two elements in the array.\n\n # Example\n ```\n let v = [3, 4, 5]\n v.swap(1, 2)\n ```\n @alert unsafe \"Panic if index is out of bounds.\"",
          "signature": "fn <a href=\"moonbitlang/core/array#Array\">Array</a>::swap[T](self : <a href=\"moonbitlang/core/array#Array\">Array</a>[T], i : Int, j : Int) -> Unit",
          "loc": { "line": 709, "column": 8 }
        },
        {
          "name": "to_json",
          "docstring": "",
          "signature": "fn <a href=\"moonbitlang/core/array#Array\">Array</a>::to_json[X : <a href=\"moonbitlang/core/builtin#ToJson\">ToJson</a>](self : <a href=\"moonbitlang/core/array#Array\">Array</a>[X]) -> <a href=\"moonbitlang/core/json#Json\">Json</a>",
          "loc": { "line": 118, "column": 15 }
        },
        {
          "name": "unsafe_blit",
          "docstring": "",
          "signature": "fn <a href=\"moonbitlang/core/array#Array\">Array</a>::unsafe_blit[A](dst : <a href=\"moonbitlang/core/array#Array\">Array</a>[A], dst_offset : Int, src : <a href=\"moonbitlang/core/array#Array\">Array</a>[A], src_offset : Int, len : Int) -> Unit",
          "loc": { "line": 16, "column": 15 }
        },
        {
          "name": "unsafe_blit_fixed",
          "docstring": "",
          "signature": "fn <a href=\"moonbitlang/core/array#Array\">Array</a>::unsafe_blit_fixed[A](dst : <a href=\"moonbitlang/core/array#Array\">Array</a>[A], dst_offset : Int, src : <a href=\"moonbitlang/core/array#FixedArray\">FixedArray</a>[A], src_offset : Int, len : Int) -> Unit",
          "loc": { "line": 33, "column": 15 }
        },
        {
          "name": "unsafe_get",
          "docstring": "\n @intrinsic %array.unsafe_get\n @alert unsafe \"Panic if index is out of bounds\"",
          "signature": "fn <a href=\"moonbitlang/core/array#Array\">Array</a>::unsafe_get[T](self : <a href=\"moonbitlang/core/array#Array\">Array</a>[T], idx : Int) -> T",
          "loc": { "line": 43, "column": 8 }
        },
        {
          "name": "unsafe_pop",
          "docstring": "\n Removes the last element from a array and returns it.\n \n @alert unsafe \"Panic if the array is empty.\"",
          "signature": "fn <a href=\"moonbitlang/core/array#Array\">Array</a>::unsafe_pop[T](self : <a href=\"moonbitlang/core/array#Array\">Array</a>[T]) -> T",
          "loc": { "line": 249, "column": 8 }
        }
      ],
      "impls": [
        {
          "docstring": "",
          "signature": "impl[X : <a href=\"moonbitlang/core/builtin#Show\">Show</a>] <a href=\"moonbitlang/core/builtin#Show\">Show</a> for <a href=\"moonbitlang/core/array#Array\">Array</a>[X]",
          "methods": [
            {
              "name": "output",
              "docstring": "",
              "signature": "fn output[X : <a href=\"moonbitlang/core/builtin#Show\">Show</a>](self : <a href=\"moonbitlang/core/array#Array\">Array</a>[X], logger : <a href=\"moonbitlang/core/builtin#Logger\">Logger</a>) -> Unit",
              "loc": { "line": 204, "column": 43 }
            }
          ],
          "loc": { "line": 204, "column": 1 }
        }
      ]
    },
    {
      "name": "ArrayView",
      "docstring": "\n A `ArrayView` is a slice of a `Array`.",
      "signature": "type ArrayView",
      "loc": { "line": 17, "column": 8 },
      "methods": [
        {
          "name": "filter",
          "docstring": "\n Filters the array view with a predicate function.\n\n # Example\n ```\n let arr = [1, 2, 3, 4, 5, 6]\n let v = arr[2:].filter(fn (x) { x % 2 == 0 })\n assert_eq!(v, [4, 6])\n ```",
          "signature": "fn <a href=\"moonbitlang/core/array#ArrayView\">ArrayView</a>::filter[T](self : <a href=\"moonbitlang/core/array#ArrayView\">ArrayView</a>[T], f : (T) -> Bool) -> <a href=\"moonbitlang/core/array#Array\">Array</a>[T]",
          "loc": { "line": 261, "column": 8 }
        },
        {
          "name": "fold",
          "docstring": "\n Fold out values from an arrayview according to certain rules.\n\n # Example\n ```\n let sum = [1, 2, 3, 4, 5][:].fold(init=0, fn { sum, elem => sum + elem })\n assert_eq!(sum, 15)\n ```",
          "signature": "fn <a href=\"moonbitlang/core/array#ArrayView\">ArrayView</a>::fold[A, B](self : <a href=\"moonbitlang/core/array#ArrayView\">ArrayView</a>[A], init~ : B, f : (B, A) -> B) -> B",
          "loc": { "line": 121, "column": 8 }
        },
        {
          "name": "foldi",
          "docstring": "\n Fold out values from an arrayview according to certain rules with index.\n\n # Example\n ```\n let sum = [1, 2, 3, 4, 5][:].foldi(init=0, fn { index, sum, _elem => sum + index })\n assert_eq!(sum, 10)\n ```",
          "signature": "fn <a href=\"moonbitlang/core/array#ArrayView\">ArrayView</a>::foldi[A, B](self : <a href=\"moonbitlang/core/array#ArrayView\">ArrayView</a>[A], init~ : B, f : (Int, B, A) -> B) -> B",
          "loc": { "line": 153, "column": 8 }
        },
        {
          "name": "iter",
          "docstring": "",
          "signature": "fn <a href=\"moonbitlang/core/array#ArrayView\">ArrayView</a>::iter[A](self : <a href=\"moonbitlang/core/array#ArrayView\">ArrayView</a>[A]) -> <a href=\"moonbitlang/core/builtin#Iter\">Iter</a>[A]",
          "loc": { "line": 102, "column": 8 }
        },
        {
          "name": "length",
          "docstring": "",
          "signature": "fn <a href=\"moonbitlang/core/array#ArrayView\">ArrayView</a>::length[T](self : <a href=\"moonbitlang/core/array#ArrayView\">ArrayView</a>[T]) -> Int",
          "loc": { "line": 24, "column": 8 }
        },
        {
          "name": "map",
          "docstring": "\n Maps a function over the elements of the array view.\n\n # Example\n ```\n let v = [3, 4, 5]\n let v2 = v[1:].map(fn (x) {x + 1})\n assert_eq!(v2, [5, 6])\n ```",
          "signature": "fn <a href=\"moonbitlang/core/array#ArrayView\">ArrayView</a>::map[T, U](self : <a href=\"moonbitlang/core/array#ArrayView\">ArrayView</a>[T], f : (T) -> U) -> <a href=\"moonbitlang/core/array#Array\">Array</a>[U]",
          "loc": { "line": 191, "column": 8 }
        },
        {
          "name": "map_inplace",
          "docstring": "\n Maps a function over the elements of the array view in place.\n\n # Example\n ```\n let v = [3, 4, 5]\n v[1:].map_inplace(fn (x) {x + 1})\n assert_eq!(v, [3, 5, 6])\n ```",
          "signature": "fn <a href=\"moonbitlang/core/array#ArrayView\">ArrayView</a>::map_inplace[T](self : <a href=\"moonbitlang/core/array#ArrayView\">ArrayView</a>[T], f : (T) -> T) -> Unit",
          "loc": { "line": 211, "column": 8 }
        },
        {
          "name": "mapi",
          "docstring": "\n Maps a function over the elements of the array view with index.\n\n # Example\n ```\n let v = [3, 4, 5]\n let v2 = v[1:].mapi(fn (i, x) {x + i})\n assert_eq!(v2, [4, 6])\n ```",
          "signature": "fn <a href=\"moonbitlang/core/array#ArrayView\">ArrayView</a>::mapi[T, U](self : <a href=\"moonbitlang/core/array#ArrayView\">ArrayView</a>[T], f : (Int, T) -> U) -> <a href=\"moonbitlang/core/array#Array\">Array</a>[U]",
          "loc": { "line": 226, "column": 8 }
        },
        {
          "name": "mapi_inplace",
          "docstring": "\n Maps a function over the elements of the array view with index in place.\n\n # Example\n ```\n let v = [3, 4, 5]\n v[1:].mapi_inplace(fn (i, x) {x + i})\n assert_eq!(v, [3, 4, 6])\n ```",
          "signature": "fn <a href=\"moonbitlang/core/array#ArrayView\">ArrayView</a>::mapi_inplace[T](self : <a href=\"moonbitlang/core/array#ArrayView\">ArrayView</a>[T], f : (Int, T) -> T) -> Unit",
          "loc": { "line": 246, "column": 8 }
        },
        {
          "name": "op_as_view",
          "docstring": "",
          "signature": "fn <a href=\"moonbitlang/core/array#ArrayView\">ArrayView</a>::op_as_view[T](self : <a href=\"moonbitlang/core/array#ArrayView\">ArrayView</a>[T], start~ : Int = .., end? : Int) -> <a href=\"moonbitlang/core/array#ArrayView\">ArrayView</a>[T]",
          "loc": { "line": 85, "column": 8 }
        },
        {
          "name": "op_get",
          "docstring": "",
          "signature": "fn <a href=\"moonbitlang/core/array#ArrayView\">ArrayView</a>::op_get[T](self : <a href=\"moonbitlang/core/array#ArrayView\">ArrayView</a>[T], index : Int) -> T",
          "loc": { "line": 29, "column": 8 }
        },
        {
          "name": "op_set",
          "docstring": "",
          "signature": "fn <a href=\"moonbitlang/core/array#ArrayView\">ArrayView</a>::op_set[T](self : <a href=\"moonbitlang/core/array#ArrayView\">ArrayView</a>[T], index : Int, value : T) -> Unit",
          "loc": { "line": 46, "column": 8 }
        },
        {
          "name": "rev_fold",
          "docstring": "\n Fold out values from an arrayview according to certain rules in reversed turn.\n\n # Example\n ```\n let sum = [1, 2, 3, 4, 5][:].rev_fold(init=0, fn { sum, elem => sum + elem })\n assert_eq!(sum, 15)\n ```",
          "signature": "fn <a href=\"moonbitlang/core/array#ArrayView\">ArrayView</a>::rev_fold[A, B](self : <a href=\"moonbitlang/core/array#ArrayView\">ArrayView</a>[A], init~ : B, f : (B, A) -> B) -> B",
          "loc": { "line": 137, "column": 8 }
        },
        {
          "name": "rev_foldi",
          "docstring": "\n Fold out values from an arrayview according to certain rules in reversed turn with index.\n\n # Example\n ```\n let sum = [1, 2, 3, 4, 5][:].rev_foldi(init=0, fn { index, sum, _elem => sum + index })\n assert_eq!(sum, 10)\n ```",
          "signature": "fn <a href=\"moonbitlang/core/array#ArrayView\">ArrayView</a>::rev_foldi[A, B](self : <a href=\"moonbitlang/core/array#ArrayView\">ArrayView</a>[A], init~ : B, f : (Int, B, A) -> B) -> B",
          "loc": { "line": 169, "column": 8 }
        },
        {
          "name": "swap",
          "docstring": "",
          "signature": "fn <a href=\"moonbitlang/core/array#ArrayView\">ArrayView</a>::swap[T](self : <a href=\"moonbitlang/core/array#ArrayView\">ArrayView</a>[T], i : Int, j : Int) -> Unit",
          "loc": { "line": 56, "column": 8 }
        },
        {
          "name": "to_json",
          "docstring": "",
          "signature": "fn <a href=\"moonbitlang/core/array#ArrayView\">ArrayView</a>::to_json[X : <a href=\"moonbitlang/core/builtin#ToJson\">ToJson</a>](self : <a href=\"moonbitlang/core/array#ArrayView\">ArrayView</a>[X]) -> <a href=\"moonbitlang/core/json#Json\">Json</a>",
          "loc": { "line": 136, "column": 19 }
        },
        {
          "name": "to_string",
          "docstring": "",
          "signature": "fn <a href=\"moonbitlang/core/array#ArrayView\">ArrayView</a>::to_string[X : <a href=\"moonbitlang/core/builtin#Show\">Show</a>](self : <a href=\"moonbitlang/core/array#ArrayView\">ArrayView</a>[X]) -> String",
          "loc": { "line": 214, "column": 19 }
        },
        {
          "name": "unsafe_get",
          "docstring": " \n @intrinsic %arrayview.unsafe_get\n @alert unsafe \"Panic if index is out of bounds\"",
          "signature": "fn <a href=\"moonbitlang/core/array#ArrayView\">ArrayView</a>::unsafe_get[T](self : <a href=\"moonbitlang/core/array#ArrayView\">ArrayView</a>[T], index : Int) -> T",
          "loc": { "line": 41, "column": 8 }
        }
      ],
      "impls": [
        {
          "docstring": "",
          "signature": "impl[T : <a href=\"moonbitlang/core/builtin#Compare\">Compare</a> + <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>] <a href=\"moonbitlang/core/builtin#Compare\">Compare</a> for <a href=\"moonbitlang/core/array#ArrayView\">ArrayView</a>[T]",
          "methods": [
            {
              "name": "compare",
              "docstring": "",
              "signature": "fn compare[T : <a href=\"moonbitlang/core/builtin#Compare\">Compare</a> + <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>](self : <a href=\"moonbitlang/core/array#ArrayView\">ArrayView</a>[T], other : <a href=\"moonbitlang/core/array#ArrayView\">ArrayView</a>[T]) -> Int",
              "loc": { "line": 286, "column": 53 }
            }
          ],
          "loc": { "line": 286, "column": 1 }
        },
        {
          "docstring": "",
          "signature": "impl[T : <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>] <a href=\"moonbitlang/core/builtin#Eq\">Eq</a> for <a href=\"moonbitlang/core/array#ArrayView\">ArrayView</a>[T]",
          "methods": [
            {
              "name": "op_equal",
              "docstring": "",
              "signature": "fn op_equal[T : <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>](self : <a href=\"moonbitlang/core/array#ArrayView\">ArrayView</a>[T], other : <a href=\"moonbitlang/core/array#ArrayView\">ArrayView</a>[T]) -> Bool",
              "loc": { "line": 272, "column": 43 }
            }
          ],
          "loc": { "line": 272, "column": 1 }
        },
        {
          "docstring": "",
          "signature": "impl[X : <a href=\"moonbitlang/core/builtin#Show\">Show</a>] <a href=\"moonbitlang/core/builtin#Show\">Show</a> for <a href=\"moonbitlang/core/array#ArrayView\">ArrayView</a>[X]",
          "methods": [
            {
              "name": "output",
              "docstring": "",
              "signature": "fn output[X : <a href=\"moonbitlang/core/builtin#Show\">Show</a>](self : <a href=\"moonbitlang/core/array#ArrayView\">ArrayView</a>[X], logger : <a href=\"moonbitlang/core/builtin#Logger\">Logger</a>) -> Unit",
              "loc": { "line": 209, "column": 47 }
            }
          ],
          "loc": { "line": 209, "column": 1 }
        }
      ]
    },
    {
      "name": "BigInt",
      "docstring": "\n A big integer represented as an array of Int.",
      "signature": "type BigInt",
      "loc": { "line": 33, "column": 8 },
      "methods": [
        {
          "name": "asr",
          "docstring": "\n @alert deprecated \"Use infix bitwise operator `>>` instead\"\n @coverage.skip",
          "signature": "fn <a href=\"moonbitlang/core/bigint#BigInt\">BigInt</a>::asr(self : <a href=\"moonbitlang/core/bigint#BigInt\">BigInt</a>, n : Int) -> <a href=\"moonbitlang/core/bigint#BigInt\">BigInt</a>",
          "loc": { "line": 18, "column": 8 }
        },
        {
          "name": "compare",
          "docstring": "\n Implements the compare trait for BigInt",
          "signature": "fn <a href=\"moonbitlang/core/bigint#BigInt\">BigInt</a>::compare(self : <a href=\"moonbitlang/core/bigint#BigInt\">BigInt</a>, other : <a href=\"moonbitlang/core/bigint#BigInt\">BigInt</a>) -> Int",
          "loc": { "line": 554, "column": 8 }
        },
        {
          "name": "from_hex",
          "docstring": "\n Converts a hex string to a BigInt.\n \n The input string must be a valid hex string with no extra `0x` prefix.",
          "signature": "fn <a href=\"moonbitlang/core/bigint#BigInt\">BigInt</a>::from_hex(input : String) -> <a href=\"moonbitlang/core/bigint#BigInt\">BigInt</a>",
          "loc": { "line": 688, "column": 16 }
        },
        {
          "name": "from_int",
          "docstring": "\n Convert an Int to a BigInt.",
          "signature": "fn <a href=\"moonbitlang/core/bigint#BigInt\">BigInt</a>::from_int(n : Int) -> <a href=\"moonbitlang/core/bigint#BigInt\">BigInt</a>",
          "loc": { "line": 83, "column": 16 }
        },
        {
          "name": "from_int64",
          "docstring": "\n Convert an Int64 to a BigInt.",
          "signature": "fn <a href=\"moonbitlang/core/bigint#BigInt\">BigInt</a>::from_int64(n : Int64) -> <a href=\"moonbitlang/core/bigint#BigInt\">BigInt</a>",
          "loc": { "line": 95, "column": 16 }
        },
        {
          "name": "from_octets",
          "docstring": "\n Convert an octet string to a BigInt.\n \n The input is treated as a big-endian octet array.\n \n Example: `from_octets(b\"\\xab\\xcd\\xef\") == from_hex(\"abcdef\")`\n \n The input must not be empty, unless signum is zero",
          "signature": "fn <a href=\"moonbitlang/core/bigint#BigInt\">BigInt</a>::from_octets(input : Bytes, signum~ : Int = ..) -> <a href=\"moonbitlang/core/bigint#BigInt\">BigInt</a>",
          "loc": { "line": 873, "column": 16 }
        },
        {
          "name": "from_string",
          "docstring": "\n Converts decimal string to a BigInt.",
          "signature": "fn <a href=\"moonbitlang/core/bigint#BigInt\">BigInt</a>::from_string(input : String) -> <a href=\"moonbitlang/core/bigint#BigInt\">BigInt</a>",
          "loc": { "line": 649, "column": 16 }
        },
        {
          "name": "from_uint",
          "docstring": "\n Convert an UInt to a BigInt.",
          "signature": "fn <a href=\"moonbitlang/core/bigint#BigInt\">BigInt</a>::from_uint(n : UInt) -> <a href=\"moonbitlang/core/bigint#BigInt\">BigInt</a>",
          "loc": { "line": 89, "column": 16 }
        },
        {
          "name": "from_uint64",
          "docstring": " \n Convert an UInt64 to a BigInt.",
          "signature": "fn <a href=\"moonbitlang/core/bigint#BigInt\">BigInt</a>::from_uint64(n : UInt64) -> <a href=\"moonbitlang/core/bigint#BigInt\">BigInt</a>",
          "loc": { "line": 105, "column": 16 }
        },
        {
          "name": "is_zero",
          "docstring": "\n Check if a bigint is zero",
          "signature": "fn <a href=\"moonbitlang/core/bigint#BigInt\">BigInt</a>::is_zero(self : <a href=\"moonbitlang/core/bigint#BigInt\">BigInt</a>) -> Bool",
          "loc": { "line": 548, "column": 8 }
        },
        {
          "name": "land",
          "docstring": "",
          "signature": "fn <a href=\"moonbitlang/core/bigint#BigInt\">BigInt</a>::land(self : <a href=\"moonbitlang/core/bigint#BigInt\">BigInt</a>, other : <a href=\"moonbitlang/core/bigint#BigInt\">BigInt</a>) -> <a href=\"moonbitlang/core/bigint#BigInt\">BigInt</a>",
          "loc": { "line": 946, "column": 8 }
        },
        {
          "name": "lor",
          "docstring": "",
          "signature": "fn <a href=\"moonbitlang/core/bigint#BigInt\">BigInt</a>::lor(self : <a href=\"moonbitlang/core/bigint#BigInt\">BigInt</a>, other : <a href=\"moonbitlang/core/bigint#BigInt\">BigInt</a>) -> <a href=\"moonbitlang/core/bigint#BigInt\">BigInt</a>",
          "loc": { "line": 1033, "column": 8 }
        },
        {
          "name": "lsl",
          "docstring": "\n Left shift a bigint\n The sign of the result is the same as the sign of the input.\n Only the absolute value is shifted.\n \n @alert deprecated \"Use infix bitwise operator `<<` instead\"\n @coverage.skip",
          "signature": "fn <a href=\"moonbitlang/core/bigint#BigInt\">BigInt</a>::lsl(self : <a href=\"moonbitlang/core/bigint#BigInt\">BigInt</a>, n : Int) -> <a href=\"moonbitlang/core/bigint#BigInt\">BigInt</a>",
          "loc": { "line": 40, "column": 8 }
        },
        {
          "name": "lxor",
          "docstring": "",
          "signature": "fn <a href=\"moonbitlang/core/bigint#BigInt\">BigInt</a>::lxor(self : <a href=\"moonbitlang/core/bigint#BigInt\">BigInt</a>, other : <a href=\"moonbitlang/core/bigint#BigInt\">BigInt</a>) -> <a href=\"moonbitlang/core/bigint#BigInt\">BigInt</a>",
          "loc": { "line": 1120, "column": 8 }
        },
        {
          "name": "op_add",
          "docstring": "\n Add two bigint.",
          "signature": "fn <a href=\"moonbitlang/core/bigint#BigInt\">BigInt</a>::op_add(self : <a href=\"moonbitlang/core/bigint#BigInt\">BigInt</a>, other : <a href=\"moonbitlang/core/bigint#BigInt\">BigInt</a>) -> <a href=\"moonbitlang/core/bigint#BigInt\">BigInt</a>",
          "loc": { "line": 133, "column": 8 }
        },
        {
          "name": "op_div",
          "docstring": "\n Divide two bigint",
          "signature": "fn <a href=\"moonbitlang/core/bigint#BigInt\">BigInt</a>::op_div(self : <a href=\"moonbitlang/core/bigint#BigInt\">BigInt</a>, other : <a href=\"moonbitlang/core/bigint#BigInt\">BigInt</a>) -> <a href=\"moonbitlang/core/bigint#BigInt\">BigInt</a>",
          "loc": { "line": 281, "column": 8 }
        },
        {
          "name": "op_equal",
          "docstring": "\n Implements the Eq trait for BigInt",
          "signature": "fn <a href=\"moonbitlang/core/bigint#BigInt\">BigInt</a>::op_equal(self : <a href=\"moonbitlang/core/bigint#BigInt\">BigInt</a>, other : <a href=\"moonbitlang/core/bigint#BigInt\">BigInt</a>) -> Bool",
          "loc": { "line": 581, "column": 8 }
        },
        {
          "name": "op_mod",
          "docstring": "\n Modulo two bigint",
          "signature": "fn <a href=\"moonbitlang/core/bigint#BigInt\">BigInt</a>::op_mod(self : <a href=\"moonbitlang/core/bigint#BigInt\">BigInt</a>, other : <a href=\"moonbitlang/core/bigint#BigInt\">BigInt</a>) -> <a href=\"moonbitlang/core/bigint#BigInt\">BigInt</a>",
          "loc": { "line": 303, "column": 8 }
        },
        {
          "name": "op_mul",
          "docstring": "\n Multiply two bigint ",
          "signature": "fn <a href=\"moonbitlang/core/bigint#BigInt\">BigInt</a>::op_mul(self : <a href=\"moonbitlang/core/bigint#BigInt\">BigInt</a>, other : <a href=\"moonbitlang/core/bigint#BigInt\">BigInt</a>) -> <a href=\"moonbitlang/core/bigint#BigInt\">BigInt</a>",
          "loc": { "line": 213, "column": 8 }
        },
        {
          "name": "op_neg",
          "docstring": "\n Negate a bigint",
          "signature": "fn <a href=\"moonbitlang/core/bigint#BigInt\">BigInt</a>::op_neg(self : <a href=\"moonbitlang/core/bigint#BigInt\">BigInt</a>) -> <a href=\"moonbitlang/core/bigint#BigInt\">BigInt</a>",
          "loc": { "line": 124, "column": 8 }
        },
        {
          "name": "op_shl",
          "docstring": "\n Left shift a bigint\n The sign of the result is the same as the sign of the input.\n Only the absolute value is shifted.\n ",
          "signature": "fn <a href=\"moonbitlang/core/bigint#BigInt\">BigInt</a>::op_shl(self : <a href=\"moonbitlang/core/bigint#BigInt\">BigInt</a>, n : Int) -> <a href=\"moonbitlang/core/bigint#BigInt\">BigInt</a>",
          "loc": { "line": 469, "column": 8 }
        },
        {
          "name": "op_shr",
          "docstring": "\n Right shift a bigint\n The sign of the result is the same as the sign of the input.\n Only the absolute value is shifted.",
          "signature": "fn <a href=\"moonbitlang/core/bigint#BigInt\">BigInt</a>::op_shr(self : <a href=\"moonbitlang/core/bigint#BigInt\">BigInt</a>, n : Int) -> <a href=\"moonbitlang/core/bigint#BigInt\">BigInt</a>",
          "loc": { "line": 506, "column": 8 }
        },
        {
          "name": "op_sub",
          "docstring": "\n Subtract two bigint",
          "signature": "fn <a href=\"moonbitlang/core/bigint#BigInt\">BigInt</a>::op_sub(self : <a href=\"moonbitlang/core/bigint#BigInt\">BigInt</a>, other : <a href=\"moonbitlang/core/bigint#BigInt\">BigInt</a>) -> <a href=\"moonbitlang/core/bigint#BigInt\">BigInt</a>",
          "loc": { "line": 161, "column": 8 }
        },
        {
          "name": "pow",
          "docstring": "\n Computes the result of raising a `BigInt` to the power of another `BigInt`,\n with an optional modulus.\n\n When a modulus is provided, computes the modular exponentiation using the\n square-and-multiply algorithm. This is particularly useful in cryptographic\n applications where direct exponentiation would result in numbers too large to\n handle efficiently.\n\n Parameters:\n\n * `self` : The base number to be raised to a power.\n * `exp` : The exponent (must be non-negative).\n * `modulus` : Optional modulus for modular exponentiation (must be positive\n if provided).\n\n Returns the result of the exponentiation, or the result modulo `modulus` if a\n modulus is provided.\n\n Throws:\n\n * Aborts if the exponent is negative.\n * Aborts if the provided modulus is zero or negative.\n\n Example:\n\n ```moonbit\n test \"BigInt::pow\" {\n   let base = BigInt::from_string(\"3\")\n   let exp = BigInt::from_string(\"4\")\n   inspect!(base.pow(exp), content=\"81\")\n   inspect!(base.pow(exp, modulus=BigInt::from_string(\"10\")), content=\"1\")\n }\n \n test \"panic BigInt::pow/negative_exponent\" {\n   let base = BigInt::from_string(\"3\")\n   let exp = BigInt::from_string(\"-1\")\n   ignore(base.pow(exp))\n }\n ```",
          "signature": "fn <a href=\"moonbitlang/core/bigint#BigInt\">BigInt</a>::pow(self : <a href=\"moonbitlang/core/bigint#BigInt\">BigInt</a>, exp : <a href=\"moonbitlang/core/bigint#BigInt\">BigInt</a>, modulus? : <a href=\"moonbitlang/core/bigint#BigInt\">BigInt</a>) -> <a href=\"moonbitlang/core/bigint#BigInt\">BigInt</a>",
          "loc": { "line": 830, "column": 8 }
        },
        {
          "name": "shl",
          "docstring": "\n Left shift a bigint\n The sign of the result is the same as the sign of the input.\n Only the absolute value is shifted.\n \n @alert deprecated \"Use infix bitwise operator `<<` instead\"\n @coverage.skip",
          "signature": "fn <a href=\"moonbitlang/core/bigint#BigInt\">BigInt</a>::shl(self : <a href=\"moonbitlang/core/bigint#BigInt\">BigInt</a>, n : Int) -> <a href=\"moonbitlang/core/bigint#BigInt\">BigInt</a>",
          "loc": { "line": 29, "column": 8 }
        },
        {
          "name": "shr",
          "docstring": "\n Right shift a bigint\n The sign of the result is the same as the sign of the input.\n Only the absolute value is shifted.\n \n @alert deprecated \"Use infix bitwise operator `>>` instead\"\n @coverage.skip",
          "signature": "fn <a href=\"moonbitlang/core/bigint#BigInt\">BigInt</a>::shr(self : <a href=\"moonbitlang/core/bigint#BigInt\">BigInt</a>, n : Int) -> <a href=\"moonbitlang/core/bigint#BigInt\">BigInt</a>",
          "loc": { "line": 51, "column": 8 }
        },
        {
          "name": "to_hex",
          "docstring": "\n Converts a BigInt to a hex string.",
          "signature": "fn <a href=\"moonbitlang/core/bigint#BigInt\">BigInt</a>::to_hex(self : <a href=\"moonbitlang/core/bigint#BigInt\">BigInt</a>, uppercase~ : Bool = ..) -> String",
          "loc": { "line": 737, "column": 8 }
        },
        {
          "name": "to_int",
          "docstring": "\n Converts a `BigInt` to a 32-bit signed integer (`Int`).\n\n Parameters:\n\n * `self` : The `BigInt` value to be converted.\n\n Returns a 32-bit signed integer representing the lower 32 bits of the input\n `BigInt`.\n\n Example:\n\n ```moonbit\n test \"BigInt::to_int\" {\n   let big = 2147483648N // 2^31\n   inspect!(big.to_int(), content=\"-2147483648\") // Overflow to Int.min_value\n }\n ```",
          "signature": "fn <a href=\"moonbitlang/core/bigint#BigInt\">BigInt</a>::to_int(self : <a href=\"moonbitlang/core/bigint#BigInt\">BigInt</a>) -> Int",
          "loc": { "line": 1224, "column": 8 }
        },
        {
          "name": "to_int64",
          "docstring": "\n Converts a `BigInt` to a signed 64-bit integer (`Int64`).\n\n Parameters:\n\n * `value` : The `BigInt` value to be converted.\n\n Returns a 64-bit signed integer (`Int64`) representing the lower 64 bits of\n the input `BigInt`.\n\n Example:\n\n ```moonbit\n test \"BigInt::to_int64\" {\n   let big = 9223372036854775807N // max value of Int64\n   inspect!(big.to_int64(), content=\"9223372036854775807\")\n   let bigger = big + 1\n   inspect!(bigger.to_int64(), content=\"-9223372036854775808\") // Overflow to Int64.min_value\n }\n ```",
          "signature": "fn <a href=\"moonbitlang/core/bigint#BigInt\">BigInt</a>::to_int64(self : <a href=\"moonbitlang/core/bigint#BigInt\">BigInt</a>) -> Int64",
          "loc": { "line": 1272, "column": 8 }
        },
        {
          "name": "to_json",
          "docstring": "",
          "signature": "fn <a href=\"moonbitlang/core/bigint#BigInt\">BigInt</a>::to_json(self : <a href=\"moonbitlang/core/bigint#BigInt\">BigInt</a>) -> <a href=\"moonbitlang/core/json#Json\">Json</a>",
          "loc": { "line": 113, "column": 16 }
        },
        {
          "name": "to_octets",
          "docstring": "\n Convert a BigInt to an octet string.\n \n The output is a big-endian octet array.\n \n The output may be padded with leading zeros to meet the length requirement \n if and only if the actual length is less than the expected.\n \n The value should be non-negative and the padding should be positive.\n \n Example: \n - `to_octets(from_hex(\"abcdef\"), length=3) == b\"\\xab\\xcd\\xef\"`\n - `to_octets(from_hex(\"1abcdef\"), length=3) == b\"\\x01\\xab\\xcd\\xef\"`",
          "signature": "fn <a href=\"moonbitlang/core/bigint#BigInt\">BigInt</a>::to_octets(self : <a href=\"moonbitlang/core/bigint#BigInt\">BigInt</a>, length? : Int) -> Bytes",
          "loc": { "line": 921, "column": 16 }
        },
        {
          "name": "to_string",
          "docstring": "\n Returns the decimal string representation of the BigInt.",
          "signature": "fn <a href=\"moonbitlang/core/bigint#BigInt\">BigInt</a>::to_string(self : <a href=\"moonbitlang/core/bigint#BigInt\">BigInt</a>) -> String",
          "loc": { "line": 595, "column": 8 }
        },
        {
          "name": "to_uint",
          "docstring": "\n Converts a `BigInt` to an unsigned 32-bit integer (`UInt`).\n\n Parameters:\n\n * `self` : The `BigInt` value to be converted.\n\n Returns a `UInt` value representing the lower 32 bits of the input `BigInt`.\n\n Example:\n\n ```moonbit\n test \"BigInt::to_uint\" {\n   let n = 42N\n   inspect!(n.to_uint(), content=\"42\")\n   let neg = -1N\n   inspect!(neg.to_uint(), content=\"4294967295\") // 2^32 - 1\n }\n ```",
          "signature": "fn <a href=\"moonbitlang/core/bigint#BigInt\">BigInt</a>::to_uint(self : <a href=\"moonbitlang/core/bigint#BigInt\">BigInt</a>) -> UInt",
          "loc": { "line": 1247, "column": 8 }
        },
        {
          "name": "to_uint64",
          "docstring": "\n Converts a `BigInt` to an unsigned 64-bit integer (`UInt64`).\n\n Parameters:\n\n * `self` : The `BigInt` value to be converted.\n\n Returns a `UInt64` value representing the lower 64 bits of the input\n `BigInt`.\n\n Example:\n\n ```moonbit\n test \"BigInt::to_uint64\" {\n   let n = 12345678901234567890N\n   inspect!(n.to_uint64(), content=\"12345678901234567890\")\n   let neg = -1N\n   inspect!(neg.to_uint64(), content=\"18446744073709551615\") // 2^64 - 1\n }\n ```",
          "signature": "fn <a href=\"moonbitlang/core/bigint#BigInt\">BigInt</a>::to_uint64(self : <a href=\"moonbitlang/core/bigint#BigInt\">BigInt</a>) -> UInt64",
          "loc": { "line": 1296, "column": 8 }
        }
      ],
      "impls": [
        {
          "docstring": "",
          "signature": "impl <a href=\"moonbitlang/core/builtin#Show\">Show</a> for <a href=\"moonbitlang/core/bigint#BigInt\">BigInt</a>",
          "methods": [
            {
              "name": "output",
              "docstring": "",
              "signature": "fn output(self : <a href=\"moonbitlang/core/bigint#BigInt\">BigInt</a>, logger : <a href=\"moonbitlang/core/builtin#Logger\">Logger</a>) -> Unit",
              "loc": { "line": 643, "column": 31 }
            }
          ],
          "loc": { "line": 643, "column": 1 }
        }
      ]
    },
    {
      "name": "BytesView",
      "docstring": "\n A `BytesView` is a slice of a `Bytes`.\n\n # Example\n \n ```\n let bs = b\"\\x00\\x01\\x02\\x03\\x04\\x05\"\n let bv = bs[1:4]\n assert_eq!(bv.length(), 3)\n assert_eq!(bv[0], b'\\x01')\n assert_eq!(bv[1], b'\\x02')\n assert_eq!(bv[2], b'\\x03')\n ```",
      "signature": "type BytesView",
      "loc": { "line": 28, "column": 8 },
      "methods": [
        {
          "name": "iter",
          "docstring": "\n Returns an iterator over the `BytesView`.\n \n # Example\n \n ```\n let bv = b\"\\x00\\x01\\x02\\x03\\x04\\x05\"[:]\n let mut sum = 0\n bv.iter().each(fn(x) { sum = sum + x.to_int() })\n assert_eq!(sum, 15)\n ```",
          "signature": "fn <a href=\"moonbitlang/core/builtin#BytesView\">BytesView</a>::iter(self : <a href=\"moonbitlang/core/builtin#BytesView\">BytesView</a>) -> <a href=\"moonbitlang/core/builtin#Iter\">Iter</a>[Byte]",
          "loc": { "line": 116, "column": 8 }
        },
        {
          "name": "length",
          "docstring": "\n Returns the length of the BytesView.",
          "signature": "fn <a href=\"moonbitlang/core/builtin#BytesView\">BytesView</a>::length(self : <a href=\"moonbitlang/core/builtin#BytesView\">BytesView</a>) -> Int",
          "loc": { "line": 36, "column": 8 }
        },
        {
          "name": "op_as_view",
          "docstring": "\n Creates a new `BytesView` from the given `BytesView`.\n \n # Example\n \n ```\n let bv = b\"\\x00\\x01\\x02\\x03\\x04\\x05\"[:]\n let bv2 = bv[1:4]\n assert_eq!(bv2.length(), 3)\n assert_eq!(bv2[1], b'\\x02')\n ```",
          "signature": "fn <a href=\"moonbitlang/core/builtin#BytesView\">BytesView</a>::op_as_view(self : <a href=\"moonbitlang/core/builtin#BytesView\">BytesView</a>, start~ : Int = .., end? : Int) -> <a href=\"moonbitlang/core/builtin#BytesView\">BytesView</a>",
          "loc": { "line": 93, "column": 8 }
        },
        {
          "name": "op_get",
          "docstring": "\n Returns the byte at the given index.",
          "signature": "fn <a href=\"moonbitlang/core/builtin#BytesView\">BytesView</a>::op_get(self : <a href=\"moonbitlang/core/builtin#BytesView\">BytesView</a>, index : Int) -> Byte",
          "loc": { "line": 42, "column": 8 }
        },
        {
          "name": "to_double_be",
          "docstring": " Converts the 8 bytes long BytesView to a Double in big-endian byte order.",
          "signature": "fn <a href=\"moonbitlang/core/builtin#BytesView\">BytesView</a>::to_double_be(self : <a href=\"moonbitlang/core/builtin#BytesView\">BytesView</a>) -> Double",
          "loc": { "line": 198, "column": 8 }
        },
        {
          "name": "to_double_le",
          "docstring": " Converts the 8 bytes long BytesView to a Double in little-endian byte order.",
          "signature": "fn <a href=\"moonbitlang/core/builtin#BytesView\">BytesView</a>::to_double_le(self : <a href=\"moonbitlang/core/builtin#BytesView\">BytesView</a>) -> Double",
          "loc": { "line": 203, "column": 8 }
        },
        {
          "name": "to_float_be",
          "docstring": " Converts the 4 bytes long BytesView to a Float in big-endian byte order.",
          "signature": "fn <a href=\"moonbitlang/core/builtin#BytesView\">BytesView</a>::to_float_be(self : <a href=\"moonbitlang/core/builtin#BytesView\">BytesView</a>) -> Float",
          "loc": { "line": 188, "column": 8 }
        },
        {
          "name": "to_float_le",
          "docstring": " Converts the 4 bytes long BytesView to a Float in little-endian byte order.",
          "signature": "fn <a href=\"moonbitlang/core/builtin#BytesView\">BytesView</a>::to_float_le(self : <a href=\"moonbitlang/core/builtin#BytesView\">BytesView</a>) -> Float",
          "loc": { "line": 193, "column": 8 }
        },
        {
          "name": "to_int64_be",
          "docstring": " Converts the 8 bytes long BytesView to a Int64 in big-endian byte order.",
          "signature": "fn <a href=\"moonbitlang/core/builtin#BytesView\">BytesView</a>::to_int64_be(self : <a href=\"moonbitlang/core/builtin#BytesView\">BytesView</a>) -> Int64",
          "loc": { "line": 178, "column": 8 }
        },
        {
          "name": "to_int64_le",
          "docstring": " Converts the 8 bytes long BytesView to a Int64 in little-endian byte order.",
          "signature": "fn <a href=\"moonbitlang/core/builtin#BytesView\">BytesView</a>::to_int64_le(self : <a href=\"moonbitlang/core/builtin#BytesView\">BytesView</a>) -> Int64",
          "loc": { "line": 183, "column": 8 }
        },
        {
          "name": "to_int_be",
          "docstring": " Converts the 4 bytes long BytesView to a Int in big-endian byte order.",
          "signature": "fn <a href=\"moonbitlang/core/builtin#BytesView\">BytesView</a>::to_int_be(self : <a href=\"moonbitlang/core/builtin#BytesView\">BytesView</a>) -> Int",
          "loc": { "line": 168, "column": 8 }
        },
        {
          "name": "to_int_le",
          "docstring": " Converts the 4 bytes long BytesView to a Int in little-endian byte order.",
          "signature": "fn <a href=\"moonbitlang/core/builtin#BytesView\">BytesView</a>::to_int_le(self : <a href=\"moonbitlang/core/builtin#BytesView\">BytesView</a>) -> Int",
          "loc": { "line": 173, "column": 8 }
        },
        {
          "name": "to_uint64_be",
          "docstring": " Converts the 8 bytes long BytesView to a UInt64 in big-endian byte order.",
          "signature": "fn <a href=\"moonbitlang/core/builtin#BytesView\">BytesView</a>::to_uint64_be(self : <a href=\"moonbitlang/core/builtin#BytesView\">BytesView</a>) -> UInt64",
          "loc": { "line": 144, "column": 8 }
        },
        {
          "name": "to_uint64_le",
          "docstring": " Converts the 8 bytes long BytesView to a UInt64 in little-endian byte order.",
          "signature": "fn <a href=\"moonbitlang/core/builtin#BytesView\">BytesView</a>::to_uint64_le(self : <a href=\"moonbitlang/core/builtin#BytesView\">BytesView</a>) -> UInt64",
          "loc": { "line": 156, "column": 8 }
        },
        {
          "name": "to_uint_be",
          "docstring": " Converts the 4 bytes long BytesView to a UInt in big-endian byte order.",
          "signature": "fn <a href=\"moonbitlang/core/builtin#BytesView\">BytesView</a>::to_uint_be(self : <a href=\"moonbitlang/core/builtin#BytesView\">BytesView</a>) -> UInt",
          "loc": { "line": 128, "column": 8 }
        },
        {
          "name": "to_uint_le",
          "docstring": " Converts the 4 bytes long BytesView to a UInt in little-endian byte order.",
          "signature": "fn <a href=\"moonbitlang/core/builtin#BytesView\">BytesView</a>::to_uint_le(self : <a href=\"moonbitlang/core/builtin#BytesView\">BytesView</a>) -> UInt",
          "loc": { "line": 136, "column": 8 }
        },
        {
          "name": "unsafe_get",
          "docstring": "\n @alert unsafe \"Panic if index is out of bounds\"",
          "signature": "fn <a href=\"moonbitlang/core/builtin#BytesView\">BytesView</a>::unsafe_get(self : <a href=\"moonbitlang/core/builtin#BytesView\">BytesView</a>, index : Int) -> Byte",
          "loc": { "line": 53, "column": 8 }
        }
      ],
      "impls": [
        {
          "docstring": "",
          "signature": "impl <a href=\"moonbitlang/core/builtin#Show\">Show</a> for <a href=\"moonbitlang/core/builtin#BytesView\">BytesView</a>",
          "methods": [
            {
              "name": "output",
              "docstring": "",
              "signature": "fn output(self : <a href=\"moonbitlang/core/builtin#BytesView\">BytesView</a>, logger : <a href=\"moonbitlang/core/builtin#Logger\">Logger</a>) -> Unit",
              "loc": { "line": 78, "column": 34 }
            }
          ],
          "loc": { "line": 78, "column": 1 }
        }
      ]
    },
    {
      "name": "Failure",
      "docstring": "",
      "signature": "pub(all) type! Failure String\n",
      "loc": { "line": 16, "column": 16 },
      "methods": [],
      "impls": [
        {
          "docstring": "",
          "signature": "impl <a href=\"moonbitlang/core/builtin#Show\">Show</a> for <a href=\"moonbitlang/core/builtin#Failure\">Failure</a>",
          "methods": [
            {
              "name": "output",
              "docstring": "",
              "signature": "fn output(self : <a href=\"moonbitlang/core/builtin#Failure\">Failure</a>, logger : <a href=\"moonbitlang/core/builtin#Logger\">Logger</a>) -> Unit",
              "loc": { "line": 162, "column": 32 }
            }
          ],
          "loc": { "line": 162, "column": 1 }
        }
      ]
    },
    {
      "name": "Hasher",
      "docstring": "\n xxhash32 Hasher",
      "signature": "type Hasher",
      "loc": { "line": 32, "column": 8 },
      "methods": [
        {
          "name": "combine",
          "docstring": "",
          "signature": "fn <a href=\"moonbitlang/core/builtin#Hasher\">Hasher</a>::combine[T : <a href=\"moonbitlang/core/builtin#Hash\">Hash</a>](self : <a href=\"moonbitlang/core/builtin#Hasher\">Hasher</a>, value : T) -> Unit",
          "loc": { "line": 42, "column": 8 }
        },
        {
          "name": "combine_bool",
          "docstring": "",
          "signature": "fn <a href=\"moonbitlang/core/builtin#Hasher\">Hasher</a>::combine_bool(self : <a href=\"moonbitlang/core/builtin#Hasher\">Hasher</a>, value : Bool) -> Unit",
          "loc": { "line": 52, "column": 8 }
        },
        {
          "name": "combine_byte",
          "docstring": "",
          "signature": "fn <a href=\"moonbitlang/core/builtin#Hasher\">Hasher</a>::combine_byte(self : <a href=\"moonbitlang/core/builtin#Hasher\">Hasher</a>, value : Byte) -> Unit",
          "loc": { "line": 90, "column": 8 }
        },
        {
          "name": "combine_bytes",
          "docstring": "",
          "signature": "fn <a href=\"moonbitlang/core/builtin#Hasher\">Hasher</a>::combine_bytes(self : <a href=\"moonbitlang/core/builtin#Hasher\">Hasher</a>, value : Bytes) -> Unit",
          "loc": { "line": 95, "column": 8 }
        },
        {
          "name": "combine_char",
          "docstring": "",
          "signature": "fn <a href=\"moonbitlang/core/builtin#Hasher\">Hasher</a>::combine_char(self : <a href=\"moonbitlang/core/builtin#Hasher\">Hasher</a>, value : Char) -> Unit",
          "loc": { "line": 118, "column": 8 }
        },
        {
          "name": "combine_double",
          "docstring": "",
          "signature": "fn <a href=\"moonbitlang/core/builtin#Hasher\">Hasher</a>::combine_double(self : <a href=\"moonbitlang/core/builtin#Hasher\">Hasher</a>, value : Double) -> Unit",
          "loc": { "line": 80, "column": 8 }
        },
        {
          "name": "combine_float",
          "docstring": "",
          "signature": "fn <a href=\"moonbitlang/core/builtin#Hasher\">Hasher</a>::combine_float(self : <a href=\"moonbitlang/core/builtin#Hasher\">Hasher</a>, value : Float) -> Unit",
          "loc": { "line": 85, "column": 8 }
        },
        {
          "name": "combine_int",
          "docstring": "",
          "signature": "fn <a href=\"moonbitlang/core/builtin#Hasher\">Hasher</a>::combine_int(self : <a href=\"moonbitlang/core/builtin#Hasher\">Hasher</a>, value : Int) -> Unit",
          "loc": { "line": 57, "column": 8 }
        },
        {
          "name": "combine_int64",
          "docstring": "",
          "signature": "fn <a href=\"moonbitlang/core/builtin#Hasher\">Hasher</a>::combine_int64(self : <a href=\"moonbitlang/core/builtin#Hasher\">Hasher</a>, value : Int64) -> Unit",
          "loc": { "line": 63, "column": 8 }
        },
        {
          "name": "combine_string",
          "docstring": "",
          "signature": "fn <a href=\"moonbitlang/core/builtin#Hasher\">Hasher</a>::combine_string(self : <a href=\"moonbitlang/core/builtin#Hasher\">Hasher</a>, value : String) -> Unit",
          "loc": { "line": 111, "column": 8 }
        },
        {
          "name": "combine_uint",
          "docstring": "",
          "signature": "fn <a href=\"moonbitlang/core/builtin#Hasher\">Hasher</a>::combine_uint(self : <a href=\"moonbitlang/core/builtin#Hasher\">Hasher</a>, value : UInt) -> Unit",
          "loc": { "line": 70, "column": 8 }
        },
        {
          "name": "combine_uint64",
          "docstring": "",
          "signature": "fn <a href=\"moonbitlang/core/builtin#Hasher\">Hasher</a>::combine_uint64(self : <a href=\"moonbitlang/core/builtin#Hasher\">Hasher</a>, value : UInt64) -> Unit",
          "loc": { "line": 75, "column": 8 }
        },
        {
          "name": "combine_unit",
          "docstring": "",
          "signature": "fn <a href=\"moonbitlang/core/builtin#Hasher\">Hasher</a>::combine_unit(self : <a href=\"moonbitlang/core/builtin#Hasher\">Hasher</a>) -> Unit",
          "loc": { "line": 47, "column": 8 }
        },
        {
          "name": "finalize",
          "docstring": "",
          "signature": "fn <a href=\"moonbitlang/core/builtin#Hasher\">Hasher</a>::finalize(self : <a href=\"moonbitlang/core/builtin#Hasher\">Hasher</a>) -> Int",
          "loc": { "line": 123, "column": 8 }
        },
        {
          "name": "new",
          "docstring": "",
          "signature": "fn <a href=\"moonbitlang/core/builtin#Hasher\">Hasher</a>::new(seed~ : Int = ..) -> <a href=\"moonbitlang/core/builtin#Hasher\">Hasher</a>",
          "loc": { "line": 37, "column": 16 }
        }
      ],
      "impls": []
    },
    {
      "name": "InspectError",
      "docstring": "",
      "signature": "pub(all) type! InspectError String\n",
      "loc": { "line": 198, "column": 16 },
      "methods": [],
      "impls": []
    },
    {
      "name": "Iter",
      "docstring": "",
      "signature": "type Iter",
      "loc": { "line": 17, "column": 6 },
      "methods": [
        {
          "name": "all",
          "docstring": "",
          "signature": "fn <a href=\"moonbitlang/core/builtin#Iter\">Iter</a>::all[T](self : <a href=\"moonbitlang/core/builtin#Iter\">Iter</a>[T], f : (T) -> Bool) -> Bool",
          "loc": { "line": 68, "column": 8 }
        },
        {
          "name": "any",
          "docstring": "",
          "signature": "fn <a href=\"moonbitlang/core/builtin#Iter\">Iter</a>::any[T](self : <a href=\"moonbitlang/core/builtin#Iter\">Iter</a>[T], f : (T) -> Bool) -> Bool",
          "loc": { "line": 63, "column": 8 }
        },
        {
          "name": "append",
          "docstring": "\n Appends a single element to the end of the iterator.\n\n # Type Parameters\n\n - `T`: The type of the elements in the iterator.\n\n # Arguments\n\n * `self` - The input iterator.\n * `a` - The element to be appended to the iterator.\n\n # Returns\n\n Returns a new iterator with the element `a` appended to the original iterator.",
          "signature": "fn <a href=\"moonbitlang/core/builtin#Iter\">Iter</a>::append[T](self : <a href=\"moonbitlang/core/builtin#Iter\">Iter</a>[T], a : T) -> <a href=\"moonbitlang/core/builtin#Iter\">Iter</a>[T]",
          "loc": { "line": 722, "column": 8 }
        },
        {
          "name": "collect",
          "docstring": "\n Collects the elements of the iterator into an array.",
          "signature": "fn <a href=\"moonbitlang/core/builtin#Iter\">Iter</a>::collect[T](self : <a href=\"moonbitlang/core/builtin#Iter\">Iter</a>[T]) -> <a href=\"moonbitlang/core/array#Array\">Array</a>[T]",
          "loc": { "line": 775, "column": 8 }
        },
        {
          "name": "concat",
          "docstring": "\n Combines two iterators into one by appending the elements of the second iterator to the first.\n\n # Type Parameters\n\n - `T`: The type of the elements in the iterators.\n\n # Arguments\n\n * `self` - The first input iterator.\n * `other` - The second input iterator to be appended to the first.\n\n # Returns\n\n Returns a new iterator that contains the elements of `self` followed by the elements of `other`.\n @intrinsic %iter.concat",
          "signature": "fn <a href=\"moonbitlang/core/builtin#Iter\">Iter</a>::concat[T](self : <a href=\"moonbitlang/core/builtin#Iter\">Iter</a>[T], other : <a href=\"moonbitlang/core/builtin#Iter\">Iter</a>[T]) -> <a href=\"moonbitlang/core/builtin#Iter\">Iter</a>[T]",
          "loc": { "line": 748, "column": 14 }
        },
        {
          "name": "contains",
          "docstring": "\n Checks if the iterator contains an element equal to the given value.\n\n Parameters:\n\n * `self` : The iterator to search in.\n * `value` : The value to search for.\n\n Returns `true` if the iterator contains an element equal to the given value,\n `false` otherwise.\n\n Example:\n\n ```moonbit\n test \"Iter::contains\" {\n   let iter = [1, 2, 3, 4, 5].iter()\n   inspect!(iter.contains(3), content=\"true\")\n   inspect!(iter.contains(6), content=\"false\")\n }\n \n test \"Iter::contains/empty\" {\n   let iter = Iter::empty()\n   inspect!(iter.contains(1), content=\"false\")\n }\n ```",
          "signature": "fn <a href=\"moonbitlang/core/builtin#Iter\">Iter</a>::contains[A : <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>](self : <a href=\"moonbitlang/core/builtin#Iter\">Iter</a>[A], value : A) -> Bool",
          "loc": { "line": 898, "column": 8 }
        },
        {
          "name": "count",
          "docstring": "\n Counts the number of elements in the iterator.\n\n # Type Parameters\n\n - `T`: The type of the elements in the iterator.\n\n # Arguments\n\n - `self`: The iterator to consume.\n\n # Returns\n\n Returns the number of elements in the iterator.",
          "signature": "fn <a href=\"moonbitlang/core/builtin#Iter\">Iter</a>::count[T](self : <a href=\"moonbitlang/core/builtin#Iter\">Iter</a>[T]) -> Int",
          "loc": { "line": 133, "column": 8 }
        },
        {
          "name": "drop",
          "docstring": "\n Skips the first `n` elements from the iterator.\n\n # Type Parameters\n\n - `T`: The type of the elements in the iterator.\n\n # Arguments\n\n * `self` - The input iterator.\n * `n` - The number of elements to skip.\n\n # Returns\n\n A new iterator that starts after skipping the first `n` elements.",
          "signature": "fn <a href=\"moonbitlang/core/builtin#Iter\">Iter</a>::drop[T](self : <a href=\"moonbitlang/core/builtin#Iter\">Iter</a>[T], n : Int) -> <a href=\"moonbitlang/core/builtin#Iter\">Iter</a>[T]",
          "loc": { "line": 604, "column": 8 }
        },
        {
          "name": "drop_while",
          "docstring": "\n Skips elements from the iterator as long as the predicate function returns `true`.\n\n # Type Parameters\n\n - `T`: The type of the elements in the iterator.\n\n # Arguments\n\n * `self` - The input iterator.\n * `f` - The predicate function that determines whether an element should be skipped.\n\n # Returns\n\n A new iterator that starts after skipping the elements as long as the predicate function returns `true`.",
          "signature": "fn <a href=\"moonbitlang/core/builtin#Iter\">Iter</a>::drop_while[T](self : <a href=\"moonbitlang/core/builtin#Iter\">Iter</a>[T], f : (T) -> Bool) -> <a href=\"moonbitlang/core/builtin#Iter\">Iter</a>[T]",
          "loc": { "line": 633, "column": 8 }
        },
        {
          "name": "each",
          "docstring": "\n Iterates over each element in the iterator, applying the function `f` to each element.\n\n # Type Parameters\n\n - `T`: The type of the elements in the iterator.\n\n # Arguments\n\n - `self`: The iterator to consume.\n - `f`: A function that takes an element of type `T` and returns `Unit`. This function is applied to each element of the iterator.\n TODO: change the intrinsic to match the function name\n @intrinsic %iter.iter",
          "signature": "fn <a href=\"moonbitlang/core/builtin#Iter\">Iter</a>::each[T](self : <a href=\"moonbitlang/core/builtin#Iter\">Iter</a>[T], f : (T) -> Unit) -> Unit",
          "loc": { "line": 56, "column": 8 }
        },
        {
          "name": "eachi",
          "docstring": "\n Iterates over each element in the iterator, applying the function `f` to each element with index.\n\n # Type Parameters\n\n - `T`: The type of the elements in the iterator.\n\n # Arguments\n\n - `self`: The iterator to consume.\n - `f`: A function that takes an index of type `Int` and an element of type `T` and returns `Unit`. This function is applied to each element of the iterator.\n TODO: Add intrinsic",
          "signature": "fn <a href=\"moonbitlang/core/builtin#Iter\">Iter</a>::eachi[T](self : <a href=\"moonbitlang/core/builtin#Iter\">Iter</a>[T], f : (Int, T) -> Unit) -> Unit",
          "loc": { "line": 85, "column": 8 }
        },
        {
          "name": "empty",
          "docstring": "\n Creates an empty iterator.\n\n # Type Parameters\n\n - `T`: The type of the elements in the iterator.\n\n # Returns\n\n Returns an empty iterator of type `Iter[T]`.",
          "signature": "fn <a href=\"moonbitlang/core/builtin#Iter\">Iter</a>::empty[T]() -> <a href=\"moonbitlang/core/builtin#Iter\">Iter</a>[T]",
          "loc": { "line": 155, "column": 14 }
        },
        {
          "name": "filter",
          "docstring": "\n Filters the elements of the iterator based on a predicate function.\n\n # Type Parameters\n\n - `T`: The type of the elements in the iterator.\n\n # Arguments\n\n * `self` - The input iterator.\n * `f` - The predicate function that determines whether an element should be included in the filtered iterator.\n\n # Returns\n\n A new iterator that only contains the elements for which the predicate function returns `IterContinue`.\n @intrinsic %iter.filter",
          "signature": "fn <a href=\"moonbitlang/core/builtin#Iter\">Iter</a>::filter[T](self : <a href=\"moonbitlang/core/builtin#Iter\">Iter</a>[T], f : (T) -> Bool) -> <a href=\"moonbitlang/core/builtin#Iter\">Iter</a>[T]",
          "loc": { "line": 391, "column": 8 }
        },
        {
          "name": "filter_map",
          "docstring": "\n Transforms the elements of the iterator using a mapping function that returns an `Option`.\n The elements for which the function returns `None` are filtered out.",
          "signature": "fn <a href=\"moonbitlang/core/builtin#Iter\">Iter</a>::filter_map[A, B](self : <a href=\"moonbitlang/core/builtin#Iter\">Iter</a>[A], f : (A) -> B?) -> <a href=\"moonbitlang/core/builtin#Iter\">Iter</a>[B]",
          "loc": { "line": 421, "column": 8 }
        },
        {
          "name": "find_first",
          "docstring": "\n Finds the first element in the iterator that satisfies the predicate function.\n\n # Type Parameters\n\n - `T`: The type of the elements in the iterator.\n\n # Arguments\n\n * `self` - The input iterator.\n * `f` - The predicate function that determines whether an element is the first element to be found.\n\n # Returns\n\n An `Option` that contains the first element that satisfies the predicate function, or `None` if no such element is found.",
          "signature": "fn <a href=\"moonbitlang/core/builtin#Iter\">Iter</a>::find_first[T](self : <a href=\"moonbitlang/core/builtin#Iter\">Iter</a>[T], f : (T) -> Bool) -> T?",
          "loc": { "line": 662, "column": 8 }
        },
        {
          "name": "flat_map",
          "docstring": "\n Transforms each element of the iterator into an iterator and flattens the resulting iterators into a single iterator.\n\n # Type Parameters\n\n - `T`: The type of the elements in the iterator.\n - `R`: The type of the transformed elements.\n\n # Arguments\n\n * `self` - The input iterator.\n * `f` - The function that transforms each element of the iterator into an iterator.\n\n # Returns\n\n A new iterator that contains the flattened elements.\n @intrinsic %iter.flat_map",
          "signature": "fn <a href=\"moonbitlang/core/builtin#Iter\">Iter</a>::flat_map[T, R](self : <a href=\"moonbitlang/core/builtin#Iter\">Iter</a>[T], f : (T) -> <a href=\"moonbitlang/core/builtin#Iter\">Iter</a>[R]) -> <a href=\"moonbitlang/core/builtin#Iter\">Iter</a>[R]",
          "loc": { "line": 458, "column": 8 }
        },
        {
          "name": "fold",
          "docstring": "\n Folds the elements of the iterator using the given function, starting with the given initial value.\n\n # Type Parameters\n\n - `T`: The type of the elements in the iterator.\n - `B`: The type of the accumulator value.\n\n # Arguments\n\n - `self`: The iterator to consume.\n - `f`: A function that takes an accumulator of type `B` and an element of type `T`, and returns a new accumulator value.\n - `init`: The initial value for the fold operation.\n\n # Returns\n\n Returns the final accumulator value after folding all elements of the iterator.\n @intrinsic %iter.reduce",
          "signature": "fn <a href=\"moonbitlang/core/builtin#Iter\">Iter</a>::fold[T, B](self : <a href=\"moonbitlang/core/builtin#Iter\">Iter</a>[T], init~ : B, f : (B, T) -> B) -> B",
          "loc": { "line": 111, "column": 8 }
        },
        {
          "name": "head",
          "docstring": "\n Returns the first element of the iterator, or `None` if the iterator is empty.\n \n # Type Parameters\n \n - `A` : The type of the elements in the iterator.\n \n # Parameters\n \n - `self` : The iterator to retrieve the first element from.\n \n # Returns\n \n - An `Option` containing the first element of the iterator if it exists, otherwise `None`.\n \n # Examples\n \n ```\n let iter = Iter::singleton(42)\n assert_eq!(head(iter), Some(42))\n ```",
          "signature": "fn <a href=\"moonbitlang/core/builtin#Iter\">Iter</a>::head[A](self : <a href=\"moonbitlang/core/builtin#Iter\">Iter</a>[A]) -> A?",
          "loc": { "line": 819, "column": 8 }
        },
        {
          "name": "intersperse",
          "docstring": "\n Inserts a separator element `sep` between each element of the iterator.\n \n # Parameters\n \n - `self` : The iterator to intersperse the separator into.\n - `sep` : The separator element to insert between each element of the iterator.\n \n # Examples\n \n ```\n let arr = []\n [1, 2, 3].iter().intersperse(0).each(fn(i) {arr.push(i)})\n assert_eq!(arr, [1, 0, 2, 0, 3])\n ```",
          "signature": "fn <a href=\"moonbitlang/core/builtin#Iter\">Iter</a>::intersperse[A](self : <a href=\"moonbitlang/core/builtin#Iter\">Iter</a>[A], sep : A) -> <a href=\"moonbitlang/core/builtin#Iter\">Iter</a>[A]",
          "loc": { "line": 842, "column": 8 }
        },
        {
          "name": "iter",
          "docstring": "\n Iter itself is an iterator.\n so that it works with array spread operator. e.g, `[..iter]`",
          "signature": "fn <a href=\"moonbitlang/core/builtin#Iter\">Iter</a>::iter[T](self : <a href=\"moonbitlang/core/builtin#Iter\">Iter</a>[T]) -> <a href=\"moonbitlang/core/builtin#Iter\">Iter</a>[T]",
          "loc": { "line": 784, "column": 8 }
        },
        {
          "name": "just_run",
          "docstring": "",
          "signature": "fn <a href=\"moonbitlang/core/builtin#Iter\">Iter</a>::just_run[T](self : <a href=\"moonbitlang/core/builtin#Iter\">Iter</a>[T], f : (T) -> <a href=\"moonbitlang/core/builtin#IterResult\">IterResult</a>) -> Unit",
          "loc": { "line": 26, "column": 8 }
        },
        {
          "name": "last",
          "docstring": "\n Returns the last element of the iterator, or `None` if the iterator is empty.",
          "signature": "fn <a href=\"moonbitlang/core/builtin#Iter\">Iter</a>::last[A](self : <a href=\"moonbitlang/core/builtin#Iter\">Iter</a>[A]) -> A?",
          "loc": { "line": 790, "column": 8 }
        },
        {
          "name": "map",
          "docstring": "\n Transforms the elements of the iterator using a mapping function.\n\n # Type Parameters\n\n - `T`: The type of the elements in the iterator.\n - `R`: The type of the transformed elements.\n\n # Arguments\n\n * `self` - The input iterator.\n * `f` - The mapping function that transforms each element of the iterator.\n\n # Returns\n\n A new iterator that contains the transformed elements.\n @intrinsic %iter.map",
          "signature": "fn <a href=\"moonbitlang/core/builtin#Iter\">Iter</a>::map[T, R](self : <a href=\"moonbitlang/core/builtin#Iter\">Iter</a>[T], f : (T) -> R) -> <a href=\"moonbitlang/core/builtin#Iter\">Iter</a>[R]",
          "loc": { "line": 414, "column": 8 }
        },
        {
          "name": "map_option",
          "docstring": "\n Transforms the elements of the iterator using a mapping function that returns an `Option`.\n The elements for which the function returns `None` are filtered out.\n\n @alert deprecated \"Use `Iter::filter_map` instead\"",
          "signature": "fn <a href=\"moonbitlang/core/builtin#Iter\">Iter</a>::map_option[A, B](self : <a href=\"moonbitlang/core/builtin#Iter\">Iter</a>[A], f : (A) -> B?) -> <a href=\"moonbitlang/core/builtin#Iter\">Iter</a>[B]",
          "loc": { "line": 437, "column": 8 }
        },
        {
          "name": "map_while",
          "docstring": "\n Transforms the elements of the iterator using a mapping function upto the function returns `None`.",
          "signature": "fn <a href=\"moonbitlang/core/builtin#Iter\">Iter</a>::map_while[A, B](self : <a href=\"moonbitlang/core/builtin#Iter\">Iter</a>[A], f : (A) -> B?) -> <a href=\"moonbitlang/core/builtin#Iter\">Iter</a>[B]",
          "loc": { "line": 570, "column": 8 }
        },
        {
          "name": "new",
          "docstring": "\n Do not use this method, it is for internal use only.",
          "signature": "fn <a href=\"moonbitlang/core/builtin#Iter\">Iter</a>::new[T](f : ((T) -> <a href=\"moonbitlang/core/builtin#IterResult\">IterResult</a>) -> <a href=\"moonbitlang/core/builtin#IterResult\">IterResult</a>) -> <a href=\"moonbitlang/core/builtin#Iter\">Iter</a>[T]",
          "loc": { "line": 141, "column": 14 }
        },
        {
          "name": "op_add",
          "docstring": "",
          "signature": "fn <a href=\"moonbitlang/core/builtin#Iter\">Iter</a>::op_add[T](self : <a href=\"moonbitlang/core/builtin#Iter\">Iter</a>[T], other : <a href=\"moonbitlang/core/builtin#Iter\">Iter</a>[T]) -> <a href=\"moonbitlang/core/builtin#Iter\">Iter</a>[T]",
          "loc": { "line": 759, "column": 8 }
        },
        {
          "name": "op_as_view",
          "docstring": "",
          "signature": "fn <a href=\"moonbitlang/core/builtin#Iter\">Iter</a>::op_as_view[A](self : <a href=\"moonbitlang/core/builtin#Iter\">Iter</a>[A], start~ : Int = .., end? : Int) -> <a href=\"moonbitlang/core/builtin#Iter\">Iter</a>[A]",
          "loc": { "line": 859, "column": 8 }
        },
        {
          "name": "peek",
          "docstring": "",
          "signature": "fn <a href=\"moonbitlang/core/builtin#Iter\">Iter</a>::peek[T](self : <a href=\"moonbitlang/core/builtin#Iter\">Iter</a>[T]) -> T?",
          "loc": { "line": 673, "column": 8 }
        },
        {
          "name": "prepend",
          "docstring": "\n Prepends a single element to the beginning of the iterator.\n\n # Type Parameters\n\n - `T`: The type of the elements in the iterator.\n\n # Arguments\n\n * `self` - The input iterator.\n * `a` - The element to be prepended to the iterator.\n\n # Returns\n\n Returns a new iterator with the element `a` prepended to the original iterator.",
          "signature": "fn <a href=\"moonbitlang/core/builtin#Iter\">Iter</a>::prepend[T](self : <a href=\"moonbitlang/core/builtin#Iter\">Iter</a>[T], a : T) -> <a href=\"moonbitlang/core/builtin#Iter\">Iter</a>[T]",
          "loc": { "line": 697, "column": 8 }
        },
        {
          "name": "repeat",
          "docstring": "\n Creates an iterator that repeats the given element indefinitely.\n\n # Type Parameters\n\n - `T`: The type of the elements in the iterator.\n\n # Arguments\n\n - `a`: The element to be repeated.\n\n # Returns\n\n Returns an iterator of type `Iter[T]` that repeats the element `a` indefinitely.\n @intrinsic %iter.repeat",
          "signature": "fn <a href=\"moonbitlang/core/builtin#Iter\">Iter</a>::repeat[T](a : T) -> <a href=\"moonbitlang/core/builtin#Iter\">Iter</a>[T]",
          "loc": { "line": 192, "column": 14 }
        },
        {
          "name": "run",
          "docstring": "",
          "signature": "fn <a href=\"moonbitlang/core/builtin#Iter\">Iter</a>::run[T](self : <a href=\"moonbitlang/core/builtin#Iter\">Iter</a>[T], f : (T) -> <a href=\"moonbitlang/core/builtin#IterResult\">IterResult</a>) -> <a href=\"moonbitlang/core/builtin#IterResult\">IterResult</a>",
          "loc": { "line": 21, "column": 8 }
        },
        {
          "name": "singleton",
          "docstring": "\n Creates an iterator that contains a single element.\n\n # Type Parameters\n\n - `T`: The type of the element in the iterator.\n\n # Arguments\n\n - `a`: The single element to be contained in the iterator.\n\n # Returns\n\n Returns an iterator of type `Iter[T]` that contains the single element `a`.",
          "signature": "fn <a href=\"moonbitlang/core/builtin#Iter\">Iter</a>::singleton[T](a : T) -> <a href=\"moonbitlang/core/builtin#Iter\">Iter</a>[T]",
          "loc": { "line": 173, "column": 14 }
        },
        {
          "name": "take",
          "docstring": "\n Takes the first `n` elements from the iterator.\n\n # Type Parameters\n\n - `T`: The type of the elements in the iterator.\n\n # Arguments\n\n * `self` - The input iterator.\n * `n` - The number of elements to take.\n\n # Returns\n\n A new iterator that contains the first `n` elements.\n @intrinsic %iter.take",
          "signature": "fn <a href=\"moonbitlang/core/builtin#Iter\">Iter</a>::take[T](self : <a href=\"moonbitlang/core/builtin#Iter\">Iter</a>[T], n : Int) -> <a href=\"moonbitlang/core/builtin#Iter\">Iter</a>[T]",
          "loc": { "line": 502, "column": 8 }
        },
        {
          "name": "take_while",
          "docstring": "\n Takes elements from the iterator as long as the predicate function returns `true`.\n\n # Type Parameters\n\n - `T`: The type of the elements in the iterator.\n\n # Arguments\n\n * `self` - The input iterator.\n * `f` - The predicate function that determines whether an element should be taken.\n\n # Returns\n\n A new iterator that contains the elements as long as the predicate function returns `true`.",
          "signature": "fn <a href=\"moonbitlang/core/builtin#Iter\">Iter</a>::take_while[T](self : <a href=\"moonbitlang/core/builtin#Iter\">Iter</a>[T], f : (T) -> Bool) -> <a href=\"moonbitlang/core/builtin#Iter\">Iter</a>[T]",
          "loc": { "line": 543, "column": 8 }
        },
        {
          "name": "tap",
          "docstring": "\n Applies a function to each element of the iterator without modifying the iterator.\n\n # Type Parameters\n\n - `T`: The type of the elements in the iterator.\n\n # Arguments\n\n * `self` - The input iterator.\n * `f` - The function to apply to each element of the iterator.\n\n # Returns\n\n The same iterator.",
          "signature": "fn <a href=\"moonbitlang/core/builtin#Iter\">Iter</a>::tap[T](self : <a href=\"moonbitlang/core/builtin#Iter\">Iter</a>[T], f : (T) -> Unit) -> <a href=\"moonbitlang/core/builtin#Iter\">Iter</a>[T]",
          "loc": { "line": 477, "column": 8 }
        },
        {
          "name": "to_array",
          "docstring": "\n Collects the elements of the iterator into an array.",
          "signature": "fn <a href=\"moonbitlang/core/builtin#Iter\">Iter</a>::to_array[T](self : <a href=\"moonbitlang/core/builtin#Iter\">Iter</a>[T]) -> <a href=\"moonbitlang/core/array#Array\">Array</a>[T]",
          "loc": { "line": 765, "column": 8 }
        }
      ],
      "impls": [
        {
          "docstring": "",
          "signature": "impl[T : <a href=\"moonbitlang/core/builtin#Show\">Show</a>] <a href=\"moonbitlang/core/builtin#Show\">Show</a> for <a href=\"moonbitlang/core/builtin#Iter\">Iter</a>[T]",
          "methods": [
            {
              "name": "output",
              "docstring": "",
              "signature": "fn output[T : <a href=\"moonbitlang/core/builtin#Show\">Show</a>](self : <a href=\"moonbitlang/core/builtin#Iter\">Iter</a>[T], logger : <a href=\"moonbitlang/core/builtin#Logger\">Logger</a>) -> Unit",
              "loc": { "line": 37, "column": 42 }
            }
          ],
          "loc": { "line": 37, "column": 1 }
        }
      ]
    },
    {
      "name": "Iter2",
      "docstring": "",
      "signature": "type Iter2",
      "loc": { "line": 23, "column": 6 },
      "methods": [
        {
          "name": "each",
          "docstring": "",
          "signature": "fn <a href=\"moonbitlang/core/builtin#Iter2\">Iter2</a>::each[A, B](self : <a href=\"moonbitlang/core/builtin#Iter2\">Iter2</a>[A, B], f : (A, B) -> Unit) -> Unit",
          "loc": { "line": 59, "column": 8 }
        },
        {
          "name": "iter",
          "docstring": "",
          "signature": "fn <a href=\"moonbitlang/core/builtin#Iter2\">Iter2</a>::iter[A, B](self : <a href=\"moonbitlang/core/builtin#Iter2\">Iter2</a>[A, B]) -> <a href=\"moonbitlang/core/builtin#Iter\">Iter</a>[(A, B)]",
          "loc": { "line": 68, "column": 8 }
        },
        {
          "name": "iter2",
          "docstring": "",
          "signature": "fn <a href=\"moonbitlang/core/builtin#Iter2\">Iter2</a>::iter2[A, B](self : <a href=\"moonbitlang/core/builtin#Iter2\">Iter2</a>[A, B]) -> <a href=\"moonbitlang/core/builtin#Iter2\">Iter2</a>[A, B]",
          "loc": { "line": 73, "column": 8 }
        },
        {
          "name": "new",
          "docstring": "",
          "signature": "fn <a href=\"moonbitlang/core/builtin#Iter2\">Iter2</a>::new[A, B](f : ((A, B) -> <a href=\"moonbitlang/core/builtin#IterResult\">IterResult</a>) -> <a href=\"moonbitlang/core/builtin#IterResult\">IterResult</a>) -> <a href=\"moonbitlang/core/builtin#Iter2\">Iter2</a>[A, B]",
          "loc": { "line": 52, "column": 15 }
        },
        {
          "name": "run",
          "docstring": "",
          "signature": "fn <a href=\"moonbitlang/core/builtin#Iter2\">Iter2</a>::run[A, B](self : <a href=\"moonbitlang/core/builtin#Iter2\">Iter2</a>[A, B], f : (A, B) -> <a href=\"moonbitlang/core/builtin#IterResult\">IterResult</a>) -> <a href=\"moonbitlang/core/builtin#IterResult\">IterResult</a>",
          "loc": { "line": 27, "column": 8 }
        },
        {
          "name": "to_array",
          "docstring": "",
          "signature": "fn <a href=\"moonbitlang/core/builtin#Iter2\">Iter2</a>::to_array[A, B](self : <a href=\"moonbitlang/core/builtin#Iter2\">Iter2</a>[A, B]) -> <a href=\"moonbitlang/core/array#Array\">Array</a>[(A, B)]",
          "loc": { "line": 81, "column": 8 }
        }
      ],
      "impls": [
        {
          "docstring": "",
          "signature": "impl[A : <a href=\"moonbitlang/core/builtin#Show\">Show</a>, B : <a href=\"moonbitlang/core/builtin#Show\">Show</a>] <a href=\"moonbitlang/core/builtin#Show\">Show</a> for <a href=\"moonbitlang/core/builtin#Iter2\">Iter2</a>[A, B]",
          "methods": [
            {
              "name": "output",
              "docstring": "",
              "signature": "fn output[A : <a href=\"moonbitlang/core/builtin#Show\">Show</a>, B : <a href=\"moonbitlang/core/builtin#Show\">Show</a>](self : <a href=\"moonbitlang/core/builtin#Iter2\">Iter2</a>[A, B], logger : <a href=\"moonbitlang/core/builtin#Logger\">Logger</a>) -> Unit",
              "loc": { "line": 32, "column": 56 }
            }
          ],
          "loc": { "line": 32, "column": 1 }
        }
      ]
    },
    {
      "name": "IterResult",
      "docstring": "",
      "signature": "pub(all) enum IterResult {\n  IterEnd\n  IterContinue\n}",
      "loc": { "line": 31, "column": 15 },
      "methods": [],
      "impls": [
        {
          "docstring": "",
          "signature": "impl <a href=\"moonbitlang/core/builtin#Eq\">Eq</a> for <a href=\"moonbitlang/core/builtin#IterResult\">IterResult</a>",
          "methods": [
            {
              "name": "op_equal",
              "docstring": "automatically derived",
              "signature": "fn op_equal(<a href=\"moonbitlang/core/builtin#IterResult\">IterResult</a>, <a href=\"moonbitlang/core/builtin#IterResult\">IterResult</a>) -> Bool",
              "loc": { "line": 34, "column": 10 }
            }
          ],
          "loc": { "line": 34, "column": 10 }
        }
      ]
    },
    {
      "name": "Json",
      "docstring": "",
      "signature": "pub(all) enum Json {\n  Null\n  True\n  False\n  Number(Double)\n  String(String)\n  Array(<a href=\"moonbitlang/core/array#Array\">Array</a>[<a href=\"moonbitlang/core/json#Json\">Json</a>])\n  Object(<a href=\"moonbitlang/core/builtin#Map\">Map</a>[String, <a href=\"moonbitlang/core/json#Json\">Json</a>])\n}",
      "loc": { "line": 16, "column": 15 },
      "methods": [
        {
          "name": "default",
          "docstring": "",
          "signature": "fn <a href=\"moonbitlang/core/json#Json\">Json</a>::default() -> <a href=\"moonbitlang/core/json#Json\">Json</a>",
          "loc": { "line": 191, "column": 14 }
        }
      ],
      "impls": [
        {
          "docstring": "",
          "signature": "impl <a href=\"moonbitlang/core/builtin#Eq\">Eq</a> for <a href=\"moonbitlang/core/json#Json\">Json</a>",
          "methods": [
            {
              "name": "op_equal",
              "docstring": "automatically derived",
              "signature": "fn op_equal(<a href=\"moonbitlang/core/json#Json\">Json</a>, <a href=\"moonbitlang/core/json#Json\">Json</a>) -> Bool",
              "loc": { "line": 24, "column": 10 }
            }
          ],
          "loc": { "line": 24, "column": 10 }
        }
      ]
    },
    {
      "name": "Map",
      "docstring": "\n Mutable linked hash map that maintains the order of insertion, not thread safe. \n  \n # Example\n \n ```\n let map = { 3: \"three\", 8 :  \"eight\", 1 :  \"one\"}\n assert_eq!(map.get(2), None)\n assert_eq!(map.get(3), Some(\"three\"))\n map.set(3, \"updated\")\n assert_eq!(map.get(3), Some(\"updated\"))\n ```",
      "signature": "type Map",
      "loc": { "line": 48, "column": 8 },
      "methods": [
        {
          "name": "capacity",
          "docstring": "\n Get the capacity of the map.",
          "signature": "fn <a href=\"moonbitlang/core/builtin#Map\">Map</a>::capacity[K, V](self : <a href=\"moonbitlang/core/builtin#Map\">Map</a>[K, V]) -> Int",
          "loc": { "line": 413, "column": 8 }
        },
        {
          "name": "clear",
          "docstring": "\n Clears the map, removing all key-value pairs. Keeps the allocated space.",
          "signature": "fn <a href=\"moonbitlang/core/builtin#Map\">Map</a>::clear[K, V](self : <a href=\"moonbitlang/core/builtin#Map\">Map</a>[K, V]) -> Unit",
          "loc": { "line": 449, "column": 8 }
        },
        {
          "name": "contains",
          "docstring": "\n Check if the hash map contains a key.",
          "signature": "fn <a href=\"moonbitlang/core/builtin#Map\">Map</a>::contains[K : <a href=\"moonbitlang/core/builtin#Hash\">Hash</a> + <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>, V](self : <a href=\"moonbitlang/core/builtin#Map\">Map</a>[K, V], key : K) -> Bool",
          "loc": { "line": 250, "column": 8 }
        },
        {
          "name": "default",
          "docstring": "",
          "signature": "fn <a href=\"moonbitlang/core/builtin#Map\">Map</a>::default[K, V]() -> <a href=\"moonbitlang/core/builtin#Map\">Map</a>[K, V]",
          "loc": { "line": 569, "column": 13 }
        },
        {
          "name": "each",
          "docstring": "\n Iterate over all key-value pairs of the map in the order of insertion.",
          "signature": "fn <a href=\"moonbitlang/core/builtin#Map\">Map</a>::each[K, V](self : <a href=\"moonbitlang/core/builtin#Map\">Map</a>[K, V], f : (K, V) -> Unit) -> Unit",
          "loc": { "line": 425, "column": 8 }
        },
        {
          "name": "eachi",
          "docstring": "\n Iterate over all key-value pairs of the map in the order of insertion, with index.",
          "signature": "fn <a href=\"moonbitlang/core/builtin#Map\">Map</a>::eachi[K, V](self : <a href=\"moonbitlang/core/builtin#Map\">Map</a>[K, V], f : (Int, K, V) -> Unit) -> Unit",
          "loc": { "line": 437, "column": 8 }
        },
        {
          "name": "from_array",
          "docstring": "\n Create a hash map from array.",
          "signature": "fn <a href=\"moonbitlang/core/builtin#Map\">Map</a>::from_array[K : <a href=\"moonbitlang/core/builtin#Hash\">Hash</a> + <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>, V](arr : <a href=\"moonbitlang/core/array#Array\">Array</a>[(K, V)]) -> <a href=\"moonbitlang/core/builtin#Map\">Map</a>[K, V]",
          "loc": { "line": 105, "column": 13 }
        },
        {
          "name": "from_iter",
          "docstring": "",
          "signature": "fn <a href=\"moonbitlang/core/builtin#Map\">Map</a>::from_iter[K : <a href=\"moonbitlang/core/builtin#Hash\">Hash</a> + <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>, V](iter : <a href=\"moonbitlang/core/builtin#Iter\">Iter</a>[(K, V)]) -> <a href=\"moonbitlang/core/builtin#Map\">Map</a>[K, V]",
          "loc": { "line": 560, "column": 13 }
        },
        {
          "name": "get",
          "docstring": "\n Get the value associated with a key.",
          "signature": "fn <a href=\"moonbitlang/core/builtin#Map\">Map</a>::get[K : <a href=\"moonbitlang/core/builtin#Hash\">Hash</a> + <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>, V](self : <a href=\"moonbitlang/core/builtin#Map\">Map</a>[K, V], key : K) -> V?",
          "loc": { "line": 163, "column": 8 }
        },
        {
          "name": "get_or_default",
          "docstring": "\n Returns the value associated with the key in the map, or computes and returns\n a default value if the key does not exist.\n\n Parameters:\n\n * `map` : The map to search in.\n * `key` : The key to look up in the map.\n * `default` : A function that returns a default value when the key is not\n found.\n\n Returns either the value associated with the key if it exists, or the result\n of calling the default function.\n\n Example:\n\n ```moonbit\n test \"get_or_default\" {\n   let map = { \"a\": 1, \"b\": 2 }\n   inspect!(map.get_or_default(\"a\", 0), content=\"1\")\n   inspect!(map.get_or_default(\"c\", 42), content=\"42\")\n }\n ```",
          "signature": "fn <a href=\"moonbitlang/core/builtin#Map\">Map</a>::get_or_default[K : <a href=\"moonbitlang/core/builtin#Hash\">Hash</a> + <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>, V](self : <a href=\"moonbitlang/core/builtin#Map\">Map</a>[K, V], key : K, default : V) -> V",
          "loc": { "line": 209, "column": 8 }
        },
        {
          "name": "get_or_init",
          "docstring": "\n Returns the value for the given key, or sets and returns a default value if the key does not exist.",
          "signature": "fn <a href=\"moonbitlang/core/builtin#Map\">Map</a>::get_or_init[K : <a href=\"moonbitlang/core/builtin#Hash\">Hash</a> + <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>, V](self : <a href=\"moonbitlang/core/builtin#Map\">Map</a>[K, V], key : K, default : () -> V) -> V",
          "loc": { "line": 233, "column": 8 }
        },
        {
          "name": "is_empty",
          "docstring": "\n Check if the hash map is empty.",
          "signature": "fn <a href=\"moonbitlang/core/builtin#Map\">Map</a>::is_empty[K, V](self : <a href=\"moonbitlang/core/builtin#Map\">Map</a>[K, V]) -> Bool",
          "loc": { "line": 419, "column": 8 }
        },
        {
          "name": "iter",
          "docstring": "\n Returns the iterator of the hash map, provide elements in the order of insertion.",
          "signature": "fn <a href=\"moonbitlang/core/builtin#Map\">Map</a>::iter[K, V](self : <a href=\"moonbitlang/core/builtin#Map\">Map</a>[K, V]) -> <a href=\"moonbitlang/core/builtin#Iter\">Iter</a>[(K, V)]",
          "loc": { "line": 458, "column": 8 }
        },
        {
          "name": "iter2",
          "docstring": "",
          "signature": "fn <a href=\"moonbitlang/core/builtin#Map\">Map</a>::iter2[K, V](self : <a href=\"moonbitlang/core/builtin#Map\">Map</a>[K, V]) -> <a href=\"moonbitlang/core/builtin#Iter2\">Iter2</a>[K, V]",
          "loc": { "line": 473, "column": 8 }
        },
        {
          "name": "keys",
          "docstring": "",
          "signature": "fn <a href=\"moonbitlang/core/builtin#Map\">Map</a>::keys[K, V](self : <a href=\"moonbitlang/core/builtin#Map\">Map</a>[K, V]) -> <a href=\"moonbitlang/core/builtin#Iter\">Iter</a>[K]",
          "loc": { "line": 488, "column": 8 }
        },
        {
          "name": "new",
          "docstring": "\n Create a hash map.\n The capacity of the map will be the smallest power of 2 that is\n greater than or equal to the provided [capacity].",
          "signature": "fn <a href=\"moonbitlang/core/builtin#Map\">Map</a>::new[K, V](capacity~ : Int = ..) -> <a href=\"moonbitlang/core/builtin#Map\">Map</a>[K, V]",
          "loc": { "line": 89, "column": 13 }
        },
        {
          "name": "of",
          "docstring": "",
          "signature": "fn <a href=\"moonbitlang/core/builtin#Map\">Map</a>::of[K : <a href=\"moonbitlang/core/builtin#Hash\">Hash</a> + <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>, V](arr : <a href=\"moonbitlang/core/array#FixedArray\">FixedArray</a>[(K, V)]) -> <a href=\"moonbitlang/core/builtin#Map\">Map</a>[K, V]",
          "loc": { "line": 548, "column": 13 }
        },
        {
          "name": "op_equal",
          "docstring": "",
          "signature": "fn <a href=\"moonbitlang/core/builtin#Map\">Map</a>::op_equal[K : <a href=\"moonbitlang/core/builtin#Hash\">Hash</a> + <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>, V : <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>](self : <a href=\"moonbitlang/core/builtin#Map\">Map</a>[K, V], that : <a href=\"moonbitlang/core/builtin#Map\">Map</a>[K, V]) -> Bool",
          "loc": { "line": 530, "column": 8 }
        },
        {
          "name": "op_get",
          "docstring": "",
          "signature": "fn <a href=\"moonbitlang/core/builtin#Map\">Map</a>::op_get[K : <a href=\"moonbitlang/core/builtin#Hash\">Hash</a> + <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>, V](self : <a href=\"moonbitlang/core/builtin#Map\">Map</a>[K, V], key : K) -> V?",
          "loc": { "line": 182, "column": 8 }
        },
        {
          "name": "op_set",
          "docstring": "",
          "signature": "fn <a href=\"moonbitlang/core/builtin#Map\">Map</a>::op_set[K : <a href=\"moonbitlang/core/builtin#Hash\">Hash</a> + <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>, V](self : <a href=\"moonbitlang/core/builtin#Map\">Map</a>[K, V], key : K, value : V) -> Unit",
          "loc": { "line": 157, "column": 8 }
        },
        {
          "name": "remove",
          "docstring": "\n Remove a key-value pair from hash map.",
          "signature": "fn <a href=\"moonbitlang/core/builtin#Map\">Map</a>::remove[K : <a href=\"moonbitlang/core/builtin#Hash\">Hash</a> + <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>, V](self : <a href=\"moonbitlang/core/builtin#Map\">Map</a>[K, V], key : K) -> Unit",
          "loc": { "line": 259, "column": 8 }
        },
        {
          "name": "set",
          "docstring": "\n Set a key-value pair into the hash map.\n @alert unsafe \"Panic if the hash map is full.\"",
          "signature": "fn <a href=\"moonbitlang/core/builtin#Map\">Map</a>::set[K : <a href=\"moonbitlang/core/builtin#Hash\">Hash</a> + <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>, V](self : <a href=\"moonbitlang/core/builtin#Map\">Map</a>[K, V], key : K, value : V) -> Unit",
          "loc": { "line": 114, "column": 8 }
        },
        {
          "name": "size",
          "docstring": "\n Get the number of key-value pairs in the map.",
          "signature": "fn <a href=\"moonbitlang/core/builtin#Map\">Map</a>::size[K, V](self : <a href=\"moonbitlang/core/builtin#Map\">Map</a>[K, V]) -> Int",
          "loc": { "line": 407, "column": 8 }
        },
        {
          "name": "to_array",
          "docstring": "\n Converts the hash map to an array.",
          "signature": "fn <a href=\"moonbitlang/core/builtin#Map\">Map</a>::to_array[K, V](self : <a href=\"moonbitlang/core/builtin#Map\">Map</a>[K, V]) -> <a href=\"moonbitlang/core/array#Array\">Array</a>[(K, V)]",
          "loc": { "line": 517, "column": 8 }
        },
        {
          "name": "to_json",
          "docstring": "",
          "signature": "fn <a href=\"moonbitlang/core/builtin#Map\">Map</a>::to_json[K : <a href=\"moonbitlang/core/builtin#Show\">Show</a>, V : <a href=\"moonbitlang/core/builtin#ToJson\">ToJson</a>](self : <a href=\"moonbitlang/core/builtin#Map\">Map</a>[K, V]) -> <a href=\"moonbitlang/core/json#Json\">Json</a>",
          "loc": { "line": 149, "column": 13 }
        },
        {
          "name": "values",
          "docstring": "",
          "signature": "fn <a href=\"moonbitlang/core/builtin#Map\">Map</a>::values[K, V](self : <a href=\"moonbitlang/core/builtin#Map\">Map</a>[K, V]) -> <a href=\"moonbitlang/core/builtin#Iter\">Iter</a>[V]",
          "loc": { "line": 502, "column": 8 }
        }
      ],
      "impls": [
        {
          "docstring": "",
          "signature": "impl[K : <a href=\"moonbitlang/core/builtin#Show\">Show</a>, V : <a href=\"moonbitlang/core/builtin#Show\">Show</a>] <a href=\"moonbitlang/core/builtin#Show\">Show</a> for <a href=\"moonbitlang/core/builtin#Map\">Map</a>[K, V]",
          "methods": [
            {
              "name": "output",
              "docstring": "",
              "signature": "fn output[K : <a href=\"moonbitlang/core/builtin#Show\">Show</a>, V : <a href=\"moonbitlang/core/builtin#Show\">Show</a>](self : <a href=\"moonbitlang/core/builtin#Map\">Map</a>[K, V], logger : <a href=\"moonbitlang/core/builtin#Logger\">Logger</a>) -> Unit",
              "loc": { "line": 391, "column": 54 }
            }
          ],
          "loc": { "line": 391, "column": 1 }
        }
      ]
    },
    {
      "name": "Set",
      "docstring": "\n Mutable linked hash set that maintains the order of insertion, not thread safe. ",
      "signature": "type Set",
      "loc": { "line": 38, "column": 8 },
      "methods": [
        {
          "name": "add",
          "docstring": "\n Insert a key into the hash set.",
          "signature": "fn <a href=\"moonbitlang/core/builtin#Set\">Set</a>::add[K : <a href=\"moonbitlang/core/builtin#Hash\">Hash</a> + <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>](self : <a href=\"moonbitlang/core/builtin#Set\">Set</a>[K], key : K) -> Unit",
          "loc": { "line": 131, "column": 8 }
        },
        {
          "name": "add_and_check",
          "docstring": "\n Insert a key into the hash set.if the key exists return false",
          "signature": "fn <a href=\"moonbitlang/core/builtin#Set\">Set</a>::add_and_check[K : <a href=\"moonbitlang/core/builtin#Hash\">Hash</a> + <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>](self : <a href=\"moonbitlang/core/builtin#Set\">Set</a>[K], key : K) -> Bool",
          "loc": { "line": 88, "column": 8 }
        },
        {
          "name": "capacity",
          "docstring": "\n Get the capacity of the set.",
          "signature": "fn <a href=\"moonbitlang/core/builtin#Set\">Set</a>::capacity[K](self : <a href=\"moonbitlang/core/builtin#Set\">Set</a>[K]) -> Int",
          "loc": { "line": 366, "column": 8 }
        },
        {
          "name": "clear",
          "docstring": "\n Clears the set, removing all keys. Keeps the allocated space.",
          "signature": "fn <a href=\"moonbitlang/core/builtin#Set\">Set</a>::clear[K](self : <a href=\"moonbitlang/core/builtin#Set\">Set</a>[K]) -> Unit",
          "loc": { "line": 402, "column": 8 }
        },
        {
          "name": "contains",
          "docstring": "\n Check if the hash set contains a key.",
          "signature": "fn <a href=\"moonbitlang/core/builtin#Set\">Set</a>::contains[K : <a href=\"moonbitlang/core/builtin#Hash\">Hash</a> + <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>](self : <a href=\"moonbitlang/core/builtin#Set\">Set</a>[K], key : K) -> Bool",
          "loc": { "line": 174, "column": 8 }
        },
        {
          "name": "difference",
          "docstring": "",
          "signature": "fn <a href=\"moonbitlang/core/builtin#Set\">Set</a>::difference[K : <a href=\"moonbitlang/core/builtin#Hash\">Hash</a> + <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>](self : <a href=\"moonbitlang/core/builtin#Set\">Set</a>[K], other : <a href=\"moonbitlang/core/builtin#Set\">Set</a>[K]) -> <a href=\"moonbitlang/core/builtin#Set\">Set</a>[K]",
          "loc": { "line": 476, "column": 8 }
        },
        {
          "name": "each",
          "docstring": "\n Iterate over all keys of the set in the order of insertion.",
          "signature": "fn <a href=\"moonbitlang/core/builtin#Set\">Set</a>::each[K](self : <a href=\"moonbitlang/core/builtin#Set\">Set</a>[K], f : (K) -> Unit) -> Unit",
          "loc": { "line": 378, "column": 8 }
        },
        {
          "name": "eachi",
          "docstring": "\n Iterate over all keys of the set in the order of insertion, with index.",
          "signature": "fn <a href=\"moonbitlang/core/builtin#Set\">Set</a>::eachi[K](self : <a href=\"moonbitlang/core/builtin#Set\">Set</a>[K], f : (Int, K) -> Unit) -> Unit",
          "loc": { "line": 390, "column": 8 }
        },
        {
          "name": "from_array",
          "docstring": "\n Create a hash set from array.",
          "signature": "fn <a href=\"moonbitlang/core/builtin#Set\">Set</a>::from_array[K : <a href=\"moonbitlang/core/builtin#Hash\">Hash</a> + <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>](arr : <a href=\"moonbitlang/core/array#Array\">Array</a>[K]) -> <a href=\"moonbitlang/core/builtin#Set\">Set</a>[K]",
          "loc": { "line": 71, "column": 13 }
        },
        {
          "name": "from_iter",
          "docstring": "",
          "signature": "fn <a href=\"moonbitlang/core/builtin#Set\">Set</a>::from_iter[K : <a href=\"moonbitlang/core/builtin#Hash\">Hash</a> + <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>](iter : <a href=\"moonbitlang/core/builtin#Iter\">Iter</a>[K]) -> <a href=\"moonbitlang/core/builtin#Set\">Set</a>[K]",
          "loc": { "line": 469, "column": 13 }
        },
        {
          "name": "insert",
          "docstring": "\n Insert a key into the hash set.\n \n @alert deprecated \"Use `add` instead.\"\n @coverage.skip",
          "signature": "fn <a href=\"moonbitlang/core/builtin#Set\">Set</a>::insert[K : <a href=\"moonbitlang/core/builtin#Hash\">Hash</a> + <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>](self : <a href=\"moonbitlang/core/builtin#Set\">Set</a>[K], key : K) -> Unit",
          "loc": { "line": 82, "column": 8 }
        },
        {
          "name": "intersection",
          "docstring": "",
          "signature": "fn <a href=\"moonbitlang/core/builtin#Set\">Set</a>::intersection[K : <a href=\"moonbitlang/core/builtin#Hash\">Hash</a> + <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>](self : <a href=\"moonbitlang/core/builtin#Set\">Set</a>[K], other : <a href=\"moonbitlang/core/builtin#Set\">Set</a>[K]) -> <a href=\"moonbitlang/core/builtin#Set\">Set</a>[K]",
          "loc": { "line": 502, "column": 8 }
        },
        {
          "name": "is_empty",
          "docstring": "\n Check if the hash set is empty.",
          "signature": "fn <a href=\"moonbitlang/core/builtin#Set\">Set</a>::is_empty[K](self : <a href=\"moonbitlang/core/builtin#Set\">Set</a>[K]) -> Bool",
          "loc": { "line": 372, "column": 8 }
        },
        {
          "name": "iter",
          "docstring": "\n Returns the iterator of the hash set, provide elements in the order of insertion.",
          "signature": "fn <a href=\"moonbitlang/core/builtin#Set\">Set</a>::iter[K](self : <a href=\"moonbitlang/core/builtin#Set\">Set</a>[K]) -> <a href=\"moonbitlang/core/builtin#Iter\">Iter</a>[K]",
          "loc": { "line": 411, "column": 8 }
        },
        {
          "name": "new",
          "docstring": "\n Create a hash set.\n The capacity of the set will be the smallest power of 2 that is\n greater than or equal to the provided [capacity].",
          "signature": "fn <a href=\"moonbitlang/core/builtin#Set\">Set</a>::new[K](capacity~ : Int = ..) -> <a href=\"moonbitlang/core/builtin#Set\">Set</a>[K]",
          "loc": { "line": 55, "column": 13 }
        },
        {
          "name": "of",
          "docstring": "",
          "signature": "fn <a href=\"moonbitlang/core/builtin#Set\">Set</a>::of[K : <a href=\"moonbitlang/core/builtin#Hash\">Hash</a> + <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>](arr : <a href=\"moonbitlang/core/array#FixedArray\">FixedArray</a>[K]) -> <a href=\"moonbitlang/core/builtin#Set\">Set</a>[K]",
          "loc": { "line": 457, "column": 13 }
        },
        {
          "name": "op_equal",
          "docstring": "",
          "signature": "fn <a href=\"moonbitlang/core/builtin#Set\">Set</a>::op_equal[K : <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>](self : <a href=\"moonbitlang/core/builtin#Set\">Set</a>[K], that : <a href=\"moonbitlang/core/builtin#Set\">Set</a>[K]) -> Bool",
          "loc": { "line": 440, "column": 8 }
        },
        {
          "name": "remove",
          "docstring": "\n Remove a key from hash set.",
          "signature": "fn <a href=\"moonbitlang/core/builtin#Set\">Set</a>::remove[K : <a href=\"moonbitlang/core/builtin#Hash\">Hash</a> + <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>](self : <a href=\"moonbitlang/core/builtin#Set\">Set</a>[K], key : K) -> Unit",
          "loc": { "line": 194, "column": 8 }
        },
        {
          "name": "remove_and_check",
          "docstring": "\n Remove a key from hash set.if the key exists, delete it and return true",
          "signature": "fn <a href=\"moonbitlang/core/builtin#Set\">Set</a>::remove_and_check[K : <a href=\"moonbitlang/core/builtin#Hash\">Hash</a> + <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>](self : <a href=\"moonbitlang/core/builtin#Set\">Set</a>[K], key : K) -> Bool",
          "loc": { "line": 218, "column": 8 }
        },
        {
          "name": "size",
          "docstring": "\n Get the number of keys in the set.",
          "signature": "fn <a href=\"moonbitlang/core/builtin#Set\">Set</a>::size[K](self : <a href=\"moonbitlang/core/builtin#Set\">Set</a>[K]) -> Int",
          "loc": { "line": 360, "column": 8 }
        },
        {
          "name": "symmetric_difference",
          "docstring": "",
          "signature": "fn <a href=\"moonbitlang/core/builtin#Set\">Set</a>::symmetric_difference[K : <a href=\"moonbitlang/core/builtin#Hash\">Hash</a> + <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>](self : <a href=\"moonbitlang/core/builtin#Set\">Set</a>[K], other : <a href=\"moonbitlang/core/builtin#Set\">Set</a>[K]) -> <a href=\"moonbitlang/core/builtin#Set\">Set</a>[K]",
          "loc": { "line": 483, "column": 8 }
        },
        {
          "name": "to_array",
          "docstring": "\n Converts the hash set to an array.",
          "signature": "fn <a href=\"moonbitlang/core/builtin#Set\">Set</a>::to_array[K](self : <a href=\"moonbitlang/core/builtin#Set\">Set</a>[K]) -> <a href=\"moonbitlang/core/array#Array\">Array</a>[K]",
          "loc": { "line": 427, "column": 8 }
        },
        {
          "name": "to_json",
          "docstring": "",
          "signature": "fn <a href=\"moonbitlang/core/builtin#Set\">Set</a>::to_json[X : <a href=\"moonbitlang/core/builtin#ToJson\">ToJson</a>](self : <a href=\"moonbitlang/core/builtin#Set\">Set</a>[X]) -> <a href=\"moonbitlang/core/json#Json\">Json</a>",
          "loc": { "line": 158, "column": 13 }
        },
        {
          "name": "union",
          "docstring": "",
          "signature": "fn <a href=\"moonbitlang/core/builtin#Set\">Set</a>::union[K : <a href=\"moonbitlang/core/builtin#Hash\">Hash</a> + <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>](self : <a href=\"moonbitlang/core/builtin#Set\">Set</a>[K], other : <a href=\"moonbitlang/core/builtin#Set\">Set</a>[K]) -> <a href=\"moonbitlang/core/builtin#Set\">Set</a>[K]",
          "loc": { "line": 494, "column": 8 }
        }
      ],
      "impls": [
        {
          "docstring": "",
          "signature": "impl[K : <a href=\"moonbitlang/core/builtin#Show\">Show</a>] <a href=\"moonbitlang/core/builtin#Show\">Show</a> for <a href=\"moonbitlang/core/builtin#Set\">Set</a>[K]",
          "methods": [
            {
              "name": "output",
              "docstring": "",
              "signature": "fn output[K : <a href=\"moonbitlang/core/builtin#Show\">Show</a>](self : <a href=\"moonbitlang/core/builtin#Set\">Set</a>[K], logger : <a href=\"moonbitlang/core/builtin#Logger\">Logger</a>) -> Unit",
              "loc": { "line": 344, "column": 41 }
            }
          ],
          "loc": { "line": 344, "column": 1 }
        }
      ]
    },
    {
      "name": "SnapshotError",
      "docstring": "",
      "signature": "pub(all) type! SnapshotError String\n",
      "loc": { "line": 221, "column": 16 },
      "methods": [],
      "impls": []
    },
    {
      "name": "SourceLoc",
      "docstring": "",
      "signature": "pub(all) type SourceLoc",
      "loc": { "line": 16, "column": 15 },
      "methods": [
        {
          "name": "to_string",
          "docstring": "",
          "signature": "fn <a href=\"moonbitlang/core/builtin#SourceLoc\">SourceLoc</a>::to_string(self : <a href=\"moonbitlang/core/builtin#SourceLoc\">SourceLoc</a>) -> String",
          "loc": { "line": 19, "column": 19 }
        }
      ],
      "impls": [
        {
          "docstring": "",
          "signature": "impl <a href=\"moonbitlang/core/builtin#Show\">Show</a> for <a href=\"moonbitlang/core/builtin#SourceLoc\">SourceLoc</a>",
          "methods": [
            {
              "name": "output",
              "docstring": "",
              "signature": "fn output(self : <a href=\"moonbitlang/core/builtin#SourceLoc\">SourceLoc</a>, logger : <a href=\"moonbitlang/core/builtin#Logger\">Logger</a>) -> Unit",
              "loc": { "line": 22, "column": 34 }
            }
          ],
          "loc": { "line": 22, "column": 1 }
        }
      ]
    },
    {
      "name": "StringBuilder",
      "docstring": "",
      "signature": "type StringBuilder",
      "loc": { "line": 16, "column": 8 },
      "methods": [
        {
          "name": "is_empty",
          "docstring": "\n Return whether the given buffer is empty.",
          "signature": "fn <a href=\"moonbitlang/core/builtin#StringBuilder\">StringBuilder</a>::is_empty(self : <a href=\"moonbitlang/core/builtin#StringBuilder\">StringBuilder</a>) -> Bool",
          "loc": { "line": 30, "column": 23 }
        },
        {
          "name": "new",
          "docstring": "",
          "signature": "fn <a href=\"moonbitlang/core/builtin#StringBuilder\">StringBuilder</a>::new(size_hint~ : Int = ..) -> <a href=\"moonbitlang/core/builtin#StringBuilder\">StringBuilder</a>",
          "loc": { "line": 22, "column": 23 }
        },
        {
          "name": "reset",
          "docstring": "",
          "signature": "fn <a href=\"moonbitlang/core/builtin#StringBuilder\">StringBuilder</a>::reset(self : <a href=\"moonbitlang/core/builtin#StringBuilder\">StringBuilder</a>) -> Unit",
          "loc": { "line": 98, "column": 8 }
        },
        {
          "name": "to_string",
          "docstring": "",
          "signature": "fn <a href=\"moonbitlang/core/builtin#StringBuilder\">StringBuilder</a>::to_string(self : <a href=\"moonbitlang/core/builtin#StringBuilder\">StringBuilder</a>) -> String",
          "loc": { "line": 85, "column": 23 }
        },
        {
          "name": "write_char",
          "docstring": "",
          "signature": "fn <a href=\"moonbitlang/core/builtin#StringBuilder\">StringBuilder</a>::write_char(self : <a href=\"moonbitlang/core/builtin#StringBuilder\">StringBuilder</a>, ch : Char) -> Unit",
          "loc": { "line": 65, "column": 23 }
        },
        {
          "name": "write_object",
          "docstring": "",
          "signature": "fn <a href=\"moonbitlang/core/builtin#StringBuilder\">StringBuilder</a>::write_object[T : <a href=\"moonbitlang/core/builtin#Show\">Show</a>](self : <a href=\"moonbitlang/core/builtin#StringBuilder\">StringBuilder</a>, obj : T) -> Unit",
          "loc": { "line": 16, "column": 8 }
        },
        {
          "name": "write_string",
          "docstring": "",
          "signature": "fn <a href=\"moonbitlang/core/builtin#StringBuilder\">StringBuilder</a>::write_string(self : <a href=\"moonbitlang/core/builtin#StringBuilder\">StringBuilder</a>, str : String) -> Unit",
          "loc": { "line": 58, "column": 23 }
        },
        {
          "name": "write_substring",
          "docstring": "",
          "signature": "fn <a href=\"moonbitlang/core/builtin#StringBuilder\">StringBuilder</a>::write_substring(self : <a href=\"moonbitlang/core/builtin#StringBuilder\">StringBuilder</a>, str : String, start : Int, len : Int) -> Unit",
          "loc": { "line": 72, "column": 23 }
        }
      ],
      "impls": [
        {
          "docstring": "",
          "signature": "impl <a href=\"moonbitlang/core/builtin#Show\">Show</a> for <a href=\"moonbitlang/core/builtin#StringBuilder\">StringBuilder</a>",
          "methods": [
            {
              "name": "output",
              "docstring": "\n TODO: improve perf",
              "signature": "fn output(self : <a href=\"moonbitlang/core/builtin#StringBuilder\">StringBuilder</a>, logger : <a href=\"moonbitlang/core/builtin#Logger\">Logger</a>) -> Unit",
              "loc": { "line": 91, "column": 38 }
            }
          ],
          "loc": { "line": 91, "column": 1 }
        }
      ]
    },
    {
      "name": "UninitializedArray",
      "docstring": "",
      "signature": "type UninitializedArray",
      "loc": { "line": 16, "column": 6 },
      "methods": [
        {
          "name": "length",
          "docstring": "\n Returns the length of an uninitialized array.\n\n Parameters:\n\n - `array` : The uninitialized array whose length is to be determined.\n\n Returns the length of the uninitialized array as an integer.",
          "signature": "fn <a href=\"moonbitlang/core/builtin#UninitializedArray\">UninitializedArray</a>::length[A](self : <a href=\"moonbitlang/core/builtin#UninitializedArray\">UninitializedArray</a>[A]) -> Int",
          "loc": { "line": 88, "column": 8 }
        },
        {
          "name": "make",
          "docstring": "\n Creates an uninitialized array of the specified size.\n\n Parameters:\n\n - `size` : The number of elements the array should hold.\n\n Returns an uninitialized array of type `T` with the specified size.",
          "signature": "fn <a href=\"moonbitlang/core/builtin#UninitializedArray\">UninitializedArray</a>::make[T](size : Int) -> <a href=\"moonbitlang/core/builtin#UninitializedArray\">UninitializedArray</a>[T]",
          "loc": { "line": 26, "column": 28 }
        },
        {
          "name": "op_as_view",
          "docstring": "\n Creates a view into a portion of the uninitialized array.\n\n Parameters:\n\n * `array` : The uninitialized array to create a view from.\n * `start` : The starting index of the view (inclusive). Defaults to 0.\n * `end` : The ending index of the view (exclusive). If not provided, defaults\n to the length of the array.\n\n Returns an `ArrayView` that provides a window into the specified portion of\n the array.\n\n Throws an error if the indices are out of bounds or if `start` is greater\n than `end`.",
          "signature": "fn <a href=\"moonbitlang/core/builtin#UninitializedArray\">UninitializedArray</a>::op_as_view[T](self : <a href=\"moonbitlang/core/builtin#UninitializedArray\">UninitializedArray</a>[T], start~ : Int = .., end? : Int) -> <a href=\"moonbitlang/core/array#ArrayView\">ArrayView</a>[T]",
          "loc": { "line": 64, "column": 8 }
        },
        {
          "name": "op_get",
          "docstring": "\n Retrieves the element at the specified index from an uninitialized array.\n\n Parameters:\n\n - `array` : The uninitialized array from which to retrieve the element.\n - `index` : The index of the element to retrieve.\n\n Returns the element at the specified index.",
          "signature": "fn <a href=\"moonbitlang/core/builtin#UninitializedArray\">UninitializedArray</a>::op_get[T](self : <a href=\"moonbitlang/core/builtin#UninitializedArray\">UninitializedArray</a>[T], index : Int) -> T",
          "loc": { "line": 37, "column": 8 }
        },
        {
          "name": "op_set",
          "docstring": "\n Sets the value at the specified index in an uninitialized array.\n\n Parameters:\n\n - `array` : The uninitialized array where the value will be set.\n - `index` : The position in the array where the value will be set.\n - `value` : The value to be set at the specified index.",
          "signature": "fn <a href=\"moonbitlang/core/builtin#UninitializedArray\">UninitializedArray</a>::op_set[T](self : <a href=\"moonbitlang/core/builtin#UninitializedArray\">UninitializedArray</a>[T], index : Int, value : T) -> Unit",
          "loc": { "line": 47, "column": 8 }
        }
      ],
      "impls": []
    }
  ],
  "typealias": [],
  "values": [
    {
      "name": "abort",
      "docstring": "",
      "signature": "fn abort[T](msg : String) -> T",
      "loc": { "line": 22, "column": 8 }
    },
    {
      "name": "assert_eq",
      "docstring": "",
      "signature": "fn assert_eq[T : <a href=\"moonbitlang/core/builtin#Eq\">Eq</a> + <a href=\"moonbitlang/core/builtin#Show\">Show</a>](a : T, b : T, loc~ : <a href=\"moonbitlang/core/builtin#SourceLoc\">SourceLoc</a> = _) -> Unit!<a href=\"moonbitlang/core/error#Error\">Error</a>",
      "loc": { "line": 23, "column": 8 }
    },
    {
      "name": "assert_false",
      "docstring": "",
      "signature": "fn assert_false(x : Bool, loc~ : <a href=\"moonbitlang/core/builtin#SourceLoc\">SourceLoc</a> = _) -> Unit!<a href=\"moonbitlang/core/error#Error\">Error</a>",
      "loc": { "line": 50, "column": 8 }
    },
    {
      "name": "assert_not_eq",
      "docstring": "",
      "signature": "fn assert_not_eq[T : <a href=\"moonbitlang/core/builtin#Eq\">Eq</a> + <a href=\"moonbitlang/core/builtin#Show\">Show</a>](a : T, b : T, loc~ : <a href=\"moonbitlang/core/builtin#SourceLoc\">SourceLoc</a> = _) -> Unit!<a href=\"moonbitlang/core/error#Error\">Error</a>",
      "loc": { "line": 30, "column": 8 }
    },
    {
      "name": "assert_true",
      "docstring": "",
      "signature": "fn assert_true(x : Bool, loc~ : <a href=\"moonbitlang/core/builtin#SourceLoc\">SourceLoc</a> = _) -> Unit!<a href=\"moonbitlang/core/error#Error\">Error</a>",
      "loc": { "line": 43, "column": 8 }
    },
    {
      "name": "dump",
      "docstring": "\n Prints and returns the value of a given expression for quick and dirty debugging.\n @alert deprecated \"This function is for debugging only and should not be used in production\"",
      "signature": "fn dump[T](t : T, name? : String, loc~ : <a href=\"moonbitlang/core/builtin#SourceLoc\">SourceLoc</a> = _) -> T",
      "loc": { "line": 36, "column": 8 }
    },
    {
      "name": "fail",
      "docstring": "",
      "signature": "fn fail[T](msg : String, loc~ : <a href=\"moonbitlang/core/builtin#SourceLoc\">SourceLoc</a> = _) -> T!<a href=\"moonbitlang/core/builtin#Failure\">Failure</a>",
      "loc": { "line": 19, "column": 8 }
    },
    {
      "name": "ignore",
      "docstring": "",
      "signature": "fn ignore[T](t : T) -> Unit",
      "loc": { "line": 16, "column": 8 }
    },
    {
      "name": "inspect",
      "docstring": "",
      "signature": "fn inspect(obj : <a href=\"moonbitlang/core/builtin#Show\">Show</a>, content~ : String = .., loc~ : <a href=\"moonbitlang/core/builtin#SourceLoc\">SourceLoc</a> = _, args_loc~ : <a href=\"moonbitlang/core/builtin#ArgsLoc\">ArgsLoc</a> = _) -> Unit!<a href=\"moonbitlang/core/builtin#InspectError\">InspectError</a>",
      "loc": { "line": 201, "column": 8 }
    },
    {
      "name": "not",
      "docstring": "",
      "signature": "fn not(x : Bool) -> Bool",
      "loc": { "line": 33, "column": 8 }
    },
    {
      "name": "op_ge",
      "docstring": "\n @coverage.skip ",
      "signature": "fn op_ge[T : <a href=\"moonbitlang/core/builtin#Compare\">Compare</a> + <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>](self_ : T, other : T) -> Bool",
      "loc": { "line": 170, "column": 8 }
    },
    {
      "name": "op_gt",
      "docstring": "\n @coverage.skip ",
      "signature": "fn op_gt[T : <a href=\"moonbitlang/core/builtin#Compare\">Compare</a> + <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>](self_ : T, other : T) -> Bool",
      "loc": { "line": 158, "column": 8 }
    },
    {
      "name": "op_le",
      "docstring": "\n @coverage.skip ",
      "signature": "fn op_le[T : <a href=\"moonbitlang/core/builtin#Compare\">Compare</a> + <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>](self_ : T, other : T) -> Bool",
      "loc": { "line": 164, "column": 8 }
    },
    {
      "name": "op_lt",
      "docstring": "\n @coverage.skip ",
      "signature": "fn op_lt[T : <a href=\"moonbitlang/core/builtin#Compare\">Compare</a> + <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>](self_ : T, other : T) -> Bool",
      "loc": { "line": 152, "column": 8 }
    },
    {
      "name": "op_notequal",
      "docstring": "\n @coverage.skip ",
      "signature": "fn op_notequal[T : <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>](x : T, y : T) -> Bool",
      "loc": { "line": 176, "column": 8 }
    },
    {
      "name": "panic",
      "docstring": "",
      "signature": "fn panic[T]() -> T",
      "loc": { "line": 28, "column": 8 }
    },
    {
      "name": "physical_equal",
      "docstring": "",
      "signature": "fn physical_equal[T](a : T, b : T) -> Bool",
      "loc": { "line": 19, "column": 8 }
    },
    {
      "name": "print",
      "docstring": "\n @alert deprecated \"Use `println` instead\"\n @coverage.skip",
      "signature": "fn print[T : <a href=\"moonbitlang/core/builtin#Show\">Show</a>](input : T) -> Unit",
      "loc": { "line": 29, "column": 8 }
    },
    {
      "name": "println",
      "docstring": "",
      "signature": "fn println[T : <a href=\"moonbitlang/core/builtin#Show\">Show</a>](input : T) -> Unit",
      "loc": { "line": 22, "column": 8 }
    }
  ],
  "misc": [
    {
      "name": "Tuple16",
      "impls": [],
      "methods": [
        {
          "name": "compare",
          "docstring": "",
          "signature": "fn <a href=\"moonbitlang/core/tuple#Tuple16\">Tuple16</a>::compare[T0 : <a href=\"moonbitlang/core/builtin#Compare\">Compare</a> + <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>, T1 : <a href=\"moonbitlang/core/builtin#Compare\">Compare</a> + <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>, T2 : <a href=\"moonbitlang/core/builtin#Compare\">Compare</a> + <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>, T3 : <a href=\"moonbitlang/core/builtin#Compare\">Compare</a> + <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>, T4 : <a href=\"moonbitlang/core/builtin#Compare\">Compare</a> + <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>, T5 : <a href=\"moonbitlang/core/builtin#Compare\">Compare</a> + <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>, T6 : <a href=\"moonbitlang/core/builtin#Compare\">Compare</a> + <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>, T7 : <a href=\"moonbitlang/core/builtin#Compare\">Compare</a> + <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>, T8 : <a href=\"moonbitlang/core/builtin#Compare\">Compare</a> + <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>, T9 : <a href=\"moonbitlang/core/builtin#Compare\">Compare</a> + <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>, T10 : <a href=\"moonbitlang/core/builtin#Compare\">Compare</a> + <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>, T11 : <a href=\"moonbitlang/core/builtin#Compare\">Compare</a> + <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>, T12 : <a href=\"moonbitlang/core/builtin#Compare\">Compare</a> + <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>, T13 : <a href=\"moonbitlang/core/builtin#Compare\">Compare</a> + <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>, T14 : <a href=\"moonbitlang/core/builtin#Compare\">Compare</a> + <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>, T15 : <a href=\"moonbitlang/core/builtin#Compare\">Compare</a> + <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>](self : (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15), other : (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15)) -> Int",
          "loc": { "line": 338, "column": 8 }
        },
        {
          "name": "op_equal",
          "docstring": "",
          "signature": "fn <a href=\"moonbitlang/core/tuple#Tuple16\">Tuple16</a>::op_equal[T0 : <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>, T1 : <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>, T2 : <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>, T3 : <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>, T4 : <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>, T5 : <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>, T6 : <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>, T7 : <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>, T8 : <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>, T9 : <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>, T10 : <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>, T11 : <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>, T12 : <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>, T13 : <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>, T14 : <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>, T15 : <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>](self : (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15), other : (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15)) -> Bool",
          "loc": { "line": 227, "column": 8 }
        }
      ]
    },
    {
      "name": "Tuple15",
      "impls": [],
      "methods": [
        {
          "name": "compare",
          "docstring": "",
          "signature": "fn <a href=\"moonbitlang/core/tuple#Tuple15\">Tuple15</a>::compare[T0 : <a href=\"moonbitlang/core/builtin#Compare\">Compare</a> + <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>, T1 : <a href=\"moonbitlang/core/builtin#Compare\">Compare</a> + <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>, T2 : <a href=\"moonbitlang/core/builtin#Compare\">Compare</a> + <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>, T3 : <a href=\"moonbitlang/core/builtin#Compare\">Compare</a> + <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>, T4 : <a href=\"moonbitlang/core/builtin#Compare\">Compare</a> + <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>, T5 : <a href=\"moonbitlang/core/builtin#Compare\">Compare</a> + <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>, T6 : <a href=\"moonbitlang/core/builtin#Compare\">Compare</a> + <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>, T7 : <a href=\"moonbitlang/core/builtin#Compare\">Compare</a> + <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>, T8 : <a href=\"moonbitlang/core/builtin#Compare\">Compare</a> + <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>, T9 : <a href=\"moonbitlang/core/builtin#Compare\">Compare</a> + <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>, T10 : <a href=\"moonbitlang/core/builtin#Compare\">Compare</a> + <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>, T11 : <a href=\"moonbitlang/core/builtin#Compare\">Compare</a> + <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>, T12 : <a href=\"moonbitlang/core/builtin#Compare\">Compare</a> + <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>, T13 : <a href=\"moonbitlang/core/builtin#Compare\">Compare</a> + <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>, T14 : <a href=\"moonbitlang/core/builtin#Compare\">Compare</a> + <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>](self : (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14), other : (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14)) -> Int",
          "loc": { "line": 302, "column": 8 }
        },
        {
          "name": "op_equal",
          "docstring": "",
          "signature": "fn <a href=\"moonbitlang/core/tuple#Tuple15\">Tuple15</a>::op_equal[T0 : <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>, T1 : <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>, T2 : <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>, T3 : <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>, T4 : <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>, T5 : <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>, T6 : <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>, T7 : <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>, T8 : <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>, T9 : <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>, T10 : <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>, T11 : <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>, T12 : <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>, T13 : <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>, T14 : <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>](self : (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14), other : (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14)) -> Bool",
          "loc": { "line": 205, "column": 8 }
        }
      ]
    },
    {
      "name": "Tuple14",
      "impls": [],
      "methods": [
        {
          "name": "compare",
          "docstring": "",
          "signature": "fn <a href=\"moonbitlang/core/tuple#Tuple14\">Tuple14</a>::compare[T0 : <a href=\"moonbitlang/core/builtin#Compare\">Compare</a> + <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>, T1 : <a href=\"moonbitlang/core/builtin#Compare\">Compare</a> + <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>, T2 : <a href=\"moonbitlang/core/builtin#Compare\">Compare</a> + <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>, T3 : <a href=\"moonbitlang/core/builtin#Compare\">Compare</a> + <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>, T4 : <a href=\"moonbitlang/core/builtin#Compare\">Compare</a> + <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>, T5 : <a href=\"moonbitlang/core/builtin#Compare\">Compare</a> + <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>, T6 : <a href=\"moonbitlang/core/builtin#Compare\">Compare</a> + <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>, T7 : <a href=\"moonbitlang/core/builtin#Compare\">Compare</a> + <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>, T8 : <a href=\"moonbitlang/core/builtin#Compare\">Compare</a> + <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>, T9 : <a href=\"moonbitlang/core/builtin#Compare\">Compare</a> + <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>, T10 : <a href=\"moonbitlang/core/builtin#Compare\">Compare</a> + <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>, T11 : <a href=\"moonbitlang/core/builtin#Compare\">Compare</a> + <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>, T12 : <a href=\"moonbitlang/core/builtin#Compare\">Compare</a> + <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>, T13 : <a href=\"moonbitlang/core/builtin#Compare\">Compare</a> + <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>](self : (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13), other : (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13)) -> Int",
          "loc": { "line": 268, "column": 8 }
        },
        {
          "name": "op_equal",
          "docstring": "",
          "signature": "fn <a href=\"moonbitlang/core/tuple#Tuple14\">Tuple14</a>::op_equal[T0 : <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>, T1 : <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>, T2 : <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>, T3 : <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>, T4 : <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>, T5 : <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>, T6 : <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>, T7 : <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>, T8 : <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>, T9 : <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>, T10 : <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>, T11 : <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>, T12 : <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>, T13 : <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>](self : (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13), other : (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13)) -> Bool",
          "loc": { "line": 184, "column": 8 }
        }
      ]
    },
    {
      "name": "Tuple13",
      "impls": [],
      "methods": [
        {
          "name": "compare",
          "docstring": "",
          "signature": "fn <a href=\"moonbitlang/core/tuple#Tuple13\">Tuple13</a>::compare[T0 : <a href=\"moonbitlang/core/builtin#Compare\">Compare</a> + <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>, T1 : <a href=\"moonbitlang/core/builtin#Compare\">Compare</a> + <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>, T2 : <a href=\"moonbitlang/core/builtin#Compare\">Compare</a> + <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>, T3 : <a href=\"moonbitlang/core/builtin#Compare\">Compare</a> + <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>, T4 : <a href=\"moonbitlang/core/builtin#Compare\">Compare</a> + <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>, T5 : <a href=\"moonbitlang/core/builtin#Compare\">Compare</a> + <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>, T6 : <a href=\"moonbitlang/core/builtin#Compare\">Compare</a> + <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>, T7 : <a href=\"moonbitlang/core/builtin#Compare\">Compare</a> + <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>, T8 : <a href=\"moonbitlang/core/builtin#Compare\">Compare</a> + <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>, T9 : <a href=\"moonbitlang/core/builtin#Compare\">Compare</a> + <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>, T10 : <a href=\"moonbitlang/core/builtin#Compare\">Compare</a> + <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>, T11 : <a href=\"moonbitlang/core/builtin#Compare\">Compare</a> + <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>, T12 : <a href=\"moonbitlang/core/builtin#Compare\">Compare</a> + <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>](self : (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12), other : (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12)) -> Int",
          "loc": { "line": 236, "column": 8 }
        },
        {
          "name": "op_equal",
          "docstring": "",
          "signature": "fn <a href=\"moonbitlang/core/tuple#Tuple13\">Tuple13</a>::op_equal[T0 : <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>, T1 : <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>, T2 : <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>, T3 : <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>, T4 : <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>, T5 : <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>, T6 : <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>, T7 : <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>, T8 : <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>, T9 : <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>, T10 : <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>, T11 : <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>, T12 : <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>](self : (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12), other : (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12)) -> Bool",
          "loc": { "line": 164, "column": 8 }
        }
      ]
    },
    {
      "name": "Tuple12",
      "impls": [],
      "methods": [
        {
          "name": "compare",
          "docstring": "",
          "signature": "fn <a href=\"moonbitlang/core/tuple#Tuple12\">Tuple12</a>::compare[T0 : <a href=\"moonbitlang/core/builtin#Compare\">Compare</a> + <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>, T1 : <a href=\"moonbitlang/core/builtin#Compare\">Compare</a> + <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>, T2 : <a href=\"moonbitlang/core/builtin#Compare\">Compare</a> + <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>, T3 : <a href=\"moonbitlang/core/builtin#Compare\">Compare</a> + <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>, T4 : <a href=\"moonbitlang/core/builtin#Compare\">Compare</a> + <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>, T5 : <a href=\"moonbitlang/core/builtin#Compare\">Compare</a> + <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>, T6 : <a href=\"moonbitlang/core/builtin#Compare\">Compare</a> + <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>, T7 : <a href=\"moonbitlang/core/builtin#Compare\">Compare</a> + <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>, T8 : <a href=\"moonbitlang/core/builtin#Compare\">Compare</a> + <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>, T9 : <a href=\"moonbitlang/core/builtin#Compare\">Compare</a> + <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>, T10 : <a href=\"moonbitlang/core/builtin#Compare\">Compare</a> + <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>, T11 : <a href=\"moonbitlang/core/builtin#Compare\">Compare</a> + <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>](self : (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11), other : (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11)) -> Int",
          "loc": { "line": 206, "column": 8 }
        },
        {
          "name": "op_equal",
          "docstring": "",
          "signature": "fn <a href=\"moonbitlang/core/tuple#Tuple12\">Tuple12</a>::op_equal[T0 : <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>, T1 : <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>, T2 : <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>, T3 : <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>, T4 : <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>, T5 : <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>, T6 : <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>, T7 : <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>, T8 : <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>, T9 : <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>, T10 : <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>, T11 : <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>](self : (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11), other : (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11)) -> Bool",
          "loc": { "line": 145, "column": 8 }
        }
      ]
    },
    {
      "name": "Tuple11",
      "impls": [],
      "methods": [
        {
          "name": "compare",
          "docstring": "",
          "signature": "fn <a href=\"moonbitlang/core/tuple#Tuple11\">Tuple11</a>::compare[T0 : <a href=\"moonbitlang/core/builtin#Compare\">Compare</a> + <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>, T1 : <a href=\"moonbitlang/core/builtin#Compare\">Compare</a> + <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>, T2 : <a href=\"moonbitlang/core/builtin#Compare\">Compare</a> + <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>, T3 : <a href=\"moonbitlang/core/builtin#Compare\">Compare</a> + <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>, T4 : <a href=\"moonbitlang/core/builtin#Compare\">Compare</a> + <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>, T5 : <a href=\"moonbitlang/core/builtin#Compare\">Compare</a> + <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>, T6 : <a href=\"moonbitlang/core/builtin#Compare\">Compare</a> + <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>, T7 : <a href=\"moonbitlang/core/builtin#Compare\">Compare</a> + <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>, T8 : <a href=\"moonbitlang/core/builtin#Compare\">Compare</a> + <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>, T9 : <a href=\"moonbitlang/core/builtin#Compare\">Compare</a> + <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>, T10 : <a href=\"moonbitlang/core/builtin#Compare\">Compare</a> + <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>](self : (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10), other : (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10)) -> Int",
          "loc": { "line": 178, "column": 8 }
        },
        {
          "name": "op_equal",
          "docstring": "",
          "signature": "fn <a href=\"moonbitlang/core/tuple#Tuple11\">Tuple11</a>::op_equal[T0 : <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>, T1 : <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>, T2 : <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>, T3 : <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>, T4 : <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>, T5 : <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>, T6 : <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>, T7 : <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>, T8 : <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>, T9 : <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>, T10 : <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>](self : (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10), other : (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10)) -> Bool",
          "loc": { "line": 127, "column": 8 }
        }
      ]
    },
    {
      "name": "Tuple10",
      "impls": [],
      "methods": [
        {
          "name": "compare",
          "docstring": "",
          "signature": "fn <a href=\"moonbitlang/core/tuple#Tuple10\">Tuple10</a>::compare[T0 : <a href=\"moonbitlang/core/builtin#Compare\">Compare</a> + <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>, T1 : <a href=\"moonbitlang/core/builtin#Compare\">Compare</a> + <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>, T2 : <a href=\"moonbitlang/core/builtin#Compare\">Compare</a> + <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>, T3 : <a href=\"moonbitlang/core/builtin#Compare\">Compare</a> + <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>, T4 : <a href=\"moonbitlang/core/builtin#Compare\">Compare</a> + <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>, T5 : <a href=\"moonbitlang/core/builtin#Compare\">Compare</a> + <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>, T6 : <a href=\"moonbitlang/core/builtin#Compare\">Compare</a> + <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>, T7 : <a href=\"moonbitlang/core/builtin#Compare\">Compare</a> + <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>, T8 : <a href=\"moonbitlang/core/builtin#Compare\">Compare</a> + <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>, T9 : <a href=\"moonbitlang/core/builtin#Compare\">Compare</a> + <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>](self : (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9), other : (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9)) -> Int",
          "loc": { "line": 152, "column": 8 }
        },
        {
          "name": "op_equal",
          "docstring": "",
          "signature": "fn <a href=\"moonbitlang/core/tuple#Tuple10\">Tuple10</a>::op_equal[T0 : <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>, T1 : <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>, T2 : <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>, T3 : <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>, T4 : <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>, T5 : <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>, T6 : <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>, T7 : <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>, T8 : <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>, T9 : <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>](self : (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9), other : (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9)) -> Bool",
          "loc": { "line": 110, "column": 8 }
        }
      ]
    },
    {
      "name": "Tuple9",
      "impls": [],
      "methods": [
        {
          "name": "compare",
          "docstring": "",
          "signature": "fn <a href=\"moonbitlang/core/tuple#Tuple9\">Tuple9</a>::compare[T0 : <a href=\"moonbitlang/core/builtin#Compare\">Compare</a> + <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>, T1 : <a href=\"moonbitlang/core/builtin#Compare\">Compare</a> + <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>, T2 : <a href=\"moonbitlang/core/builtin#Compare\">Compare</a> + <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>, T3 : <a href=\"moonbitlang/core/builtin#Compare\">Compare</a> + <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>, T4 : <a href=\"moonbitlang/core/builtin#Compare\">Compare</a> + <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>, T5 : <a href=\"moonbitlang/core/builtin#Compare\">Compare</a> + <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>, T6 : <a href=\"moonbitlang/core/builtin#Compare\">Compare</a> + <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>, T7 : <a href=\"moonbitlang/core/builtin#Compare\">Compare</a> + <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>, T8 : <a href=\"moonbitlang/core/builtin#Compare\">Compare</a> + <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>](self : (T0, T1, T2, T3, T4, T5, T6, T7, T8), other : (T0, T1, T2, T3, T4, T5, T6, T7, T8)) -> Int",
          "loc": { "line": 128, "column": 8 }
        },
        {
          "name": "op_equal",
          "docstring": "",
          "signature": "fn <a href=\"moonbitlang/core/tuple#Tuple9\">Tuple9</a>::op_equal[T0 : <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>, T1 : <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>, T2 : <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>, T3 : <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>, T4 : <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>, T5 : <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>, T6 : <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>, T7 : <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>, T8 : <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>](self : (T0, T1, T2, T3, T4, T5, T6, T7, T8), other : (T0, T1, T2, T3, T4, T5, T6, T7, T8)) -> Bool",
          "loc": { "line": 94, "column": 8 }
        }
      ]
    },
    {
      "name": "Tuple8",
      "impls": [],
      "methods": [
        {
          "name": "compare",
          "docstring": "",
          "signature": "fn <a href=\"moonbitlang/core/tuple#Tuple8\">Tuple8</a>::compare[T0 : <a href=\"moonbitlang/core/builtin#Compare\">Compare</a> + <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>, T1 : <a href=\"moonbitlang/core/builtin#Compare\">Compare</a> + <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>, T2 : <a href=\"moonbitlang/core/builtin#Compare\">Compare</a> + <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>, T3 : <a href=\"moonbitlang/core/builtin#Compare\">Compare</a> + <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>, T4 : <a href=\"moonbitlang/core/builtin#Compare\">Compare</a> + <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>, T5 : <a href=\"moonbitlang/core/builtin#Compare\">Compare</a> + <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>, T6 : <a href=\"moonbitlang/core/builtin#Compare\">Compare</a> + <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>, T7 : <a href=\"moonbitlang/core/builtin#Compare\">Compare</a> + <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>](self : (T0, T1, T2, T3, T4, T5, T6, T7), other : (T0, T1, T2, T3, T4, T5, T6, T7)) -> Int",
          "loc": { "line": 106, "column": 8 }
        },
        {
          "name": "op_equal",
          "docstring": "",
          "signature": "fn <a href=\"moonbitlang/core/tuple#Tuple8\">Tuple8</a>::op_equal[T0 : <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>, T1 : <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>, T2 : <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>, T3 : <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>, T4 : <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>, T5 : <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>, T6 : <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>, T7 : <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>](self : (T0, T1, T2, T3, T4, T5, T6, T7), other : (T0, T1, T2, T3, T4, T5, T6, T7)) -> Bool",
          "loc": { "line": 79, "column": 8 }
        }
      ]
    },
    {
      "name": "Tuple7",
      "impls": [],
      "methods": [
        {
          "name": "compare",
          "docstring": "",
          "signature": "fn <a href=\"moonbitlang/core/tuple#Tuple7\">Tuple7</a>::compare[T0 : <a href=\"moonbitlang/core/builtin#Compare\">Compare</a> + <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>, T1 : <a href=\"moonbitlang/core/builtin#Compare\">Compare</a> + <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>, T2 : <a href=\"moonbitlang/core/builtin#Compare\">Compare</a> + <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>, T3 : <a href=\"moonbitlang/core/builtin#Compare\">Compare</a> + <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>, T4 : <a href=\"moonbitlang/core/builtin#Compare\">Compare</a> + <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>, T5 : <a href=\"moonbitlang/core/builtin#Compare\">Compare</a> + <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>, T6 : <a href=\"moonbitlang/core/builtin#Compare\">Compare</a> + <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>](self : (T0, T1, T2, T3, T4, T5, T6), other : (T0, T1, T2, T3, T4, T5, T6)) -> Int",
          "loc": { "line": 86, "column": 8 }
        },
        {
          "name": "op_equal",
          "docstring": "",
          "signature": "fn <a href=\"moonbitlang/core/tuple#Tuple7\">Tuple7</a>::op_equal[T0 : <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>, T1 : <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>, T2 : <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>, T3 : <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>, T4 : <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>, T5 : <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>, T6 : <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>](self : (T0, T1, T2, T3, T4, T5, T6), other : (T0, T1, T2, T3, T4, T5, T6)) -> Bool",
          "loc": { "line": 65, "column": 8 }
        }
      ]
    },
    {
      "name": "Tuple6",
      "impls": [],
      "methods": [
        {
          "name": "compare",
          "docstring": "",
          "signature": "fn <a href=\"moonbitlang/core/tuple#Tuple6\">Tuple6</a>::compare[T0 : <a href=\"moonbitlang/core/builtin#Compare\">Compare</a> + <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>, T1 : <a href=\"moonbitlang/core/builtin#Compare\">Compare</a> + <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>, T2 : <a href=\"moonbitlang/core/builtin#Compare\">Compare</a> + <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>, T3 : <a href=\"moonbitlang/core/builtin#Compare\">Compare</a> + <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>, T4 : <a href=\"moonbitlang/core/builtin#Compare\">Compare</a> + <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>, T5 : <a href=\"moonbitlang/core/builtin#Compare\">Compare</a> + <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>](self : (T0, T1, T2, T3, T4, T5), other : (T0, T1, T2, T3, T4, T5)) -> Int",
          "loc": { "line": 68, "column": 8 }
        },
        {
          "name": "op_equal",
          "docstring": "",
          "signature": "fn <a href=\"moonbitlang/core/tuple#Tuple6\">Tuple6</a>::op_equal[T0 : <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>, T1 : <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>, T2 : <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>, T3 : <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>, T4 : <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>, T5 : <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>](self : (T0, T1, T2, T3, T4, T5), other : (T0, T1, T2, T3, T4, T5)) -> Bool",
          "loc": { "line": 52, "column": 8 }
        }
      ]
    },
    {
      "name": "Tuple5",
      "impls": [],
      "methods": [
        {
          "name": "compare",
          "docstring": "",
          "signature": "fn <a href=\"moonbitlang/core/tuple#Tuple5\">Tuple5</a>::compare[T0 : <a href=\"moonbitlang/core/builtin#Compare\">Compare</a> + <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>, T1 : <a href=\"moonbitlang/core/builtin#Compare\">Compare</a> + <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>, T2 : <a href=\"moonbitlang/core/builtin#Compare\">Compare</a> + <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>, T3 : <a href=\"moonbitlang/core/builtin#Compare\">Compare</a> + <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>, T4 : <a href=\"moonbitlang/core/builtin#Compare\">Compare</a> + <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>](self : (T0, T1, T2, T3, T4), other : (T0, T1, T2, T3, T4)) -> Int",
          "loc": { "line": 52, "column": 8 }
        },
        {
          "name": "op_equal",
          "docstring": "",
          "signature": "fn <a href=\"moonbitlang/core/tuple#Tuple5\">Tuple5</a>::op_equal[T0 : <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>, T1 : <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>, T2 : <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>, T3 : <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>, T4 : <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>](self : (T0, T1, T2, T3, T4), other : (T0, T1, T2, T3, T4)) -> Bool",
          "loc": { "line": 40, "column": 8 }
        }
      ]
    },
    {
      "name": "Tuple4",
      "impls": [],
      "methods": [
        {
          "name": "compare",
          "docstring": "",
          "signature": "fn <a href=\"moonbitlang/core/tuple#Tuple4\">Tuple4</a>::compare[T0 : <a href=\"moonbitlang/core/builtin#Compare\">Compare</a> + <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>, T1 : <a href=\"moonbitlang/core/builtin#Compare\">Compare</a> + <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>, T2 : <a href=\"moonbitlang/core/builtin#Compare\">Compare</a> + <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>, T3 : <a href=\"moonbitlang/core/builtin#Compare\">Compare</a> + <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>](self : (T0, T1, T2, T3), other : (T0, T1, T2, T3)) -> Int",
          "loc": { "line": 38, "column": 8 }
        },
        {
          "name": "op_equal",
          "docstring": "",
          "signature": "fn <a href=\"moonbitlang/core/tuple#Tuple4\">Tuple4</a>::op_equal[T0 : <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>, T1 : <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>, T2 : <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>, T3 : <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>](self : (T0, T1, T2, T3), other : (T0, T1, T2, T3)) -> Bool",
          "loc": { "line": 29, "column": 8 }
        }
      ]
    },
    {
      "name": "Tuple3",
      "impls": [],
      "methods": [
        {
          "name": "compare",
          "docstring": "",
          "signature": "fn <a href=\"moonbitlang/core/tuple#Tuple3\">Tuple3</a>::compare[T0 : <a href=\"moonbitlang/core/builtin#Compare\">Compare</a> + <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>, T1 : <a href=\"moonbitlang/core/builtin#Compare\">Compare</a> + <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>, T2 : <a href=\"moonbitlang/core/builtin#Compare\">Compare</a> + <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>](self : (T0, T1, T2), other : (T0, T1, T2)) -> Int",
          "loc": { "line": 26, "column": 8 }
        },
        {
          "name": "op_equal",
          "docstring": "",
          "signature": "fn <a href=\"moonbitlang/core/tuple#Tuple3\">Tuple3</a>::op_equal[T0 : <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>, T1 : <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>, T2 : <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>](self : (T0, T1, T2), other : (T0, T1, T2)) -> Bool",
          "loc": { "line": 21, "column": 8 }
        }
      ]
    },
    {
      "name": "Tuple2",
      "impls": [],
      "methods": [
        {
          "name": "compare",
          "docstring": "",
          "signature": "fn <a href=\"moonbitlang/core/tuple#Tuple2\">Tuple2</a>::compare[T0 : <a href=\"moonbitlang/core/builtin#Compare\">Compare</a> + <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>, T1 : <a href=\"moonbitlang/core/builtin#Compare\">Compare</a> + <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>](self : (T0, T1), other : (T0, T1)) -> Int",
          "loc": { "line": 16, "column": 8 }
        },
        {
          "name": "op_equal",
          "docstring": "",
          "signature": "fn <a href=\"moonbitlang/core/tuple#Tuple2\">Tuple2</a>::op_equal[T0 : <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>, T1 : <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>](self : (T0, T1), other : (T0, T1)) -> Bool",
          "loc": { "line": 16, "column": 8 }
        }
      ]
    },
    {
      "name": "Logger",
      "impls": [],
      "methods": [
        {
          "name": "write_iter",
          "docstring": "",
          "signature": "fn <a href=\"moonbitlang/core/builtin#Logger\">Logger</a>::write_iter[T : <a href=\"moonbitlang/core/builtin#Show\">Show</a>](self : <a href=\"moonbitlang/core/builtin#Logger\">Logger</a>, iter : <a href=\"moonbitlang/core/builtin#Iter\">Iter</a>[T], prefix~ : String = .., suffix~ : String = .., sep~ : String = .., trailing~ : Bool = ..) -> Unit",
          "loc": { "line": 97, "column": 17 }
        },
        {
          "name": "write_object",
          "docstring": "",
          "signature": "fn <a href=\"moonbitlang/core/builtin#Logger\">Logger</a>::write_object[Obj : <a href=\"moonbitlang/core/builtin#Show\">Show</a>](self : <a href=\"moonbitlang/core/builtin#Logger\">Logger</a>, obj : Obj) -> Unit",
          "loc": { "line": 92, "column": 17 }
        }
      ]
    },
    {
      "name": "Bytes",
      "impls": [],
      "methods": [
        {
          "name": "blit",
          "docstring": "\n Transfer bytes.\n\n It copies `length` bytes from `src` begin at `src_offset`, to destination byte sequence `self` begin at `dst_offset`.\n\n # Usage\n ```\n let b1 = Bytes::of_string(\"abcdef\")\n let b2 = Bytes::of_string(\"ABCDEF\")\n b1.blit(2, b2, 2, 2)\n assert_eq!(b1.to_unchecked_string(), \"aBcdef\")\n ```",
          "signature": "fn <a href=\"moonbitlang/core/bytes#Bytes\">Bytes</a>::blit(self : Bytes, dst_offset : Int, src : Bytes, src_offset : Int, length : Int) -> Unit",
          "loc": { "line": 36, "column": 15 }
        },
        {
          "name": "blit_from_string",
          "docstring": "\n Copy `length` chars from string `str`, starting at `str_offset`,\n into byte sequence `self`, starting at `bytes_offset`.\n @alert deprecated \"The type Bytes is about to be changed to be immutable. Use `FixedArray[Byte]` or `Buffer` instead.\"\n @coverage.skip",
          "signature": "fn <a href=\"moonbitlang/core/bytes#Bytes\">Bytes</a>::blit_from_string(self : Bytes, bytes_offset : Int, str : String, str_offset : Int, length : Int) -> Unit",
          "loc": { "line": 109, "column": 8 }
        },
        {
          "name": "copy",
          "docstring": "\n Return a new Bytes that contains the same byte sequence.",
          "signature": "fn <a href=\"moonbitlang/core/bytes#Bytes\">Bytes</a>::copy(self : Bytes) -> Bytes",
          "loc": { "line": 181, "column": 8 }
        },
        {
          "name": "length",
          "docstring": "",
          "signature": "fn <a href=\"moonbitlang/core/bytes#Bytes\">Bytes</a>::length(self : Bytes) -> Int",
          "loc": { "line": 242, "column": 15 }
        },
        {
          "name": "make",
          "docstring": "",
          "signature": "fn <a href=\"moonbitlang/core/bytes#Bytes\">Bytes</a>::make(len : Int, init : Byte) -> Bytes",
          "loc": { "line": 245, "column": 15 }
        },
        {
          "name": "makei",
          "docstring": " \n Creates a new byte sequence of the specified length, where each byte is\n initialized using a function that maps indices to bytes.\n\n Parameters:\n\n * `length` : The length of the byte sequence to create. If `length` is less than or\n equal to 0, returns an empty byte sequence.\n * `value` : A function that takes an index (from 0 to `length - 1`) and\n returns a byte for that position.\n\n Returns a new byte sequence containing the bytes produced by applying the\n value function to each index.\n\n Example:\n\n ```moonbit\n test \"Bytes::makei\" {\n   let bytes = Bytes::makei(3, fn(i) { (i + 65).to_byte() })\n   assert_eq!(bytes, b\"ABC\")\n }\n ```",
          "signature": "fn <a href=\"moonbitlang/core/bytes#Bytes\">Bytes</a>::makei(length : Int, value : (Int) -> Byte) -> Bytes",
          "loc": { "line": 41, "column": 15 }
        },
        {
          "name": "new",
          "docstring": "\n The init value of Bytes is 0.",
          "signature": "fn <a href=\"moonbitlang/core/bytes#Bytes\">Bytes</a>::new(len : Int) -> Bytes",
          "loc": { "line": 249, "column": 15 }
        },
        {
          "name": "of_string",
          "docstring": "\n Create byte sequence from String.",
          "signature": "fn <a href=\"moonbitlang/core/bytes#Bytes\">Bytes</a>::of_string(str : String) -> Bytes",
          "loc": { "line": 54, "column": 15 }
        },
        {
          "name": "op_as_view",
          "docstring": "\n Creates a new `BytesView` from the given `Bytes`.\n \n # Example\n \n ```\n let bs = b\"\\x00\\x01\\x02\\x03\\x04\\x05\"\n let bv = bs[1:4]\n assert_eq!(bv.length(), 3)\n assert_eq!(bv[0], b'\\x01')\n assert_eq!(bv[1], b'\\x02')\n assert_eq!(bv[2], b'\\x03')\n ```",
          "signature": "fn <a href=\"moonbitlang/core/bytes#Bytes\">Bytes</a>::op_as_view(self : Bytes, start~ : Int = .., end? : Int) -> <a href=\"moonbitlang/core/builtin#BytesView\">BytesView</a>",
          "loc": { "line": 70, "column": 8 }
        },
        {
          "name": "op_equal",
          "docstring": "",
          "signature": "fn <a href=\"moonbitlang/core/bytes#Bytes\">Bytes</a>::op_equal(self : Bytes, other : Bytes) -> Bool",
          "loc": { "line": 368, "column": 8 }
        },
        {
          "name": "op_get",
          "docstring": "",
          "signature": "fn <a href=\"moonbitlang/core/bytes#Bytes\">Bytes</a>::op_get(self : Bytes, idx : Int) -> Byte",
          "loc": { "line": 232, "column": 15 }
        },
        {
          "name": "op_set",
          "docstring": "",
          "signature": "fn <a href=\"moonbitlang/core/bytes#Bytes\">Bytes</a>::op_set(self : Bytes, idx : Int, val : Byte) -> Unit",
          "loc": { "line": 239, "column": 15 }
        },
        {
          "name": "set_utf16_char",
          "docstring": "\n Fill UTF16 encoded char `value` into byte sequence `self`, starting at `offset`.\n It return the length of bytes has been written.\n @alert unsafe \"Panic if the [value] is out of range\"\n @alert deprecated \"The type Bytes is about to be changed to be immutable. Use `FixedArray[Byte]` or `Buffer` instead.\"\n @coverage.skip",
          "signature": "fn <a href=\"moonbitlang/core/bytes#Bytes\">Bytes</a>::set_utf16_char(self : Bytes, offset : Int, value : Char) -> Int",
          "loc": { "line": 261, "column": 8 }
        },
        {
          "name": "set_utf8_char",
          "docstring": "\n Fill UTF8 encoded char `value` into byte sequence `self`, starting at `offset`.\n It return the length of bytes has been written.\n @alert deprecated \"The type Bytes is about to be changed to be immutable. Use `FixedArray[Byte]` or `Buffer` instead.\"\n @coverage.skip",
          "signature": "fn <a href=\"moonbitlang/core/bytes#Bytes\">Bytes</a>::set_utf8_char(self : Bytes, offset : Int, value : Char) -> Int",
          "loc": { "line": 190, "column": 8 }
        },
        {
          "name": "sub_string",
          "docstring": "\n Return a new unchecked string, containing the subsequence of `self` that\n starts at `byte_offset` and has length `byte_length`.\n \n @alert deprecated \"Use `to_unchecked_string` instead\"\n @coverage.skip",
          "signature": "fn <a href=\"moonbitlang/core/bytes#Bytes\">Bytes</a>::sub_string(self : Bytes, byte_offset : Int, byte_length : Int) -> String",
          "loc": { "line": 74, "column": 8 }
        },
        {
          "name": "to_string",
          "docstring": "\n Create a new unchecked string from byte sequence.\n \n @alert deprecated \"Use `to_unchecked_string` instead\"\n @coverage.skip",
          "signature": "fn <a href=\"moonbitlang/core/bytes#Bytes\">Bytes</a>::to_string(self : Bytes) -> String",
          "loc": { "line": 83, "column": 8 }
        },
        {
          "name": "to_unchecked_string",
          "docstring": "\n Return an unchecked string, containing the subsequence of `self` that starts at \n `offset` and has length `length`. Both `offset` and `length` \n are indexed by byte.\n \n Note this function does not validate the encoding of the byte sequence, \n it simply copy the bytes into a new String.",
          "signature": "fn <a href=\"moonbitlang/core/bytes#Bytes\">Bytes</a>::to_unchecked_string(self : Bytes, offset~ : Int = .., length~ : Int = ..) -> String",
          "loc": { "line": 94, "column": 8 }
        },
        {
          "name": "unsafe_get",
          "docstring": " \n @alert unsafe \"Panic if index is out of bounds\"",
          "signature": "fn <a href=\"moonbitlang/core/bytes#Bytes\">Bytes</a>::unsafe_get(self : Bytes, idx : Int) -> Byte",
          "loc": { "line": 236, "column": 15 }
        }
      ]
    },
    {
      "name": "FixedArray",
      "impls": [],
      "methods": [
        {
          "name": "blit_from_bytes",
          "docstring": "\n Copy `length` chars from byte sequence `src`, starting at `src_offset`,\n into byte sequence `self`, starting at `bytes_offset`.",
          "signature": "fn <a href=\"moonbitlang/core/array#FixedArray\">FixedArray</a>::blit_from_bytes(self : <a href=\"moonbitlang/core/array#FixedArray\">FixedArray</a>[Byte], bytes_offset : Int, src : Bytes, src_offset : Int, length : Int) -> Unit",
          "loc": { "line": 159, "column": 8 }
        },
        {
          "name": "blit_from_string",
          "docstring": "\n Copy `length` chars from string `str`, starting at `str_offset`,\n into byte sequence `self`, starting at `bytes_offset`.",
          "signature": "fn <a href=\"moonbitlang/core/array#FixedArray\">FixedArray</a>::blit_from_string(self : <a href=\"moonbitlang/core/array#FixedArray\">FixedArray</a>[Byte], bytes_offset : Int, str : String, str_offset : Int, length : Int) -> Unit",
          "loc": { "line": 134, "column": 8 }
        },
        {
          "name": "blit_to",
          "docstring": "",
          "signature": "fn <a href=\"moonbitlang/core/array#FixedArray\">FixedArray</a>::blit_to[A](self : <a href=\"moonbitlang/core/array#FixedArray\">FixedArray</a>[A], dst : <a href=\"moonbitlang/core/array#FixedArray\">FixedArray</a>[A], len~ : Int, src_offset~ : Int = .., dst_offset~ : Int = ..) -> Unit",
          "loc": { "line": 72, "column": 20 }
        },
        {
          "name": "default",
          "docstring": "",
          "signature": "fn <a href=\"moonbitlang/core/array#FixedArray\">FixedArray</a>::default[X]() -> <a href=\"moonbitlang/core/array#FixedArray\">FixedArray</a>[X]",
          "loc": { "line": 41, "column": 20 }
        },
        {
          "name": "fill",
          "docstring": "\n Fill the array with a given value.\n\n # Example\n ```\n let fa : FixedArray[Int] = [0, 0, 0, 0, 0]\n fa.fill(3)\n assert_eq!(fa[0], 3)\n ```",
          "signature": "fn <a href=\"moonbitlang/core/array#FixedArray\">FixedArray</a>::fill[T](self : <a href=\"moonbitlang/core/array#FixedArray\">FixedArray</a>[T], value : T) -> Unit",
          "loc": { "line": 54, "column": 8 }
        },
        {
          "name": "get",
          "docstring": "",
          "signature": "fn <a href=\"moonbitlang/core/array#FixedArray\">FixedArray</a>::get[T](self : <a href=\"moonbitlang/core/array#FixedArray\">FixedArray</a>[T], idx : Int) -> T",
          "loc": { "line": 271, "column": 20 }
        },
        {
          "name": "iter",
          "docstring": "\n @intrinsic %iter.from_array",
          "signature": "fn <a href=\"moonbitlang/core/array#FixedArray\">FixedArray</a>::iter[T](self : <a href=\"moonbitlang/core/array#FixedArray\">FixedArray</a>[T]) -> <a href=\"moonbitlang/core/builtin#Iter\">Iter</a>[T]",
          "loc": { "line": 17, "column": 8 }
        },
        {
          "name": "iter2",
          "docstring": "",
          "signature": "fn <a href=\"moonbitlang/core/array#FixedArray\">FixedArray</a>::iter2[T](self : <a href=\"moonbitlang/core/array#FixedArray\">FixedArray</a>[T]) -> <a href=\"moonbitlang/core/builtin#Iter2\">Iter2</a>[Int, T]",
          "loc": { "line": 29, "column": 8 }
        },
        {
          "name": "length",
          "docstring": "",
          "signature": "fn <a href=\"moonbitlang/core/array#FixedArray\">FixedArray</a>::length[T](self : <a href=\"moonbitlang/core/array#FixedArray\">FixedArray</a>[T]) -> Int",
          "loc": { "line": 280, "column": 20 }
        },
        {
          "name": "make",
          "docstring": "",
          "signature": "fn <a href=\"moonbitlang/core/array#FixedArray\">FixedArray</a>::make[T](len : Int, init : T) -> <a href=\"moonbitlang/core/array#FixedArray\">FixedArray</a>[T]",
          "loc": { "line": 283, "column": 20 }
        },
        {
          "name": "op_get",
          "docstring": "",
          "signature": "fn <a href=\"moonbitlang/core/array#FixedArray\">FixedArray</a>::op_get[T](self : <a href=\"moonbitlang/core/array#FixedArray\">FixedArray</a>[T], idx : Int) -> T",
          "loc": { "line": 264, "column": 20 }
        },
        {
          "name": "op_set",
          "docstring": "",
          "signature": "fn <a href=\"moonbitlang/core/array#FixedArray\">FixedArray</a>::op_set[T](self : <a href=\"moonbitlang/core/array#FixedArray\">FixedArray</a>[T], idx : Int, val : T) -> Unit",
          "loc": { "line": 274, "column": 20 }
        },
        {
          "name": "set",
          "docstring": "",
          "signature": "fn <a href=\"moonbitlang/core/array#FixedArray\">FixedArray</a>::set[T](self : <a href=\"moonbitlang/core/array#FixedArray\">FixedArray</a>[T], idx : Int, val : T) -> Unit",
          "loc": { "line": 277, "column": 20 }
        },
        {
          "name": "set_utf16_char",
          "docstring": "\n Fill utf16 encoded char `value` into byte sequence `self`, starting at `offset`.\n It return the length of bytes has been written.\n @alert unsafe \"Panic if the [value] is out of range\"\n @alert deprecated \"Use `set_utf16le_char` instead\"\n @coverage.skip",
          "signature": "fn <a href=\"moonbitlang/core/array#FixedArray\">FixedArray</a>::set_utf16_char(self : <a href=\"moonbitlang/core/array#FixedArray\">FixedArray</a>[Byte], offset : Int, value : Char) -> Int",
          "loc": { "line": 287, "column": 8 }
        },
        {
          "name": "set_utf16be_char",
          "docstring": "\n Fill UTF16BE encoded char `value` into byte sequence `self`, starting at `offset`.\n It return the length of bytes has been written.\n @alert unsafe \"Panic if the [value] is out of range\"",
          "signature": "fn <a href=\"moonbitlang/core/array#FixedArray\">FixedArray</a>::set_utf16be_char(self : <a href=\"moonbitlang/core/array#FixedArray\">FixedArray</a>[Byte], offset : Int, value : Char) -> Int",
          "loc": { "line": 343, "column": 8 }
        },
        {
          "name": "set_utf16le_char",
          "docstring": "\n Fill UTF16LE encoded char `value` into byte sequence `self`, starting at `offset`.\n It return the length of bytes has been written.\n @alert unsafe \"Panic if the [value] is out of range\"",
          "signature": "fn <a href=\"moonbitlang/core/array#FixedArray\">FixedArray</a>::set_utf16le_char(self : <a href=\"moonbitlang/core/array#FixedArray\">FixedArray</a>[Byte], offset : Int, value : Char) -> Int",
          "loc": { "line": 315, "column": 8 }
        },
        {
          "name": "set_utf8_char",
          "docstring": "\n Fill UTF8 encoded char `value` into byte sequence `self`, starting at `offset`.\n It return the length of bytes has been written.",
          "signature": "fn <a href=\"moonbitlang/core/array#FixedArray\">FixedArray</a>::set_utf8_char(self : <a href=\"moonbitlang/core/array#FixedArray\">FixedArray</a>[Byte], offset : Int, value : Char) -> Int",
          "loc": { "line": 222, "column": 8 }
        },
        {
          "name": "to_json",
          "docstring": "",
          "signature": "fn <a href=\"moonbitlang/core/array#FixedArray\">FixedArray</a>::to_json[X : <a href=\"moonbitlang/core/builtin#ToJson\">ToJson</a>](self : <a href=\"moonbitlang/core/array#FixedArray\">FixedArray</a>[X]) -> <a href=\"moonbitlang/core/json#Json\">Json</a>",
          "loc": { "line": 123, "column": 20 }
        },
        {
          "name": "unsafe_blit",
          "docstring": "\n Copies a slice of elements from one fixed array to another.\n\n This function copies `len` elements from `src` starting at `src_offset` to `dst` starting at `dst_offset`.\n The arrays may overlap, in which case the copy is performed in a way that preserves the data.\n\n # Example\n ```\n let src = FixedArray::from_array([1, 2, 3, 4, 5])\n let dst = FixedArray::from_array([0, 0, 0, 0, 0])\n FixedArray::unsafe_blit(dst, 0, src, 0, 3)\n assert_eq!(dst, FixedArray::from_array([1, 2, 3, 0, 0]))\n ```\n\n The behavior is undefined and platform-specific if:\n - `len < 0`\n - `src_offset < 0`\n - `dst_offset < 0`\n - `dst_offset + len > dst.length()`\n - `src_offset + len > src.length()`\n\n @intrinsic %fixedarray.copy",
          "signature": "fn <a href=\"moonbitlang/core/array#FixedArray\">FixedArray</a>::unsafe_blit[A](dst : <a href=\"moonbitlang/core/array#FixedArray\">FixedArray</a>[A], dst_offset : Int, src : <a href=\"moonbitlang/core/array#FixedArray\">FixedArray</a>[A], src_offset : Int, len : Int) -> Unit",
          "loc": { "line": 37, "column": 20 }
        },
        {
          "name": "unsafe_get",
          "docstring": "\n @alert unsafe \"Panic if index is out of bounds\"",
          "signature": "fn <a href=\"moonbitlang/core/array#FixedArray\">FixedArray</a>::unsafe_get[T](self : <a href=\"moonbitlang/core/array#FixedArray\">FixedArray</a>[T], idx : Int) -> T",
          "loc": { "line": 268, "column": 20 }
        }
      ]
    },
    {
      "name": "Result",
      "impls": [],
      "methods": [
        {
          "name": "op_equal",
          "docstring": "",
          "signature": "fn <a href=\"moonbitlang/core/result#Result\">Result</a>::op_equal[T : <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>, E : <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>](self : <a href=\"moonbitlang/core/result#Result\">Result</a>[T, E], other : <a href=\"moonbitlang/core/result#Result\">Result</a>[T, E]) -> Bool",
          "loc": { "line": 16, "column": 8 }
        },
        {
          "name": "to_json",
          "docstring": "",
          "signature": "fn <a href=\"moonbitlang/core/result#Result\">Result</a>::to_json[Ok : <a href=\"moonbitlang/core/builtin#ToJson\">ToJson</a>, Err : <a href=\"moonbitlang/core/builtin#ToJson\">ToJson</a>](self : <a href=\"moonbitlang/core/result#Result\">Result</a>[Ok, Err]) -> <a href=\"moonbitlang/core/json#Json\">Json</a>",
          "loc": { "line": 175, "column": 16 }
        }
      ]
    },
    {
      "name": "Option",
      "impls": [],
      "methods": [
        {
          "name": "op_equal",
          "docstring": "",
          "signature": "fn <a href=\"moonbitlang/core/option#Option\">Option</a>::op_equal[X : <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>](self : X?, other : X?) -> Bool",
          "loc": { "line": 16, "column": 8 }
        },
        {
          "name": "to_json",
          "docstring": "",
          "signature": "fn <a href=\"moonbitlang/core/option#Option\">Option</a>::to_json[T : <a href=\"moonbitlang/core/builtin#ToJson\">ToJson</a>](self : T?) -> <a href=\"moonbitlang/core/json#Json\">Json</a>",
          "loc": { "line": 167, "column": 16 }
        },
        {
          "name": "to_string",
          "docstring": "",
          "signature": "fn <a href=\"moonbitlang/core/option#Option\">Option</a>::to_string[X : <a href=\"moonbitlang/core/builtin#Show\">Show</a>](self : X?) -> String",
          "loc": { "line": 25, "column": 8 }
        },
        {
          "name": "unwrap",
          "docstring": "\n Extract the value in `Some`.\n Panic if input is `None`.",
          "signature": "fn <a href=\"moonbitlang/core/option#Option\">Option</a>::unwrap[X](self : X?) -> X",
          "loc": { "line": 35, "column": 8 }
        }
      ]
    },
    {
      "name": "String",
      "impls": [],
      "methods": [
        {
          "name": "escape",
          "docstring": "\n Returns a valid MoonBit string literal representation of a string,\n add quotes and escape special characters.",
          "signature": "fn <a href=\"moonbitlang/core/string#String\">String</a>::escape(self : String) -> String",
          "loc": { "line": 170, "column": 8 }
        },
        {
          "name": "get",
          "docstring": "",
          "signature": "fn <a href=\"moonbitlang/core/string#String\">String</a>::get(self : String, idx : Int) -> Char",
          "loc": { "line": 294, "column": 16 }
        },
        {
          "name": "length",
          "docstring": "",
          "signature": "fn <a href=\"moonbitlang/core/string#String\">String</a>::length(self : String) -> Int",
          "loc": { "line": 288, "column": 16 }
        },
        {
          "name": "make",
          "docstring": "\n Create new string of `length`, where each character is `value`\n\n ```\n assert_eq!(String::make(5,'S'), \"SSSSS\")\n ```",
          "signature": "fn <a href=\"moonbitlang/core/string#String\">String</a>::make(length : Int, value : Char) -> String",
          "loc": { "line": 189, "column": 16 }
        },
        {
          "name": "op_add",
          "docstring": "",
          "signature": "fn <a href=\"moonbitlang/core/string#String\">String</a>::op_add(self : String, other : String) -> String",
          "loc": { "line": 297, "column": 16 }
        },
        {
          "name": "op_equal",
          "docstring": "",
          "signature": "fn <a href=\"moonbitlang/core/string#String\">String</a>::op_equal(self : String, other : String) -> Bool",
          "loc": { "line": 300, "column": 16 }
        },
        {
          "name": "op_get",
          "docstring": "",
          "signature": "fn <a href=\"moonbitlang/core/string#String\">String</a>::op_get(self : String, idx : Int) -> Char",
          "loc": { "line": 291, "column": 16 }
        },
        {
          "name": "substring",
          "docstring": "\n Returns a new string containing characters from the original string starting\n at `start` index up to (but not including) `end` index.\n\n Parameters:\n\n * `string` : The source string from which to extract the substring.\n * `start` : The starting index of the substring (inclusive). Defaults to 0.\n * `end` : The ending index of the substring (exclusive). Defaults to the\n length of the string.\n\n Returns a new string containing the specified substring.\n\n Example:\n\n ```moonbit\n test \"substring/basic\" {\n   let s = \"Hello world\"\n   inspect!(s.substring(start=0, end=5), content=\"Hello\")\n   inspect!(s.substring(start=6, end=11), content=\"world\")\n   inspect!(s.substring(), content=\"Hello world\")\n }\n \n test \"substring/empty\" {\n   let s = \"test\"\n   inspect!(s.substring(start=2, end=2), content=\"\")\n   inspect!(\"\".substring(), content=\"\")\n }\n \n test \"panic substring/invalid_range\" {\n   let s = \"test\"\n   ignore(s.substring(start=-1))\n   ignore(s.substring(end=5))\n   ignore(s.substring(start=3, end=2))\n }\n ```",
          "signature": "fn <a href=\"moonbitlang/core/string#String\">String</a>::substring(self : String, start~ : Int = .., end? : Int) -> String",
          "loc": { "line": 60, "column": 8 }
        },
        {
          "name": "to_json",
          "docstring": "",
          "signature": "fn <a href=\"moonbitlang/core/string#String\">String</a>::to_json(self : String) -> <a href=\"moonbitlang/core/json#Json\">Json</a>",
          "loc": { "line": 103, "column": 16 }
        },
        {
          "name": "to_string",
          "docstring": "",
          "signature": "fn <a href=\"moonbitlang/core/string#String\">String</a>::to_string(self : String) -> String",
          "loc": { "line": 303, "column": 16 }
        }
      ]
    },
    {
      "name": "Double",
      "impls": [],
      "methods": [
        {
          "name": "compare",
          "docstring": "",
          "signature": "fn <a href=\"moonbitlang/core/double#Double\">Double</a>::compare(self : Double, other : Double) -> Int",
          "loc": { "line": 196, "column": 16 }
        },
        {
          "name": "convert_uint",
          "docstring": "",
          "signature": "fn <a href=\"moonbitlang/core/double#Double\">Double</a>::convert_uint(val : UInt) -> Double",
          "loc": { "line": 205, "column": 16 }
        },
        {
          "name": "convert_uint64",
          "docstring": "",
          "signature": "fn <a href=\"moonbitlang/core/double#Double\">Double</a>::convert_uint64(val : UInt64) -> Double",
          "loc": { "line": 138, "column": 16 }
        },
        {
          "name": "default",
          "docstring": "",
          "signature": "fn <a href=\"moonbitlang/core/double#Double\">Double</a>::default() -> Double",
          "loc": { "line": 199, "column": 16 }
        },
        {
          "name": "op_add",
          "docstring": "",
          "signature": "fn <a href=\"moonbitlang/core/double#Double\">Double</a>::op_add(self : Double, other : Double) -> Double",
          "loc": { "line": 175, "column": 16 }
        },
        {
          "name": "op_div",
          "docstring": "",
          "signature": "fn <a href=\"moonbitlang/core/double#Double\">Double</a>::op_div(self : Double, other : Double) -> Double",
          "loc": { "line": 184, "column": 16 }
        },
        {
          "name": "op_equal",
          "docstring": "",
          "signature": "fn <a href=\"moonbitlang/core/double#Double\">Double</a>::op_equal(self : Double, other : Double) -> Bool",
          "loc": { "line": 190, "column": 16 }
        },
        {
          "name": "op_mul",
          "docstring": "",
          "signature": "fn <a href=\"moonbitlang/core/double#Double\">Double</a>::op_mul(self : Double, other : Double) -> Double",
          "loc": { "line": 181, "column": 16 }
        },
        {
          "name": "op_neg",
          "docstring": "",
          "signature": "fn <a href=\"moonbitlang/core/double#Double\">Double</a>::op_neg(self : Double) -> Double",
          "loc": { "line": 172, "column": 16 }
        },
        {
          "name": "op_neq",
          "docstring": "",
          "signature": "fn <a href=\"moonbitlang/core/double#Double\">Double</a>::op_neq(self : Double, other : Double) -> Bool",
          "loc": { "line": 193, "column": 16 }
        },
        {
          "name": "op_sub",
          "docstring": "",
          "signature": "fn <a href=\"moonbitlang/core/double#Double\">Double</a>::op_sub(self : Double, other : Double) -> Double",
          "loc": { "line": 178, "column": 16 }
        },
        {
          "name": "reinterpret_as_i64",
          "docstring": "\n @alert deprecated \"Use `reinterpret_as_int64` instead\"\n @coverage.skip",
          "signature": "fn <a href=\"moonbitlang/core/double#Double\">Double</a>::reinterpret_as_i64(self : Double) -> Int64",
          "loc": { "line": 124, "column": 16 }
        },
        {
          "name": "reinterpret_as_int64",
          "docstring": "",
          "signature": "fn <a href=\"moonbitlang/core/double#Double\">Double</a>::reinterpret_as_int64(self : Double) -> Int64",
          "loc": { "line": 127, "column": 16 }
        },
        {
          "name": "reinterpret_as_u64",
          "docstring": "\n @alert deprecated \"Use `reinterpret_as_uint64` instead\"\n @coverage.skip",
          "signature": "fn <a href=\"moonbitlang/core/double#Double\">Double</a>::reinterpret_as_u64(self : Double) -> UInt64",
          "loc": { "line": 132, "column": 16 }
        },
        {
          "name": "reinterpret_as_uint64",
          "docstring": "",
          "signature": "fn <a href=\"moonbitlang/core/double#Double\">Double</a>::reinterpret_as_uint64(self : Double) -> UInt64",
          "loc": { "line": 135, "column": 16 }
        },
        {
          "name": "sqrt",
          "docstring": "",
          "signature": "fn <a href=\"moonbitlang/core/double#Double\">Double</a>::sqrt(self : Double) -> Double",
          "loc": { "line": 187, "column": 16 }
        },
        {
          "name": "to_float",
          "docstring": "",
          "signature": "fn <a href=\"moonbitlang/core/double#Double\">Double</a>::to_float(self : Double) -> Float",
          "loc": { "line": 461, "column": 16 }
        },
        {
          "name": "to_int",
          "docstring": "\n Converts a double-precision floating-point number to a 32-bit integer.\n Handles special cases including NaN and numbers outside the valid Int range.\n\n Parameters:\n\n * `self` : The double-precision floating-point number to be converted.\n\n Returns an 32-bit integer value according to the following rules:\n\n * Returns 0 if the input is NaN\n * Returns `@int.max_value` (2147483647) if the input is greater than or\n   equal to `@int.max_value`\n * Returns `@int.min_value` (-2147483648) if the input is less than or equal\n   to `@int.min_value`\n * Otherwise returns the integer part of the input by truncating towards zero\n\n Example:\n\n ```moonbit\n test \"Double::to_int/normal\" {\n   inspect!(42.0.to_int(), content=\"42\")\n   inspect!((-42.5).to_int(), content=\"-42\")\n   inspect!((0.0 / 0.0).to_int(), content=\"0\") // NaN\n   inspect!((1.0 / 0.0).to_int(), content=\"2147483647\") // Infinity\n   inspect!((-1.0 / 0.0).to_int(), content=\"-2147483648\") // -Infinity\n }\n ```",
          "signature": "fn <a href=\"moonbitlang/core/double#Double\">Double</a>::to_int(self : Double) -> Int",
          "loc": { "line": 43, "column": 16 }
        },
        {
          "name": "to_int64",
          "docstring": "\n Converts a double-precision floating-point number to a 64-bit integer.\n Handles special cases including NaN and numbers outside the valid Int range.\n\n Parameters:\n\n * `self` : The double-precision floating-point number to be converted.\n\n Returns an 64-bit integer value according to the following rules:\n\n * Returns 0 if the input is NaN\n * Returns `@int64.max_value` (9223372036854775807L) if the input is greater than or\n   equal to `@int64.max_value`\n * Returns `@int64.min_value` (-9223372036854775808L) if the input is less than or equal\n   to `@int64.min_value`\n * Otherwise returns the integer part of the input by truncating towards zero\n\n Example:\n\n ```moonbit\n test \"Double::to_int64\" {\n   inspect!(42.0.to_int64(), content=\"42\")\n   inspect!((-42.5).to_int64(), content=\"-42\")\n   inspect!((0.0 / 0.0).to_int64(), content=\"0\") // NaN\n   inspect!((1.0 / 0.0).to_int64(), content=\"9223372036854775807\") // Infinity\n   inspect!((-1.0 / 0.0).to_int64(), content=\"-9223372036854775808\") // -Infinity\n }\n ```",
          "signature": "fn <a href=\"moonbitlang/core/double#Double\">Double</a>::to_int64(self : Double) -> Int64",
          "loc": { "line": 43, "column": 16 }
        },
        {
          "name": "to_json",
          "docstring": "",
          "signature": "fn <a href=\"moonbitlang/core/double#Double\">Double</a>::to_json(self : Double) -> <a href=\"moonbitlang/core/json#Json\">Json</a>",
          "loc": { "line": 52, "column": 16 }
        },
        {
          "name": "until",
          "docstring": "\n Creates an iterator that iterates over a range of Double with default step 1.0 .\n To grow the range downward, set the `step` parameter to a negative value.\n\n # Arguments\n\n * `start` - The starting value of the range (inclusive).\n * `end` - The ending value of the range (exclusive by default).\n * `step` - The step size of the range (default 1.0).\n * `inclusive` - Whether the ending value is inclusive (default false).\n\n # Returns\n\n Returns an iterator that iterates over the range of Double from `start` to `end - 1`.",
          "signature": "fn <a href=\"moonbitlang/core/double#Double\">Double</a>::until(self : Double, end : Double, step~ : Double = .., inclusive~ : Bool = ..) -> <a href=\"moonbitlang/core/builtin#Iter\">Iter</a>[Double]",
          "loc": { "line": 344, "column": 8 }
        },
        {
          "name": "upto",
          "docstring": "\n Creates an iterator that iterates over a range of Double with default step 1.0 .\n\n # Arguments\n\n * `start` - The starting value of the range (inclusive).\n * `end` - The ending value of the range (exclusive).\n * `inclusive` - Whether the ending value is inclusive (default false).\n\n # Returns\n\n Returns an iterator that iterates over the range of Double from `start` to `end - 1`.\n @alert deprecated \"Use `..<` in for loop or `until` method instead\"\n @coverage.skip",
          "signature": "fn <a href=\"moonbitlang/core/double#Double\">Double</a>::upto(self : Double, end : Double, inclusive~ : Bool = ..) -> <a href=\"moonbitlang/core/builtin#Iter\">Iter</a>[Double]",
          "loc": { "line": 196, "column": 8 }
        }
      ]
    },
    {
      "name": "Float",
      "impls": [],
      "methods": [
        {
          "name": "compare",
          "docstring": "",
          "signature": "fn <a href=\"moonbitlang/core/float#Float\">Float</a>::compare(self : Float, other : Float) -> Int",
          "loc": { "line": 437, "column": 15 }
        },
        {
          "name": "op_add",
          "docstring": "",
          "signature": "fn <a href=\"moonbitlang/core/float#Float\">Float</a>::op_add(self : Float, other : Float) -> Float",
          "loc": { "line": 416, "column": 15 }
        },
        {
          "name": "op_div",
          "docstring": "",
          "signature": "fn <a href=\"moonbitlang/core/float#Float\">Float</a>::op_div(self : Float, other : Float) -> Float",
          "loc": { "line": 425, "column": 15 }
        },
        {
          "name": "op_equal",
          "docstring": "",
          "signature": "fn <a href=\"moonbitlang/core/float#Float\">Float</a>::op_equal(self : Float, other : Float) -> Bool",
          "loc": { "line": 431, "column": 15 }
        },
        {
          "name": "op_mul",
          "docstring": "",
          "signature": "fn <a href=\"moonbitlang/core/float#Float\">Float</a>::op_mul(self : Float, other : Float) -> Float",
          "loc": { "line": 422, "column": 15 }
        },
        {
          "name": "op_neg",
          "docstring": "",
          "signature": "fn <a href=\"moonbitlang/core/float#Float\">Float</a>::op_neg(self : Float) -> Float",
          "loc": { "line": 413, "column": 15 }
        },
        {
          "name": "op_neq",
          "docstring": "",
          "signature": "fn <a href=\"moonbitlang/core/float#Float\">Float</a>::op_neq(self : Float, other : Float) -> Bool",
          "loc": { "line": 434, "column": 15 }
        },
        {
          "name": "op_sub",
          "docstring": "",
          "signature": "fn <a href=\"moonbitlang/core/float#Float\">Float</a>::op_sub(self : Float, other : Float) -> Float",
          "loc": { "line": 419, "column": 15 }
        },
        {
          "name": "reinterpret_as_int",
          "docstring": "",
          "signature": "fn <a href=\"moonbitlang/core/float#Float\">Float</a>::reinterpret_as_int(self : Float) -> Int",
          "loc": { "line": 443, "column": 15 }
        },
        {
          "name": "reinterpret_as_uint",
          "docstring": "",
          "signature": "fn <a href=\"moonbitlang/core/float#Float\">Float</a>::reinterpret_as_uint(self : Float) -> UInt",
          "loc": { "line": 446, "column": 15 }
        },
        {
          "name": "sqrt",
          "docstring": "",
          "signature": "fn <a href=\"moonbitlang/core/float#Float\">Float</a>::sqrt(self : Float) -> Float",
          "loc": { "line": 428, "column": 15 }
        },
        {
          "name": "to_double",
          "docstring": "",
          "signature": "fn <a href=\"moonbitlang/core/float#Float\">Float</a>::to_double(self : Float) -> Double",
          "loc": { "line": 440, "column": 15 }
        },
        {
          "name": "to_json",
          "docstring": "",
          "signature": "fn <a href=\"moonbitlang/core/float#Float\">Float</a>::to_json(self : Float) -> <a href=\"moonbitlang/core/json#Json\">Json</a>",
          "loc": { "line": 62, "column": 15 }
        },
        {
          "name": "until",
          "docstring": "\n Creates an iterator that iterates over a range of Float with default step 1.0 .\n To grow the range downward, set the `step` parameter to a negative value.\n\n # Arguments\n\n * `start` - The starting value of the range (inclusive).\n * `end` - The ending value of the range (exclusive by default).\n * `step` - The step size of the range (default 1.0).\n * `inclusive` - Whether the ending value is inclusive (default false).\n\n # Returns\n\n Returns an iterator that iterates over the range of Float from `start` to `end - 1`.",
          "signature": "fn <a href=\"moonbitlang/core/float#Float\">Float</a>::until(self : Float, end : Float, step~ : Float = .., inclusive~ : Bool = ..) -> <a href=\"moonbitlang/core/builtin#Iter\">Iter</a>[Float]",
          "loc": { "line": 301, "column": 8 }
        },
        {
          "name": "upto",
          "docstring": "\n Creates an iterator that iterates over a range of Float with default step 1.0 .\n\n # Arguments\n\n * `start` - The starting value of the range (inclusive).\n * `end` - The ending value of the range (exclusive).\n * `inclusive` - Whether the ending value is inclusive (default false).\n\n # Returns\n\n Returns an iterator that iterates over the range of Float from `start` to `end - 1`.\n @alert deprecated \"Use `..<` in for loop or `until` method instead\"\n @coverage.skip",
          "signature": "fn <a href=\"moonbitlang/core/float#Float\">Float</a>::upto(self : Float, end : Float, inclusive~ : Bool = ..) -> <a href=\"moonbitlang/core/builtin#Iter\">Iter</a>[Float]",
          "loc": { "line": 161, "column": 8 }
        }
      ]
    },
    {
      "name": "UInt64",
      "impls": [],
      "methods": [
        {
          "name": "clz",
          "docstring": "",
          "signature": "fn <a href=\"moonbitlang/core/uint64#UInt64\">UInt64</a>::clz(self : UInt64) -> Int",
          "loc": { "line": 225, "column": 16 }
        },
        {
          "name": "compare",
          "docstring": "",
          "signature": "fn <a href=\"moonbitlang/core/uint64#UInt64\">UInt64</a>::compare(self : UInt64, other : UInt64) -> Int",
          "loc": { "line": 181, "column": 16 }
        },
        {
          "name": "ctz",
          "docstring": "",
          "signature": "fn <a href=\"moonbitlang/core/uint64#UInt64\">UInt64</a>::ctz(self : UInt64) -> Int",
          "loc": { "line": 228, "column": 16 }
        },
        {
          "name": "default",
          "docstring": "",
          "signature": "fn <a href=\"moonbitlang/core/uint64#UInt64\">UInt64</a>::default() -> UInt64",
          "loc": { "line": 16, "column": 16 }
        },
        {
          "name": "extend_uint",
          "docstring": "",
          "signature": "fn <a href=\"moonbitlang/core/uint64#UInt64\">UInt64</a>::extend_uint(val : UInt) -> UInt64",
          "loc": { "line": 116, "column": 16 }
        },
        {
          "name": "land",
          "docstring": "",
          "signature": "fn <a href=\"moonbitlang/core/uint64#UInt64\">UInt64</a>::land(self : UInt64, other : UInt64) -> UInt64",
          "loc": { "line": 187, "column": 16 }
        },
        {
          "name": "lnot",
          "docstring": "",
          "signature": "fn <a href=\"moonbitlang/core/uint64#UInt64\">UInt64</a>::lnot(self : UInt64) -> UInt64",
          "loc": { "line": 196, "column": 16 }
        },
        {
          "name": "lor",
          "docstring": "",
          "signature": "fn <a href=\"moonbitlang/core/uint64#UInt64\">UInt64</a>::lor(self : UInt64, other : UInt64) -> UInt64",
          "loc": { "line": 190, "column": 16 }
        },
        {
          "name": "lsl",
          "docstring": "\n @alert deprecated \"Use infix operator `<<` instead\"\n @coverage.skip",
          "signature": "fn <a href=\"moonbitlang/core/uint64#UInt64\">UInt64</a>::lsl(self : UInt64, shift : Int) -> UInt64",
          "loc": { "line": 201, "column": 16 }
        },
        {
          "name": "lsr",
          "docstring": "\n @alert deprecated \"Use infix operator `>>` instead\"\n @coverage.skip",
          "signature": "fn <a href=\"moonbitlang/core/uint64#UInt64\">UInt64</a>::lsr(self : UInt64, shift : Int) -> UInt64",
          "loc": { "line": 216, "column": 16 }
        },
        {
          "name": "lxor",
          "docstring": "",
          "signature": "fn <a href=\"moonbitlang/core/uint64#UInt64\">UInt64</a>::lxor(self : UInt64, other : UInt64) -> UInt64",
          "loc": { "line": 193, "column": 16 }
        },
        {
          "name": "op_add",
          "docstring": "",
          "signature": "fn <a href=\"moonbitlang/core/uint64#UInt64\">UInt64</a>::op_add(self : UInt64, other : UInt64) -> UInt64",
          "loc": { "line": 166, "column": 16 }
        },
        {
          "name": "op_div",
          "docstring": "",
          "signature": "fn <a href=\"moonbitlang/core/uint64#UInt64\">UInt64</a>::op_div(self : UInt64, other : UInt64) -> UInt64",
          "loc": { "line": 175, "column": 16 }
        },
        {
          "name": "op_equal",
          "docstring": "",
          "signature": "fn <a href=\"moonbitlang/core/uint64#UInt64\">UInt64</a>::op_equal(self : UInt64, other : UInt64) -> Bool",
          "loc": { "line": 184, "column": 16 }
        },
        {
          "name": "op_mod",
          "docstring": "",
          "signature": "fn <a href=\"moonbitlang/core/uint64#UInt64\">UInt64</a>::op_mod(self : UInt64, other : UInt64) -> UInt64",
          "loc": { "line": 178, "column": 16 }
        },
        {
          "name": "op_mul",
          "docstring": "",
          "signature": "fn <a href=\"moonbitlang/core/uint64#UInt64\">UInt64</a>::op_mul(self : UInt64, other : UInt64) -> UInt64",
          "loc": { "line": 172, "column": 16 }
        },
        {
          "name": "op_shl",
          "docstring": "",
          "signature": "fn <a href=\"moonbitlang/core/uint64#UInt64\">UInt64</a>::op_shl(self : UInt64, shift : Int) -> UInt64",
          "loc": { "line": 219, "column": 16 }
        },
        {
          "name": "op_shr",
          "docstring": "",
          "signature": "fn <a href=\"moonbitlang/core/uint64#UInt64\">UInt64</a>::op_shr(self : UInt64, shift : Int) -> UInt64",
          "loc": { "line": 222, "column": 16 }
        },
        {
          "name": "op_sub",
          "docstring": "",
          "signature": "fn <a href=\"moonbitlang/core/uint64#UInt64\">UInt64</a>::op_sub(self : UInt64, other : UInt64) -> UInt64",
          "loc": { "line": 169, "column": 16 }
        },
        {
          "name": "popcnt",
          "docstring": "",
          "signature": "fn <a href=\"moonbitlang/core/uint64#UInt64\">UInt64</a>::popcnt(self : UInt64) -> Int",
          "loc": { "line": 231, "column": 16 }
        },
        {
          "name": "reinterpret_as_double",
          "docstring": "",
          "signature": "fn <a href=\"moonbitlang/core/uint64#UInt64\">UInt64</a>::reinterpret_as_double(self : UInt64) -> Double",
          "loc": { "line": 104, "column": 16 }
        },
        {
          "name": "reinterpret_as_int64",
          "docstring": "",
          "signature": "fn <a href=\"moonbitlang/core/uint64#UInt64\">UInt64</a>::reinterpret_as_int64(self : UInt64) -> Int64",
          "loc": { "line": 154, "column": 16 }
        },
        {
          "name": "shl",
          "docstring": "\n @alert deprecated \"Use infix operator `<<` instead\"\n @coverage.skip",
          "signature": "fn <a href=\"moonbitlang/core/uint64#UInt64\">UInt64</a>::shl(self : UInt64, shift : Int) -> UInt64",
          "loc": { "line": 206, "column": 16 }
        },
        {
          "name": "shr",
          "docstring": "\n @alert deprecated \"Use infix operator `>>` instead\"\n @coverage.skip",
          "signature": "fn <a href=\"moonbitlang/core/uint64#UInt64\">UInt64</a>::shr(self : UInt64, shift : Int) -> UInt64",
          "loc": { "line": 211, "column": 16 }
        },
        {
          "name": "to_byte",
          "docstring": "",
          "signature": "fn <a href=\"moonbitlang/core/uint64#UInt64\">UInt64</a>::to_byte(self : UInt64) -> Byte",
          "loc": { "line": 257, "column": 16 }
        },
        {
          "name": "to_double",
          "docstring": "",
          "signature": "fn <a href=\"moonbitlang/core/uint64#UInt64\">UInt64</a>::to_double(self : UInt64) -> Double",
          "loc": { "line": 163, "column": 16 }
        },
        {
          "name": "to_float",
          "docstring": "",
          "signature": "fn <a href=\"moonbitlang/core/uint64#UInt64\">UInt64</a>::to_float(self : UInt64) -> Float",
          "loc": { "line": 234, "column": 16 }
        },
        {
          "name": "to_int",
          "docstring": "",
          "signature": "fn <a href=\"moonbitlang/core/uint64#UInt64\">UInt64</a>::to_int(self : UInt64) -> Int",
          "loc": { "line": 160, "column": 16 }
        },
        {
          "name": "to_int64",
          "docstring": "\n @alert deprecated \"Use `reinterpret_as_int64` instead\"\n @coverage.skip",
          "signature": "fn <a href=\"moonbitlang/core/uint64#UInt64\">UInt64</a>::to_int64(self : UInt64) -> Int64",
          "loc": { "line": 151, "column": 16 }
        },
        {
          "name": "to_string",
          "docstring": "",
          "signature": "fn <a href=\"moonbitlang/core/uint64#UInt64\">UInt64</a>::to_string(self : UInt64) -> String",
          "loc": { "line": 134, "column": 16 }
        },
        {
          "name": "to_uint",
          "docstring": "",
          "signature": "fn <a href=\"moonbitlang/core/uint64#UInt64\">UInt64</a>::to_uint(self : UInt64) -> UInt",
          "loc": { "line": 157, "column": 16 }
        },
        {
          "name": "trunc_double",
          "docstring": "",
          "signature": "fn <a href=\"moonbitlang/core/uint64#UInt64\">UInt64</a>::trunc_double(val : Double) -> UInt64",
          "loc": { "line": 110, "column": 16 }
        },
        {
          "name": "upto",
          "docstring": "\n Creates an iterator that iterates over a range of UInt64 with default step 1UL.\n \n # Arguments\n \n * `start` - The starting value of the range (inclusive).\n * `end` - The ending value of the range (exclusive).\n * `inclusive` - Whether the ending value is inclusive (default false).\n \n # Returns\n \n Returns an iterator that iterates over the range of UInt64 from `start` to `end - 1`.\n @alert deprecated \"Use `..<` in for loop or `until` method instead\"\n @coverage.skip",
          "signature": "fn <a href=\"moonbitlang/core/uint64#UInt64\">UInt64</a>::upto(self : UInt64, end : UInt64, inclusive~ : Bool = ..) -> <a href=\"moonbitlang/core/builtin#Iter\">Iter</a>[UInt64]",
          "loc": { "line": 91, "column": 8 }
        }
      ]
    },
    {
      "name": "UInt",
      "impls": [],
      "methods": [
        {
          "name": "clz",
          "docstring": "",
          "signature": "fn <a href=\"moonbitlang/core/uint#UInt\">UInt</a>::clz(self : UInt) -> Int",
          "loc": { "line": 393, "column": 14 }
        },
        {
          "name": "compare",
          "docstring": "",
          "signature": "fn <a href=\"moonbitlang/core/uint#UInt\">UInt</a>::compare(self : UInt, other : UInt) -> Int",
          "loc": { "line": 352, "column": 14 }
        },
        {
          "name": "ctz",
          "docstring": "",
          "signature": "fn <a href=\"moonbitlang/core/uint#UInt\">UInt</a>::ctz(self : UInt) -> Int",
          "loc": { "line": 396, "column": 14 }
        },
        {
          "name": "land",
          "docstring": "",
          "signature": "fn <a href=\"moonbitlang/core/uint#UInt\">UInt</a>::land(self : UInt, other : UInt) -> UInt",
          "loc": { "line": 355, "column": 14 }
        },
        {
          "name": "lnot",
          "docstring": "",
          "signature": "fn <a href=\"moonbitlang/core/uint#UInt\">UInt</a>::lnot(self : UInt) -> UInt",
          "loc": { "line": 364, "column": 14 }
        },
        {
          "name": "lor",
          "docstring": "",
          "signature": "fn <a href=\"moonbitlang/core/uint#UInt\">UInt</a>::lor(self : UInt, other : UInt) -> UInt",
          "loc": { "line": 358, "column": 14 }
        },
        {
          "name": "lsl",
          "docstring": "\n @alert deprecated \"Use infix operator `<<` instead\"\n @coverage.skip",
          "signature": "fn <a href=\"moonbitlang/core/uint#UInt\">UInt</a>::lsl(self : UInt, shift : Int) -> UInt",
          "loc": { "line": 369, "column": 14 }
        },
        {
          "name": "lsr",
          "docstring": "\n @alert deprecated \"Use infix operator `>>` instead\"\n @coverage.skip",
          "signature": "fn <a href=\"moonbitlang/core/uint#UInt\">UInt</a>::lsr(self : UInt, shift : Int) -> UInt",
          "loc": { "line": 379, "column": 14 }
        },
        {
          "name": "lxor",
          "docstring": "",
          "signature": "fn <a href=\"moonbitlang/core/uint#UInt\">UInt</a>::lxor(self : UInt, other : UInt) -> UInt",
          "loc": { "line": 361, "column": 14 }
        },
        {
          "name": "op_add",
          "docstring": "",
          "signature": "fn <a href=\"moonbitlang/core/uint#UInt\">UInt</a>::op_add(self : UInt, other : UInt) -> UInt",
          "loc": { "line": 331, "column": 14 }
        },
        {
          "name": "op_div",
          "docstring": "",
          "signature": "fn <a href=\"moonbitlang/core/uint#UInt\">UInt</a>::op_div(self : UInt, other : UInt) -> UInt",
          "loc": { "line": 340, "column": 14 }
        },
        {
          "name": "op_equal",
          "docstring": "",
          "signature": "fn <a href=\"moonbitlang/core/uint#UInt\">UInt</a>::op_equal(self : UInt, other : UInt) -> Bool",
          "loc": { "line": 346, "column": 14 }
        },
        {
          "name": "op_mod",
          "docstring": "",
          "signature": "fn <a href=\"moonbitlang/core/uint#UInt\">UInt</a>::op_mod(self : UInt, other : UInt) -> UInt",
          "loc": { "line": 343, "column": 14 }
        },
        {
          "name": "op_mul",
          "docstring": "",
          "signature": "fn <a href=\"moonbitlang/core/uint#UInt\">UInt</a>::op_mul(self : UInt, other : UInt) -> UInt",
          "loc": { "line": 337, "column": 14 }
        },
        {
          "name": "op_neq",
          "docstring": "",
          "signature": "fn <a href=\"moonbitlang/core/uint#UInt\">UInt</a>::op_neq(self : UInt, other : UInt) -> Bool",
          "loc": { "line": 349, "column": 14 }
        },
        {
          "name": "op_shl",
          "docstring": "",
          "signature": "fn <a href=\"moonbitlang/core/uint#UInt\">UInt</a>::op_shl(self : UInt, shift : Int) -> UInt",
          "loc": { "line": 387, "column": 14 }
        },
        {
          "name": "op_shr",
          "docstring": "",
          "signature": "fn <a href=\"moonbitlang/core/uint#UInt\">UInt</a>::op_shr(self : UInt, shift : Int) -> UInt",
          "loc": { "line": 390, "column": 14 }
        },
        {
          "name": "op_sub",
          "docstring": "",
          "signature": "fn <a href=\"moonbitlang/core/uint#UInt\">UInt</a>::op_sub(self : UInt, other : UInt) -> UInt",
          "loc": { "line": 334, "column": 14 }
        },
        {
          "name": "popcnt",
          "docstring": "",
          "signature": "fn <a href=\"moonbitlang/core/uint#UInt\">UInt</a>::popcnt(self : UInt) -> Int",
          "loc": { "line": 399, "column": 14 }
        },
        {
          "name": "reinterpret_as_float",
          "docstring": "",
          "signature": "fn <a href=\"moonbitlang/core/uint#UInt\">UInt</a>::reinterpret_as_float(self : UInt) -> Float",
          "loc": { "line": 455, "column": 14 }
        },
        {
          "name": "reinterpret_as_int",
          "docstring": "\n reinterpret the unsigned int as signed int\n For number within the range of 0..=2^31-1, \n the value is the same. For number within the range of 2^31..=2^32-1,\n the value is negative",
          "signature": "fn <a href=\"moonbitlang/core/uint#UInt\">UInt</a>::reinterpret_as_int(self : UInt) -> Int",
          "loc": { "line": 323, "column": 14 }
        },
        {
          "name": "shl",
          "docstring": "\n @alert deprecated \"Use infix operator `<<` instead\"\n @coverage.skip",
          "signature": "fn <a href=\"moonbitlang/core/uint#UInt\">UInt</a>::shl(self : UInt, shift : Int) -> UInt",
          "loc": { "line": 374, "column": 14 }
        },
        {
          "name": "shr",
          "docstring": "\n @alert deprecated \"Use infix operator `>>` instead\"\n @coverage.skip",
          "signature": "fn <a href=\"moonbitlang/core/uint#UInt\">UInt</a>::shr(self : UInt, shift : Int) -> UInt",
          "loc": { "line": 384, "column": 14 }
        },
        {
          "name": "to_byte",
          "docstring": "",
          "signature": "fn <a href=\"moonbitlang/core/uint#UInt\">UInt</a>::to_byte(self : UInt) -> Byte",
          "loc": { "line": 407, "column": 14 }
        },
        {
          "name": "to_float",
          "docstring": "",
          "signature": "fn <a href=\"moonbitlang/core/uint#UInt\">UInt</a>::to_float(self : UInt) -> Float",
          "loc": { "line": 464, "column": 14 }
        },
        {
          "name": "to_int",
          "docstring": "\n @alert deprecated \"Use `reinterpret_as_int` instead\"\n @coverage.skip",
          "signature": "fn <a href=\"moonbitlang/core/uint#UInt\">UInt</a>::to_int(self : UInt) -> Int",
          "loc": { "line": 328, "column": 14 }
        },
        {
          "name": "to_string",
          "docstring": "",
          "signature": "fn <a href=\"moonbitlang/core/uint#UInt\">UInt</a>::to_string(self : UInt) -> String",
          "loc": { "line": 113, "column": 14 }
        },
        {
          "name": "to_uint64",
          "docstring": "",
          "signature": "fn <a href=\"moonbitlang/core/uint#UInt\">UInt</a>::to_uint64(self : UInt) -> UInt64",
          "loc": { "line": 402, "column": 14 }
        },
        {
          "name": "trunc_double",
          "docstring": "",
          "signature": "fn <a href=\"moonbitlang/core/uint#UInt\">UInt</a>::trunc_double(val : Double) -> UInt",
          "loc": { "line": 151, "column": 14 }
        },
        {
          "name": "upto",
          "docstring": "\n Creates an iterator that iterates over a range of UInt with default step 1U.\n \n # Arguments\n \n * `start` - The starting value of the range (inclusive).\n * `end` - The ending value of the range (exclusive).\n * `inclusive` - Whether the ending value is inclusive (default false).\n\n # Returns\n \n Returns an iterator that iterates over the range of UInt from `start` to `end - 1`.\n @alert deprecated \"Use `..<` in for loop or `until` method instead\"\n @coverage.skip",
          "signature": "fn <a href=\"moonbitlang/core/uint#UInt\">UInt</a>::upto(self : UInt, end : UInt, inclusive~ : Bool = ..) -> <a href=\"moonbitlang/core/builtin#Iter\">Iter</a>[UInt]",
          "loc": { "line": 60, "column": 8 }
        }
      ]
    },
    {
      "name": "Int64",
      "impls": [],
      "methods": [
        {
          "name": "asr",
          "docstring": "\n @alert deprecated \"Use infix operator `>>` instead\"\n @coverage.skip",
          "signature": "fn <a href=\"moonbitlang/core/int64#Int64\">Int64</a>::asr(self : Int64, other : Int) -> Int64",
          "loc": { "line": 63, "column": 15 }
        },
        {
          "name": "clz",
          "docstring": "",
          "signature": "fn <a href=\"moonbitlang/core/int64#Int64\">Int64</a>::clz(self : Int64) -> Int",
          "loc": { "line": 80, "column": 15 }
        },
        {
          "name": "compare",
          "docstring": "",
          "signature": "fn <a href=\"moonbitlang/core/int64#Int64\">Int64</a>::compare(self : Int64, other : Int64) -> Int",
          "loc": { "line": 89, "column": 15 }
        },
        {
          "name": "ctz",
          "docstring": "",
          "signature": "fn <a href=\"moonbitlang/core/int64#Int64\">Int64</a>::ctz(self : Int64) -> Int",
          "loc": { "line": 77, "column": 15 }
        },
        {
          "name": "default",
          "docstring": "",
          "signature": "fn <a href=\"moonbitlang/core/int64#Int64\">Int64</a>::default() -> Int64",
          "loc": { "line": 92, "column": 15 }
        },
        {
          "name": "land",
          "docstring": "",
          "signature": "fn <a href=\"moonbitlang/core/int64#Int64\">Int64</a>::land(self : Int64, other : Int64) -> Int64",
          "loc": { "line": 37, "column": 15 }
        },
        {
          "name": "lnot",
          "docstring": "",
          "signature": "fn <a href=\"moonbitlang/core/int64#Int64\">Int64</a>::lnot(self : Int64) -> Int64",
          "loc": { "line": 34, "column": 15 }
        },
        {
          "name": "lor",
          "docstring": "",
          "signature": "fn <a href=\"moonbitlang/core/int64#Int64\">Int64</a>::lor(self : Int64, other : Int64) -> Int64",
          "loc": { "line": 40, "column": 15 }
        },
        {
          "name": "lsl",
          "docstring": "\n @alert deprecated \"Use infix operator `<<` instead\"\n @coverage.skip",
          "signature": "fn <a href=\"moonbitlang/core/int64#Int64\">Int64</a>::lsl(self : Int64, other : Int) -> Int64",
          "loc": { "line": 48, "column": 15 }
        },
        {
          "name": "lsr",
          "docstring": "\n @alert deprecated \"Use UInt64 type and infix operator `>>` instead\"\n @coverage.skip",
          "signature": "fn <a href=\"moonbitlang/core/int64#Int64\">Int64</a>::lsr(self : Int64, other : Int) -> Int64",
          "loc": { "line": 58, "column": 15 }
        },
        {
          "name": "lxor",
          "docstring": "",
          "signature": "fn <a href=\"moonbitlang/core/int64#Int64\">Int64</a>::lxor(self : Int64, other : Int64) -> Int64",
          "loc": { "line": 43, "column": 15 }
        },
        {
          "name": "op_add",
          "docstring": "",
          "signature": "fn <a href=\"moonbitlang/core/int64#Int64\">Int64</a>::op_add(self : Int64, other : Int64) -> Int64",
          "loc": { "line": 19, "column": 15 }
        },
        {
          "name": "op_div",
          "docstring": "",
          "signature": "fn <a href=\"moonbitlang/core/int64#Int64\">Int64</a>::op_div(self : Int64, other : Int64) -> Int64",
          "loc": { "line": 28, "column": 15 }
        },
        {
          "name": "op_equal",
          "docstring": "",
          "signature": "fn <a href=\"moonbitlang/core/int64#Int64\">Int64</a>::op_equal(self : Int64, other : Int64) -> Bool",
          "loc": { "line": 86, "column": 15 }
        },
        {
          "name": "op_mod",
          "docstring": "",
          "signature": "fn <a href=\"moonbitlang/core/int64#Int64\">Int64</a>::op_mod(self : Int64, other : Int64) -> Int64",
          "loc": { "line": 31, "column": 15 }
        },
        {
          "name": "op_mul",
          "docstring": "",
          "signature": "fn <a href=\"moonbitlang/core/int64#Int64\">Int64</a>::op_mul(self : Int64, other : Int64) -> Int64",
          "loc": { "line": 25, "column": 15 }
        },
        {
          "name": "op_neg",
          "docstring": "",
          "signature": "fn <a href=\"moonbitlang/core/int64#Int64\">Int64</a>::op_neg(self : Int64) -> Int64",
          "loc": { "line": 16, "column": 15 }
        },
        {
          "name": "op_shl",
          "docstring": "",
          "signature": "fn <a href=\"moonbitlang/core/int64#Int64\">Int64</a>::op_shl(self : Int64, other : Int) -> Int64",
          "loc": { "line": 71, "column": 15 }
        },
        {
          "name": "op_shr",
          "docstring": "",
          "signature": "fn <a href=\"moonbitlang/core/int64#Int64\">Int64</a>::op_shr(self : Int64, other : Int) -> Int64",
          "loc": { "line": 74, "column": 15 }
        },
        {
          "name": "op_sub",
          "docstring": "",
          "signature": "fn <a href=\"moonbitlang/core/int64#Int64\">Int64</a>::op_sub(self : Int64, other : Int64) -> Int64",
          "loc": { "line": 22, "column": 15 }
        },
        {
          "name": "popcnt",
          "docstring": "",
          "signature": "fn <a href=\"moonbitlang/core/int64#Int64\">Int64</a>::popcnt(self : Int64) -> Int",
          "loc": { "line": 83, "column": 15 }
        },
        {
          "name": "reinterpret_as_double",
          "docstring": "",
          "signature": "fn <a href=\"moonbitlang/core/int64#Int64\">Int64</a>::reinterpret_as_double(self : Int64) -> Double",
          "loc": { "line": 101, "column": 15 }
        },
        {
          "name": "reinterpret_as_uint64",
          "docstring": "",
          "signature": "fn <a href=\"moonbitlang/core/int64#Int64\">Int64</a>::reinterpret_as_uint64(self : Int64) -> UInt64",
          "loc": { "line": 146, "column": 15 }
        },
        {
          "name": "shl",
          "docstring": "\n @alert deprecated \"Use infix operator `<<` instead\"\n @coverage.skip",
          "signature": "fn <a href=\"moonbitlang/core/int64#Int64\">Int64</a>::shl(self : Int64, other : Int) -> Int64",
          "loc": { "line": 53, "column": 15 }
        },
        {
          "name": "shr",
          "docstring": "\n @alert deprecated \"Use infix operator `>>` instead\"\n @coverage.skip",
          "signature": "fn <a href=\"moonbitlang/core/int64#Int64\">Int64</a>::shr(self : Int64, other : Int) -> Int64",
          "loc": { "line": 68, "column": 15 }
        },
        {
          "name": "to_byte",
          "docstring": "",
          "signature": "fn <a href=\"moonbitlang/core/int64#Int64\">Int64</a>::to_byte(self : Int64) -> Byte",
          "loc": { "line": 107, "column": 15 }
        },
        {
          "name": "to_double",
          "docstring": "",
          "signature": "fn <a href=\"moonbitlang/core/int64#Int64\">Int64</a>::to_double(self : Int64) -> Double",
          "loc": { "line": 98, "column": 15 }
        },
        {
          "name": "to_float",
          "docstring": "",
          "signature": "fn <a href=\"moonbitlang/core/int64#Int64\">Int64</a>::to_float(self : Int64) -> Float",
          "loc": { "line": 113, "column": 15 }
        },
        {
          "name": "to_int",
          "docstring": "",
          "signature": "fn <a href=\"moonbitlang/core/int64#Int64\">Int64</a>::to_int(self : Int64) -> Int",
          "loc": { "line": 95, "column": 15 }
        },
        {
          "name": "to_json",
          "docstring": "",
          "signature": "fn <a href=\"moonbitlang/core/int64#Int64\">Int64</a>::to_json(self : Int64) -> <a href=\"moonbitlang/core/json#Json\">Json</a>",
          "loc": { "line": 47, "column": 15 }
        },
        {
          "name": "to_string",
          "docstring": "",
          "signature": "fn <a href=\"moonbitlang/core/int64#Int64\">Int64</a>::to_string(self : Int64) -> String",
          "loc": { "line": 55, "column": 8 }
        },
        {
          "name": "to_uint64",
          "docstring": "\n @alert deprecated \"Use `reinterpret_as_uint64` instead\"\n @coverage.skip",
          "signature": "fn <a href=\"moonbitlang/core/int64#Int64\">Int64</a>::to_uint64(self : Int64) -> UInt64",
          "loc": { "line": 143, "column": 15 }
        },
        {
          "name": "until",
          "docstring": "\n Creates an iterator that iterates over a range of Int64 with default step 1L.\n To grow the range downward, set the `step` parameter to a negative value.\n\n # Arguments\n\n * `start` - The starting value of the range (inclusive).\n * `end` - The ending value of the range (exclusive by default).\n * `step` - The step size of the range (default 1L).\n * `inclusive` - Whether the ending value is inclusive (default false).\n\n # Returns\n\n Returns an iterator that iterates over the range of Int64 from `start` to `end - 1`.",
          "signature": "fn <a href=\"moonbitlang/core/int64#Int64\">Int64</a>::until(self : Int64, end : Int64, step~ : Int64 = .., inclusive~ : Bool = ..) -> <a href=\"moonbitlang/core/builtin#Iter\">Iter</a>[Int64]",
          "loc": { "line": 258, "column": 8 }
        },
        {
          "name": "upto",
          "docstring": "\n Creates an iterator that iterates over a range of Int64 with default step 1L.\n\n # Arguments\n\n * `start` - The starting value of the range (inclusive).\n * `end` - The ending value of the range (exclusive).\n * `inclusive` - Whether the ending value is inclusive (default false).\n\n # Returns\n\n Returns an iterator that iterates over the range of Int64 from `start` to `end - 1`.\n @alert deprecated \"Use `..<` in for loop or `until` method instead\"\n @coverage.skip",
          "signature": "fn <a href=\"moonbitlang/core/int64#Int64\">Int64</a>::upto(self : Int64, end : Int64, inclusive~ : Bool = ..) -> <a href=\"moonbitlang/core/builtin#Iter\">Iter</a>[Int64]",
          "loc": { "line": 126, "column": 8 }
        }
      ]
    },
    {
      "name": "Int",
      "impls": [],
      "methods": [
        {
          "name": "asr",
          "docstring": "\n @alert deprecated \"Use infix operator `>>` instead\"\n @coverage.skip",
          "signature": "fn <a href=\"moonbitlang/core/int#Int\">Int</a>::asr(self : Int, other : Int) -> Int",
          "loc": { "line": 110, "column": 13 }
        },
        {
          "name": "clz",
          "docstring": "",
          "signature": "fn <a href=\"moonbitlang/core/int#Int\">Int</a>::clz(self : Int) -> Int",
          "loc": { "line": 121, "column": 13 }
        },
        {
          "name": "compare",
          "docstring": "",
          "signature": "fn <a href=\"moonbitlang/core/int#Int\">Int</a>::compare(self : Int, other : Int) -> Int",
          "loc": { "line": 130, "column": 13 }
        },
        {
          "name": "ctz",
          "docstring": "",
          "signature": "fn <a href=\"moonbitlang/core/int#Int\">Int</a>::ctz(self : Int) -> Int",
          "loc": { "line": 118, "column": 13 }
        },
        {
          "name": "default",
          "docstring": "",
          "signature": "fn <a href=\"moonbitlang/core/int#Int\">Int</a>::default() -> Int",
          "loc": { "line": 145, "column": 13 }
        },
        {
          "name": "is_neg",
          "docstring": "",
          "signature": "fn <a href=\"moonbitlang/core/int#Int\">Int</a>::is_neg(self : Int) -> Bool",
          "loc": { "line": 136, "column": 13 }
        },
        {
          "name": "is_non_neg",
          "docstring": "",
          "signature": "fn <a href=\"moonbitlang/core/int#Int\">Int</a>::is_non_neg(self : Int) -> Bool",
          "loc": { "line": 142, "column": 13 }
        },
        {
          "name": "is_non_pos",
          "docstring": "",
          "signature": "fn <a href=\"moonbitlang/core/int#Int\">Int</a>::is_non_pos(self : Int) -> Bool",
          "loc": { "line": 139, "column": 13 }
        },
        {
          "name": "is_pos",
          "docstring": "",
          "signature": "fn <a href=\"moonbitlang/core/int#Int\">Int</a>::is_pos(self : Int) -> Bool",
          "loc": { "line": 133, "column": 13 }
        },
        {
          "name": "land",
          "docstring": "",
          "signature": "fn <a href=\"moonbitlang/core/int#Int\">Int</a>::land(self : Int, other : Int) -> Int",
          "loc": { "line": 76, "column": 13 }
        },
        {
          "name": "lnot",
          "docstring": "",
          "signature": "fn <a href=\"moonbitlang/core/int#Int\">Int</a>::lnot(self : Int) -> Int",
          "loc": { "line": 73, "column": 13 }
        },
        {
          "name": "lor",
          "docstring": "",
          "signature": "fn <a href=\"moonbitlang/core/int#Int\">Int</a>::lor(self : Int, other : Int) -> Int",
          "loc": { "line": 79, "column": 13 }
        },
        {
          "name": "lsl",
          "docstring": "\n @alert deprecated \"Use infix operator `<<` instead\"\n @coverage.skip",
          "signature": "fn <a href=\"moonbitlang/core/int#Int\">Int</a>::lsl(self : Int, other : Int) -> Int",
          "loc": { "line": 93, "column": 13 }
        },
        {
          "name": "lsr",
          "docstring": "\n @alert deprecated \"Use UInt type and infix operator `>>` instead\"\n @coverage.skip",
          "signature": "fn <a href=\"moonbitlang/core/int#Int\">Int</a>::lsr(self : Int, other : Int) -> Int",
          "loc": { "line": 103, "column": 13 }
        },
        {
          "name": "lxor",
          "docstring": "",
          "signature": "fn <a href=\"moonbitlang/core/int#Int\">Int</a>::lxor(self : Int, other : Int) -> Int",
          "loc": { "line": 82, "column": 13 }
        },
        {
          "name": "op_add",
          "docstring": "",
          "signature": "fn <a href=\"moonbitlang/core/int#Int\">Int</a>::op_add(self : Int, other : Int) -> Int",
          "loc": { "line": 58, "column": 13 }
        },
        {
          "name": "op_div",
          "docstring": "",
          "signature": "fn <a href=\"moonbitlang/core/int#Int\">Int</a>::op_div(self : Int, other : Int) -> Int",
          "loc": { "line": 67, "column": 13 }
        },
        {
          "name": "op_equal",
          "docstring": "",
          "signature": "fn <a href=\"moonbitlang/core/int#Int\">Int</a>::op_equal(self : Int, other : Int) -> Bool",
          "loc": { "line": 127, "column": 13 }
        },
        {
          "name": "op_mod",
          "docstring": "",
          "signature": "fn <a href=\"moonbitlang/core/int#Int\">Int</a>::op_mod(self : Int, other : Int) -> Int",
          "loc": { "line": 70, "column": 13 }
        },
        {
          "name": "op_mul",
          "docstring": "",
          "signature": "fn <a href=\"moonbitlang/core/int#Int\">Int</a>::op_mul(self : Int, other : Int) -> Int",
          "loc": { "line": 64, "column": 13 }
        },
        {
          "name": "op_neg",
          "docstring": "",
          "signature": "fn <a href=\"moonbitlang/core/int#Int\">Int</a>::op_neg(self : Int) -> Int",
          "loc": { "line": 55, "column": 13 }
        },
        {
          "name": "op_shl",
          "docstring": "",
          "signature": "fn <a href=\"moonbitlang/core/int#Int\">Int</a>::op_shl(self : Int, other : Int) -> Int",
          "loc": { "line": 85, "column": 13 }
        },
        {
          "name": "op_shr",
          "docstring": "",
          "signature": "fn <a href=\"moonbitlang/core/int#Int\">Int</a>::op_shr(self : Int, other : Int) -> Int",
          "loc": { "line": 88, "column": 13 }
        },
        {
          "name": "op_sub",
          "docstring": "",
          "signature": "fn <a href=\"moonbitlang/core/int#Int\">Int</a>::op_sub(self : Int, other : Int) -> Int",
          "loc": { "line": 61, "column": 13 }
        },
        {
          "name": "popcnt",
          "docstring": "",
          "signature": "fn <a href=\"moonbitlang/core/int#Int\">Int</a>::popcnt(self : Int) -> Int",
          "loc": { "line": 124, "column": 13 }
        },
        {
          "name": "reinterpret_as_float",
          "docstring": "",
          "signature": "fn <a href=\"moonbitlang/core/int#Int\">Int</a>::reinterpret_as_float(self : Int) -> Float",
          "loc": { "line": 452, "column": 13 }
        },
        {
          "name": "reinterpret_as_uint",
          "docstring": "\n reinterpret the signed int as unsigned int, when the value is \n non-negative, i.e, 0..=2^31-1, the value is the same. When the \n value is negative, it turns into a large number, \n for example, -1 turns into 2^32-1",
          "signature": "fn <a href=\"moonbitlang/core/int#Int\">Int</a>::reinterpret_as_uint(self : Int) -> UInt",
          "loc": { "line": 158, "column": 13 }
        },
        {
          "name": "shl",
          "docstring": "\n @alert deprecated \"Use infix operator `<<` instead\" \n @coverage.skip",
          "signature": "fn <a href=\"moonbitlang/core/int#Int\">Int</a>::shl(self : Int, other : Int) -> Int",
          "loc": { "line": 98, "column": 13 }
        },
        {
          "name": "shr",
          "docstring": "\n @alert deprecated \"Use infix operator `>>` instead\"\n @coverage.skip",
          "signature": "fn <a href=\"moonbitlang/core/int#Int\">Int</a>::shr(self : Int, other : Int) -> Int",
          "loc": { "line": 115, "column": 13 }
        },
        {
          "name": "to_byte",
          "docstring": "",
          "signature": "fn <a href=\"moonbitlang/core/int#Int\">Int</a>::to_byte(self : Int) -> Byte",
          "loc": { "line": 254, "column": 13 }
        },
        {
          "name": "to_double",
          "docstring": "",
          "signature": "fn <a href=\"moonbitlang/core/int#Int\">Int</a>::to_double(self : Int) -> Double",
          "loc": { "line": 148, "column": 13 }
        },
        {
          "name": "to_float",
          "docstring": "",
          "signature": "fn <a href=\"moonbitlang/core/int#Int\">Int</a>::to_float(self : Int) -> Float",
          "loc": { "line": 449, "column": 13 }
        },
        {
          "name": "to_int64",
          "docstring": "",
          "signature": "fn <a href=\"moonbitlang/core/int#Int\">Int</a>::to_int64(self : Int) -> Int64",
          "loc": { "line": 119, "column": 13 }
        },
        {
          "name": "to_json",
          "docstring": "",
          "signature": "fn <a href=\"moonbitlang/core/int#Int\">Int</a>::to_json(self : Int) -> <a href=\"moonbitlang/core/json#Json\">Json</a>",
          "loc": { "line": 42, "column": 13 }
        },
        {
          "name": "to_string",
          "docstring": "",
          "signature": "fn <a href=\"moonbitlang/core/int#Int\">Int</a>::to_string(self : Int) -> String",
          "loc": { "line": 84, "column": 8 }
        },
        {
          "name": "to_uint",
          "docstring": "\n @alert deprecated \"Use `reinterpret_as_uint` instead\"\n @coverage.skip",
          "signature": "fn <a href=\"moonbitlang/core/int#Int\">Int</a>::to_uint(self : Int) -> UInt",
          "loc": { "line": 163, "column": 13 }
        },
        {
          "name": "to_uint64",
          "docstring": "",
          "signature": "fn <a href=\"moonbitlang/core/int#Int\">Int</a>::to_uint64(self : Int) -> UInt64",
          "loc": { "line": 167, "column": 13 }
        },
        {
          "name": "until",
          "docstring": "\n Creates an iterator that iterates over a range of Int with default step 1.\n To grow the range downward, set the `step` parameter to a negative value.\n\n # Arguments\n\n * `start` - The starting value of the range (inclusive).\n * `end` - The ending value of the range (exclusive by default).\n * `step` - The step size of the range (default 1).\n * `inclusive` - Whether the ending value is inclusive (default false).\n\n # Returns\n\n Returns an iterator that iterates over the range of Int from `start` to `end - 1`.",
          "signature": "fn <a href=\"moonbitlang/core/int#Int\">Int</a>::until(self : Int, end : Int, step~ : Int = .., inclusive~ : Bool = ..) -> <a href=\"moonbitlang/core/builtin#Iter\">Iter</a>[Int]",
          "loc": { "line": 215, "column": 8 }
        },
        {
          "name": "upto",
          "docstring": "\n Creates an iterator that iterates over a range of Int with default step 1.\n\n # Arguments\n\n * `start` - The starting value of the range (inclusive).\n * `end` - The ending value of the range (exclusive).\n * `inclusive` - Whether the ending value is inclusive (default false).\n\n # Returns\n\n Returns an iterator that iterates over the range of Int from `start` to `end - 1`.\n @alert deprecated \"Use `..<` in for loop or `until` method instead\"\n @coverage.skip",
          "signature": "fn <a href=\"moonbitlang/core/int#Int\">Int</a>::upto(self : Int, end : Int, inclusive~ : Bool = ..) -> <a href=\"moonbitlang/core/builtin#Iter\">Iter</a>[Int]",
          "loc": { "line": 29, "column": 8 }
        }
      ]
    },
    {
      "name": "Char",
      "impls": [],
      "methods": [
        {
          "name": "compare",
          "docstring": "",
          "signature": "fn <a href=\"moonbitlang/core/char#Char\">Char</a>::compare(self : Char, other : Char) -> Int",
          "loc": { "line": 224, "column": 14 }
        },
        {
          "name": "default",
          "docstring": "",
          "signature": "fn <a href=\"moonbitlang/core/char#Char\">Char</a>::default() -> Char",
          "loc": { "line": 227, "column": 14 }
        },
        {
          "name": "from_int",
          "docstring": "",
          "signature": "fn <a href=\"moonbitlang/core/char#Char\">Char</a>::from_int(val : Int) -> Char",
          "loc": { "line": 218, "column": 14 }
        },
        {
          "name": "op_equal",
          "docstring": "",
          "signature": "fn <a href=\"moonbitlang/core/char#Char\">Char</a>::op_equal(self : Char, other : Char) -> Bool",
          "loc": { "line": 221, "column": 14 }
        },
        {
          "name": "op_sub",
          "docstring": "",
          "signature": "fn <a href=\"moonbitlang/core/char#Char\">Char</a>::op_sub(self : Char, that : Char) -> Int",
          "loc": { "line": 16, "column": 8 }
        },
        {
          "name": "to_int",
          "docstring": "",
          "signature": "fn <a href=\"moonbitlang/core/char#Char\">Char</a>::to_int(self : Char) -> Int",
          "loc": { "line": 210, "column": 14 }
        },
        {
          "name": "to_json",
          "docstring": "",
          "signature": "fn <a href=\"moonbitlang/core/char#Char\">Char</a>::to_json(self : Char) -> <a href=\"moonbitlang/core/json#Json\">Json</a>",
          "loc": { "line": 108, "column": 14 }
        },
        {
          "name": "to_string",
          "docstring": "\n Convert Char to String\n @intrinsic %char.to_string",
          "signature": "fn <a href=\"moonbitlang/core/char#Char\">Char</a>::to_string(self : Char) -> String",
          "loc": { "line": 221, "column": 8 }
        },
        {
          "name": "to_uint",
          "docstring": "",
          "signature": "fn <a href=\"moonbitlang/core/char#Char\">Char</a>::to_uint(self : Char) -> UInt",
          "loc": { "line": 213, "column": 14 }
        }
      ]
    },
    {
      "name": "Byte",
      "impls": [],
      "methods": [
        {
          "name": "compare",
          "docstring": "\n Compares two `Byte` values and returns an integer indicating their relative\n order.\n\n Parameters:\n\n - `byte1` : The first `Byte` value to compare.\n - `byte2` : The second `Byte` value to compare.\n\n Returns an integer where:\n - A value less than 0 indicates that `byte1` is less than `byte2`.\n - A value of 0 indicates that `byte1` is equal to `byte2`.\n - A value greater than 0 indicates that `byte1` is greater than `byte2`.",
          "signature": "fn <a href=\"moonbitlang/core/byte#Byte\">Byte</a>::compare(self : Byte, that : Byte) -> Int",
          "loc": { "line": 78, "column": 8 }
        },
        {
          "name": "default",
          "docstring": "\n Returns the default value for a `Byte`, which is `b'\\x00'`.\n\n Parameters:\n\n - None\n\n Returns the default `Byte` value, which is `b'\\x00'`.",
          "signature": "fn <a href=\"moonbitlang/core/byte#Byte\">Byte</a>::default() -> Byte",
          "loc": { "line": 137, "column": 14 }
        },
        {
          "name": "land",
          "docstring": "\n Performs a bitwise AND operation between two `Byte` values.\n\n Parameters:\n\n - `byte1` : The first `Byte` value to perform the bitwise AND operation with.\n - `byte2` : The second `Byte` value to perform the bitwise AND operation\n   with.\n\n Returns the result of the bitwise AND operation as a `Byte`.",
          "signature": "fn <a href=\"moonbitlang/core/byte#Byte\">Byte</a>::land(self : Byte, that : Byte) -> Byte",
          "loc": { "line": 163, "column": 14 }
        },
        {
          "name": "lnot",
          "docstring": "\n Performs a bitwise NOT operation on the given `Byte` value.\n\n Parameters:\n\n - `value` : The `Byte` value to apply the bitwise NOT operation on.\n\n Returns the result of the bitwise NOT operation as a `Byte`.",
          "signature": "fn <a href=\"moonbitlang/core/byte#Byte\">Byte</a>::lnot(self : Byte) -> Byte",
          "loc": { "line": 149, "column": 14 }
        },
        {
          "name": "lor",
          "docstring": "\n Performs a bitwise OR operation between two `Byte` values.\n\n Parameters:\n\n - `self` : The first `Byte` value.\n - `that` : The second `Byte` value.\n\n Returns a new `Byte` value resulting from the bitwise OR operation.",
          "signature": "fn <a href=\"moonbitlang/core/byte#Byte\">Byte</a>::lor(self : Byte, that : Byte) -> Byte",
          "loc": { "line": 176, "column": 14 }
        },
        {
          "name": "lsl",
          "docstring": "\n positions.\n\n Parameters:\n\n - `byte_value` : The `Byte` value whose bits are to be shifted.\n - `shift_count` : The number of bit positions to shift the `byte_value` to\n   the left.\n\n Returns the resulting `Byte` value after the bitwise left shift operation.\n \n @alert deprecated \"Use infix operator `<<` instead\"\n @coverage.skip",
          "signature": "fn <a href=\"moonbitlang/core/byte#Byte\">Byte</a>::lsl(self : Byte, count : Int) -> Byte",
          "loc": { "line": 248, "column": 14 }
        },
        {
          "name": "lsr",
          "docstring": "\n bits.\n\n Parameters:\n\n - `value` : The `Byte` value to be shifted.\n - `count` : The number of bits to shift the `value` to the right.\n\n Returns the result of the logical shift right operation as a `Byte`.\n\n @alert deprecated \"Use infix operator `>>` instead\"\n @coverage.skip",
          "signature": "fn <a href=\"moonbitlang/core/byte#Byte\">Byte</a>::lsr(self : Byte, count : Int) -> Byte",
          "loc": { "line": 264, "column": 14 }
        },
        {
          "name": "lxor",
          "docstring": "\n Performs a bitwise XOR operation between two `Byte` values.\n\n Parameters:\n\n - `self` : The first `Byte` value.\n - `that` : The second `Byte` value.\n\n Returns the result of the bitwise XOR operation as a `Byte`.",
          "signature": "fn <a href=\"moonbitlang/core/byte#Byte\">Byte</a>::lxor(self : Byte, that : Byte) -> Byte",
          "loc": { "line": 189, "column": 14 }
        },
        {
          "name": "op_add",
          "docstring": "\n Adds two `Byte` values together and returns the result as a `Byte`.\n\n Parameters:\n\n - `byte1` : The first `Byte` value to be added.\n - `byte2` : The second `Byte` value to be added.\n\n Returns the sum of `byte1` and `byte2` as a `Byte`.",
          "signature": "fn <a href=\"moonbitlang/core/byte#Byte\">Byte</a>::op_add(self : Byte, that : Byte) -> Byte",
          "loc": { "line": 47, "column": 8 }
        },
        {
          "name": "op_div",
          "docstring": "",
          "signature": "fn <a href=\"moonbitlang/core/byte#Byte\">Byte</a>::op_div(self : Byte, that : Byte) -> Byte",
          "loc": { "line": 21, "column": 8 }
        },
        {
          "name": "op_equal",
          "docstring": "\n Compares two `Byte` values for equality.\n\n Parameters:\n\n - `self` : The first `Byte` value to compare.\n - `that` : The second `Byte` value to compare.\n\n Returns `true` if the two `Byte` values are equal, otherwise `false`.",
          "signature": "fn <a href=\"moonbitlang/core/byte#Byte\">Byte</a>::op_equal(self : Byte, that : Byte) -> Bool",
          "loc": { "line": 34, "column": 8 }
        },
        {
          "name": "op_mul",
          "docstring": "",
          "signature": "fn <a href=\"moonbitlang/core/byte#Byte\">Byte</a>::op_mul(self : Byte, that : Byte) -> Byte",
          "loc": { "line": 16, "column": 8 }
        },
        {
          "name": "op_shl",
          "docstring": "\n Shifts the bits of the `Byte` value to the left by the specified number of\n positions.\n\n Parameters:\n\n - `byte_value` : The `Byte` value whose bits are to be shifted.\n - `shift_count` : The number of bit positions to shift the `byte_value` to\n   the left.\n\n Returns the resulting `Byte` value after the shift operation.",
          "signature": "fn <a href=\"moonbitlang/core/byte#Byte\">Byte</a>::op_shl(self : Byte, count : Int) -> Byte",
          "loc": { "line": 216, "column": 14 }
        },
        {
          "name": "op_shr",
          "docstring": "\n Shifts the bits of the `Byte` value to the right by the specified number of\n positions.\n\n Parameters:\n\n - `byte` : The `Byte` value whose bits are to be shifted.\n - `count` : The number of bit positions to shift the `byte` value to the\n   right.\n\n Returns the resulting `Byte` value after the bitwise right shift operation.",
          "signature": "fn <a href=\"moonbitlang/core/byte#Byte\">Byte</a>::op_shr(self : Byte, count : Int) -> Byte",
          "loc": { "line": 231, "column": 14 }
        },
        {
          "name": "op_sub",
          "docstring": "\n Subtracts the second byte from the first byte and returns the result as a\n byte.\n\n Parameters:\n\n - `self` : The byte from which the second byte will be subtracted.\n - `that` : The byte to subtract from the first byte.\n\n Returns the result of the subtraction as a byte.",
          "signature": "fn <a href=\"moonbitlang/core/byte#Byte\">Byte</a>::op_sub(self : Byte, that : Byte) -> Byte",
          "loc": { "line": 61, "column": 8 }
        },
        {
          "name": "to_float",
          "docstring": "",
          "signature": "fn <a href=\"moonbitlang/core/byte#Byte\">Byte</a>::to_float(self : Byte) -> Float",
          "loc": { "line": 458, "column": 14 }
        },
        {
          "name": "to_int",
          "docstring": "",
          "signature": "fn <a href=\"moonbitlang/core/byte#Byte\">Byte</a>::to_int(self : Byte) -> Int",
          "loc": { "line": 311, "column": 14 }
        },
        {
          "name": "to_int64",
          "docstring": "",
          "signature": "fn <a href=\"moonbitlang/core/byte#Byte\">Byte</a>::to_int64(self : Byte) -> Int64",
          "loc": { "line": 314, "column": 14 }
        },
        {
          "name": "to_string",
          "docstring": "\n Converts a `Byte` to its string representation in hexadecimal format.\n\n Parameters:\n\n - `byte` : The `Byte` value to be converted.\n\n Returns a `String` representing the `Byte` in the format `b'\\xHH'`, where\n `HH` is the hexadecimal representation of the byte.",
          "signature": "fn <a href=\"moonbitlang/core/byte#Byte\">Byte</a>::to_string(self : Byte) -> String",
          "loc": { "line": 114, "column": 8 }
        },
        {
          "name": "to_uint",
          "docstring": "\n Converts a `Byte` to a `UInt`.\n\n Parameters:\n\n - `byte` : The `Byte` value to be converted.\n\n Returns the `UInt` representation of the `Byte`.",
          "signature": "fn <a href=\"moonbitlang/core/byte#Byte\">Byte</a>::to_uint(self : Byte) -> UInt",
          "loc": { "line": 201, "column": 14 }
        }
      ]
    },
    {
      "name": "Bool",
      "impls": [],
      "methods": [
        {
          "name": "compare",
          "docstring": "",
          "signature": "fn <a href=\"moonbitlang/core/bool#Bool\">Bool</a>::compare(self : Bool, other : Bool) -> Int",
          "loc": { "line": 47, "column": 14 }
        },
        {
          "name": "default",
          "docstring": "",
          "signature": "fn <a href=\"moonbitlang/core/bool#Bool\">Bool</a>::default() -> Bool",
          "loc": { "line": 50, "column": 14 }
        },
        {
          "name": "not",
          "docstring": " @alert deprecated \"Use `not(x)` instead\"",
          "signature": "fn <a href=\"moonbitlang/core/bool#Bool\">Bool</a>::not(self : Bool) -> Bool",
          "loc": { "line": 36, "column": 14 }
        },
        {
          "name": "op_compare",
          "docstring": "\n @alert deprecated \"Use `compare` instead\"\n @coverage.skip",
          "signature": "fn <a href=\"moonbitlang/core/bool#Bool\">Bool</a>::op_compare(self : Bool, other : Bool) -> Int",
          "loc": { "line": 44, "column": 14 }
        },
        {
          "name": "op_equal",
          "docstring": "",
          "signature": "fn <a href=\"moonbitlang/core/bool#Bool\">Bool</a>::op_equal(self : Bool, other : Bool) -> Bool",
          "loc": { "line": 39, "column": 14 }
        },
        {
          "name": "to_json",
          "docstring": "",
          "signature": "fn <a href=\"moonbitlang/core/bool#Bool\">Bool</a>::to_json(self : Bool) -> <a href=\"moonbitlang/core/json#Json\">Json</a>",
          "loc": { "line": 33, "column": 14 }
        },
        {
          "name": "to_string",
          "docstring": "",
          "signature": "fn <a href=\"moonbitlang/core/bool#Bool\">Bool</a>::to_string(self : Bool) -> String",
          "loc": { "line": 46, "column": 8 }
        }
      ]
    },
    {
      "name": "Unit",
      "impls": [],
      "methods": [
        {
          "name": "op_equal",
          "docstring": "",
          "signature": "fn <a href=\"moonbitlang/core/unit#Unit\">Unit</a>::op_equal(self : Unit, _other : Unit) -> Bool",
          "loc": { "line": 16, "column": 8 }
        },
        {
          "name": "to_json",
          "docstring": "",
          "signature": "fn <a href=\"moonbitlang/core/unit#Unit\">Unit</a>::to_json(_self : Unit) -> <a href=\"moonbitlang/core/json#Json\">Json</a>",
          "loc": { "line": 186, "column": 14 }
        }
      ]
    }
  ]
}