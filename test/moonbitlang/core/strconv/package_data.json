{
  "readme": "# Strconv\n\nThis package implements conversions to and from string representations of basic data types.\n\n# Usage\n\n## Parse\n\nUse `parse_bool`, `parse_double`, `parse_int`, and `parse_int64` convert strings to values.\n\n```moonbit\nlet b = @strconv.parse_bool(\"true\")?         // true\nlet i1 = @strconv.parse_int(\"1234567\")?      // 1234567\nlet i2 = @strconv.parse_int(\"101\", 2)?       // 5\nlet d = @strconv.parse_double(\"123.4567\")?   // 123.4567\n```\n\nFor types that implement the `FromStr` trait, you can also use helper function `parse` to convert a string to a value.\n\n```moonbit\nlet a : Int = @strconv.parse?(\"123\").unwrap()   // 123 \nlet b : Bool = @strconv.parse?(\"true\").unwrap() // true\n```\n",
  "name": "moonbitlang/core/strconv",
  "traits": [
    {
      "name": "FromStr",
      "docstring": "",
      "signature": "pub(open) trait FromStr {\n  from_string(String) -> Self!<a href=\"moonbitlang/core/strconv#StrConvError\">StrConvError</a>\n}",
      "loc": { "line": 22, "column": 1 },
      "impls": [
        {
          "name": "from_string",
          "docstring": "",
          "signature": "impl <a href=\"moonbitlang/core/strconv#FromStr\">FromStr</a> for <a href=\"moonbitlang/core/bool#Bool\">Bool</a> with from_string(str : String) -> Bool!<a href=\"moonbitlang/core/strconv#StrConvError\">StrConvError</a>",
          "loc": { "line": 27, "column": 32 }
        },
        {
          "name": "from_string",
          "docstring": "",
          "signature": "impl <a href=\"moonbitlang/core/strconv#FromStr\">FromStr</a> for <a href=\"moonbitlang/core/int#Int\">Int</a> with from_string(str : String) -> Int!<a href=\"moonbitlang/core/strconv#StrConvError\">StrConvError</a>",
          "loc": { "line": 30, "column": 31 }
        },
        {
          "name": "from_string",
          "docstring": "",
          "signature": "impl <a href=\"moonbitlang/core/strconv#FromStr\">FromStr</a> for <a href=\"moonbitlang/core/int64#Int64\">Int64</a> with from_string(str : String) -> Int64!<a href=\"moonbitlang/core/strconv#StrConvError\">StrConvError</a>",
          "loc": { "line": 33, "column": 33 }
        },
        {
          "name": "from_string",
          "docstring": "",
          "signature": "impl <a href=\"moonbitlang/core/strconv#FromStr\">FromStr</a> for <a href=\"moonbitlang/core/double#Double\">Double</a> with from_string(str : String) -> Double!<a href=\"moonbitlang/core/strconv#StrConvError\">StrConvError</a>",
          "loc": { "line": 36, "column": 34 }
        }
      ]
    }
  ],
  "types": [
    {
      "name": "Decimal",
      "docstring": "\n High Precision Decimal structure for \"Simple Decimal Conversion\" algorithm.\n Developed by Ken. Thompson, Russ Cox, Robert Griesemer, Nigel Tao.\n \n reference:\n - <https://nigeltao.github.io/blog/2020/parse-number-f64-simple.html>\n - <https://nigeltao.github.io/blog/2020/eisel-lemire.html>",
      "signature": "type Decimal",
      "loc": { "line": 22, "column": 8 },
      "methods": [
        {
          "name": "from_int64",
          "docstring": "\n Create a decimal with an Int64 value.",
          "signature": "fn <a href=\"moonbitlang/core/strconv#Decimal\">Decimal</a>::from_int64(v : Int64) -> <a href=\"moonbitlang/core/strconv#Decimal\">Decimal</a>",
          "loc": { "line": 56, "column": 17 }
        },
        {
          "name": "new",
          "docstring": "\n Create a zero decimal.",
          "signature": "fn <a href=\"moonbitlang/core/strconv#Decimal\">Decimal</a>::new() -> <a href=\"moonbitlang/core/strconv#Decimal\">Decimal</a>",
          "loc": { "line": 44, "column": 17 }
        },
        {
          "name": "parse_decimal",
          "docstring": "\n Create a decimal from number string.",
          "signature": "fn <a href=\"moonbitlang/core/strconv#Decimal\">Decimal</a>::parse_decimal(str : String) -> <a href=\"moonbitlang/core/strconv#Decimal\">Decimal</a>!<a href=\"moonbitlang/core/strconv#StrConvError\">StrConvError</a>",
          "loc": { "line": 62, "column": 17 }
        },
        {
          "name": "shift",
          "docstring": "\n Binary shift left (s > 0) or right (s < 0).\n The shift count must not larger than the max_shift to avoid overflow.",
          "signature": "fn <a href=\"moonbitlang/core/strconv#Decimal\">Decimal</a>::shift(self : <a href=\"moonbitlang/core/strconv#Decimal\">Decimal</a>, s : Int) -> Unit",
          "loc": { "line": 234, "column": 8 }
        },
        {
          "name": "to_double",
          "docstring": "\n Convert the decimal to Double.",
          "signature": "fn <a href=\"moonbitlang/core/strconv#Decimal\">Decimal</a>::to_double(self : <a href=\"moonbitlang/core/strconv#Decimal\">Decimal</a>) -> Double!<a href=\"moonbitlang/core/strconv#StrConvError\">StrConvError</a>",
          "loc": { "line": 148, "column": 8 }
        }
      ],
      "impls": []
    },
    {
      "name": "StrConvError",
      "docstring": "",
      "signature": "pub(all) type! StrConvError String\n",
      "loc": { "line": 16, "column": 16 },
      "methods": [
        {
          "name": "output",
          "docstring": "",
          "signature": "fn <a href=\"moonbitlang/core/strconv#StrConvError\">StrConvError</a>::output(self : <a href=\"moonbitlang/core/strconv#StrConvError\">StrConvError</a>, logger : <a href=\"moonbitlang/core/builtin#Logger\">Logger</a>) -> Unit",
          "loc": { "line": 19, "column": 37 }
        },
        {
          "name": "to_string",
          "docstring": "",
          "signature": "fn <a href=\"moonbitlang/core/strconv#StrConvError\">StrConvError</a>::to_string[Self : <a href=\"moonbitlang/core/builtin#Show\">Show</a>](self : Self) -> String",
          "loc": { "line": 85, "column": 1 }
        }
      ],
      "impls": [
        {
          "name": "output",
          "docstring": "",
          "signature": "impl <a href=\"moonbitlang/core/builtin#Show\">Show</a> for <a href=\"moonbitlang/core/strconv#StrConvError\">StrConvError</a> with output(self : <a href=\"moonbitlang/core/strconv#StrConvError\">StrConvError</a>, logger : <a href=\"moonbitlang/core/builtin#Logger\">Logger</a>) -> Unit",
          "loc": { "line": 19, "column": 37 }
        }
      ]
    }
  ],
  "typealias": [],
  "values": [
    {
      "name": "parse",
      "docstring": "",
      "signature": "fn parse[A : <a href=\"moonbitlang/core/strconv#FromStr\">FromStr</a>](str : String) -> A!<a href=\"moonbitlang/core/strconv#StrConvError\">StrConvError</a>",
      "loc": { "line": 39, "column": 8 }
    },
    {
      "name": "parse_bool",
      "docstring": "\n Parse a string and return the represented boolean value or an error.",
      "signature": "fn parse_bool(str : String) -> Bool!<a href=\"moonbitlang/core/strconv#StrConvError\">StrConvError</a>",
      "loc": { "line": 17, "column": 8 }
    },
    {
      "name": "parse_double",
      "docstring": "",
      "signature": "fn parse_double(str : String) -> Double!<a href=\"moonbitlang/core/strconv#StrConvError\">StrConvError</a>",
      "loc": { "line": 49, "column": 8 }
    },
    {
      "name": "parse_int",
      "docstring": "\n Parse a string in the given base (0, 2 to 36), return a Int number or an error.\n If the `~base` argument is 0, the base will be inferred by the prefix.",
      "signature": "fn parse_int(str : String, base~ : Int = ..) -> Int!<a href=\"moonbitlang/core/strconv#StrConvError\">StrConvError</a>",
      "loc": { "line": 103, "column": 8 }
    },
    {
      "name": "parse_int64",
      "docstring": "\n Parse a string in the given base (0, 2 to 36), return a Int64 number or an error.\n If the `~base` argument is 0, the base will be inferred by the prefix.",
      "signature": "fn parse_int64(str : String, base~ : Int = ..) -> Int64!<a href=\"moonbitlang/core/strconv#StrConvError\">StrConvError</a>",
      "loc": { "line": 30, "column": 8 }
    }
  ],
  "misc": []
}