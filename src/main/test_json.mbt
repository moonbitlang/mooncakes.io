let package_info : Json = {
  "name": "wasm4",
  "traits": [],
  "types": [
    {
      "name": "T",
      "docstring": "",
      "signature": "pub enum T {\n  Nil\n  Cons(A, <a href=\"list#T\">T</a>[A])\n}",
      "loc": { "line": 2, "column": 15 },
      "methods": [
        {
          "name": "all",
          "docstring": " Test if all elements of the list satisfy the predicate.",
          "signature": "fn <a href=\"list#T\">T</a>::all[A](self : <a href=\"list#T\">T</a>[A], f : (A) -> Bool) -> Bool",
          "loc": { "line": 143, "column": 8 },
        },
        {
          "name": "any",
          "docstring": " Test if any element of the list satisfies the predicate.",
          "signature": "fn <a href=\"list#T\">T</a>::any[A](self : <a href=\"list#T\">T</a>[A], f : (A) -> Bool) -> Bool",
          "loc": { "line": 151, "column": 8 },
        },
        {
          "name": "concat",
          "docstring": " Concatenate two lists.\n\n # Example\n\n ```\n let ls = of([1, 2, 3, 4, 5]).concat(from_array([6, 7, 8, 9, 10]))\n println(ls) // output: from_array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n ```",
          "signature": "fn <a href=\"list#T\">T</a>::concat[A](self : <a href=\"list#T\">T</a>[A], other : <a href=\"list#T\">T</a>[A]) -> <a href=\"list#T\">T</a>[A]",
          "loc": { "line": 247, "column": 8 },
        },
        {
          "name": "concat_map",
          "docstring": " map over the list and concat all results.\n\n `concat_map(f, ls)` equal to `ls.map(f).fold(Nil, fn(acc, x) { acc.concat(x) })))`\n\n # Example\n\n ```\n let ls = from_array([1, 2, 3])\n let r = ls.concat_map(fn(x) { [x, x * 2] })\n println(r) // output: from_array([1, 2, 2, 4, 3, 6])\n ```\n @alert deprecated \"Use `flat_map` instead\"",
          "signature": "fn <a href=\"list#T\">T</a>::concat_map[A, B](self : <a href=\"list#T\">T</a>[A], f : (A) -> <a href=\"list#T\">T</a>[B]) -> <a href=\"list#T\">T</a>[B]",
          "loc": { "line": 354, "column": 8 },
        },
        {
          "name": "contains",
          "docstring": " Check if the list contains the value.",
          "signature": "fn <a href=\"list#T\">T</a>::contains[A : <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>](self : <a href=\"list#T\">T</a>[A], value : A) -> Bool",
          "loc": { "line": 530, "column": 8 },
        },
        {
          "name": "default",
          "docstring": " The empty list",
          "signature": "fn <a href=\"list#T\">T</a>::default[X]() -> <a href=\"list#T\">T</a>[X]",
          "loc": { "line": 821, "column": 11 },
        },
        {
          "name": "drop",
          "docstring": " Drop first n elements of the list.\n\n # Example\n\n ```\n of([1, 2, 3, 4, 5]).drop(3)\n ```",
          "signature": "fn <a href=\"list#T\">T</a>::drop[A](self : <a href=\"list#T\">T</a>[A], n : Int) -> <a href=\"list#T\">T</a>[A]",
          "loc": { "line": 582, "column": 8 },
        },
        {
          "name": "drop_while",
          "docstring": " Drop the longest prefix of a list of elements that satisfies a given predicate.\n\n # Example\n\n ```\n from_array([1, 2, 3, 4]).drop_while(fn(x) { x < 3 })\n ```",
          "signature": "fn <a href=\"list#T\">T</a>::drop_while[A](self : <a href=\"list#T\">T</a>[A], p : (A) -> Bool) -> <a href=\"list#T\">T</a>[A]",
          "loc": { "line": 619, "column": 8 },
        },
        {
          "name": "each",
          "docstring": " Iterates over the list.\n\n # Example\n\n ```\n @immut/list.of([1, 2, 3, 4, 5]).each(print) \n ```",
          "signature": "fn <a href=\"list#T\">T</a>::each[A](self : <a href=\"list#T\">T</a>[A], f : (A) -> Unit) -> Unit",
          "loc": { "line": 55, "column": 8 },
        },
        {
          "name": "eachi",
          "docstring": " Iterates over the list with index.\n\n # Example\n\n ```\n @immut/list.of([1, 2, 3, 4, 5]).eachi(fn(i, x) { print(\"(\\(i),\\(x)) \") })\n // output: (0,1) (1,2) (2,3) (3,4) (4,5)\n ```",
          "signature": "fn <a href=\"list#T\">T</a>::eachi[A](self : <a href=\"list#T\">T</a>[A], f : (Int, A) -> Unit) -> Unit",
          "loc": { "line": 73, "column": 8 },
        },
        {
          "name": "equal",
          "docstring": " Compares two lists for equality.\n\n # Example\n\n ```\n println(of([1, 2, 3]).equal(of([1, 2, 3])))\n // output: true\n ```",
          "signature": "fn <a href=\"list#T\">T</a>::equal[A : <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>](self : <a href=\"list#T\">T</a>[A], other : <a href=\"list#T\">T</a>[A]) -> Bool",
          "loc": { "line": 785, "column": 8 },
        },
        {
          "name": "filter",
          "docstring": " Filter the list.\n\n # Example\n\n ```\n println(of([1, 2, 3, 4, 5]).filter(fn(x){ x % 2 == 0}))\n // output: from_array([2, 4])\n ```",
          "signature": "fn <a href=\"list#T\">T</a>::filter[A](self : <a href=\"list#T\">T</a>[A], f : (A) -> Bool) -> <a href=\"list#T\">T</a>[A]",
          "loc": { "line": 130, "column": 8 },
        },
        {
          "name": "find",
          "docstring": " Find the first element in the list that satisfies f.\n\n # Example\n\n ```\n println(of([1, 3, 5, 8]).find(fn(element) -> Bool { element % 2 == 0}))\n // output: Some(8)\n ```",
          "signature": "fn <a href=\"list#T\">T</a>::find[A](self : <a href=\"list#T\">T</a>[A], f : (A) -> Bool) -> A?",
          "loc": { "line": 686, "column": 8 },
        },
        {
          "name": "findi",
          "docstring": " Find the first element in the list that satisfies f and passes the index as an argument.\n\n # Example\n\n ```\n println(of([1, 3, 5, 8]).findi(fn(element) -> Bool { (element % 2 == 0) && (i == 3) }))\n // output: Some(8)\n\n println(of([1, 3, 8, 5]).findi(fn(element) -> Bool { (element % 2 == 0) && (i == 3) }))\n // output: None\n ```",
          "signature": "fn <a href=\"list#T\">T</a>::findi[A](self : <a href=\"list#T\">T</a>[A], f : (A, Int) -> Bool) -> A?",
          "loc": { "line": 709, "column": 8 },
        },
        {
          "name": "flat_map",
          "docstring": " map over the list and concat all results.\n\n `flat_map(f, ls)` equal to `ls.map(f).fold(Nil, fn(acc, x) { acc.concat(x) })))`\n\n # Example\n\n ```\n let ls = from_array([1, 2, 3])\n let r = ls.flat_map(fn(x) { [x, x * 2] })\n println(r) // output: from_array([1, 2, 2, 4, 3, 6])\n ```",
          "signature": "fn <a href=\"list#T\">T</a>::flat_map[A, B](self : <a href=\"list#T\">T</a>[A], f : (A) -> <a href=\"list#T\">T</a>[B]) -> <a href=\"list#T\">T</a>[B]",
          "loc": { "line": 369, "column": 8 },
        },
        {
          "name": "flatten",
          "docstring": " flatten a list of lists.\n\n # Example\n\n ```\n let ls = flatten(from_array([from_array([1,2,3]), from_array([4,5,6]), from_array([7,8,9])]))\n println(ls) // output: from_array([1, 2, 3, 4, 5, 6, 7, 8, 9])\n ```",
          "signature": "fn <a href=\"list#T\">T</a>::flatten[A](self : <a href=\"list#T\">T</a>[<a href=\"list#T\">T</a>[A]]) -> <a href=\"list#T\">T</a>[A]",
          "loc": { "line": 462, "column": 8 },
        },
        {
          "name": "fold_left",
          "docstring": " Fold the list from left.\n\n # Example\n\n ```\n let r = of([1, 2, 3, 4, 5]).fold_left(init=0, fn(acc, x) { acc + x })\n println(r) // output: 15\n ```",
          "signature": "fn <a href=\"list#T\">T</a>::fold_left[A, B](self : <a href=\"list#T\">T</a>[A], f : (B, A) -> B, init~ : B) -> B",
          "loc": { "line": 280, "column": 8 },
        },
        {
          "name": "fold_lefti",
          "docstring": " Fold the list from left with index.",
          "signature": "fn <a href=\"list#T\">T</a>::fold_lefti[A, B](self : <a href=\"list#T\">T</a>[A], f : (Int, B, A) -> B, init~ : B) -> B",
          "loc": { "line": 301, "column": 8 },
        },
        {
          "name": "fold_right",
          "docstring": " Fold the list from right.\n\n # Example\n ```\n let r = of([1, 2, 3, 4, 5]).fold_right(fn(x, acc) { x + acc }, init=0)\n ```",
          "signature": "fn <a href=\"list#T\">T</a>::fold_right[A, B](self : <a href=\"list#T\">T</a>[A], f : (A, B) -> B, init~ : B) -> B",
          "loc": { "line": 293, "column": 8 },
        },
        {
          "name": "fold_righti",
          "docstring": " Fold the list from right with index.",
          "signature": "fn <a href=\"list#T\">T</a>::fold_righti[A, B](self : <a href=\"list#T\">T</a>[A], f : (Int, A, B) -> B, init~ : B) -> B",
          "loc": { "line": 313, "column": 8 },
        },
        {
          "name": "from_array",
          "docstring": " Convert array to list.\n\n # Example\n\n ```\n let ls = @immut/list.of([1, 2, 3, 4, 5])\n println(ls) // output: [1, 2, 3, 4, 5]\n ```",
          "signature": "fn <a href=\"list#T\">T</a>::from_array[A](arr : <a href=\"moonbitlang/core/array#Array\">Array</a>[A]) -> <a href=\"list#T\">T</a>[A]",
          "loc": { "line": 32, "column": 11 },
        },
        {
          "name": "from_iter",
          "docstring": "",
          "signature": "fn <a href=\"list#T\">T</a>::from_iter[A](iter : <a href=\"moonbitlang/core/builtin#Iter\">Iter</a>[A]) -> <a href=\"list#T\">T</a>[A]",
          "loc": { "line": 857, "column": 11 },
        },
        {
          "name": "head",
          "docstring": " Get first element of the list.\n\n # Example\n\n ```\n println(of([1, 2, 3, 4, 5]).head())\n // output: Some(1)\n println(from_array([]).head())\n // output: None\n ```",
          "signature": "fn <a href=\"list#T\">T</a>::head[A](self : <a href=\"list#T\">T</a>[A]) -> A?",
          "loc": { "line": 199, "column": 8 },
        },
        {
          "name": "head_exn",
          "docstring": " Get first element of the list.\n\n # Example\n\n ```\n println(of([1, 2, 3, 4, 5]).head_exn())\n // output: 1\n ```\n @alert unsafe \"Panic if the list is empty\"",
          "signature": "fn <a href=\"list#T\">T</a>::head_exn[A](self : <a href=\"list#T\">T</a>[A]) -> A",
          "loc": { "line": 182, "column": 8 },
        },
        {
          "name": "init_",
          "docstring": " Init of the list.\n\n # Example\n\n ```\n println(of([1, 2, 3, 4, 5]).init_())\n // output: from_array([1, 2, 3, 4])\n ```",
          "signature": "fn <a href=\"list#T\">T</a>::init_[A](self : <a href=\"list#T\">T</a>[A]) -> <a href=\"list#T\">T</a>[A]",
          "loc": { "line": 231, "column": 8 },
        },
        {
          "name": "intercalate",
          "docstring": " Similar to intersperse but with a list of values.\n\n # Example\n ```\n let ls = List::[\n    of([1, 2, 3]),\n    of([4, 5, 6]),\n    of([7, 8, 9]),\n ]\n ls.intercalate(of([0]))\n ```",
          "signature": "fn <a href=\"list#T\">T</a>::intercalate[A](self : <a href=\"list#T\">T</a>[<a href=\"list#T\">T</a>[A]], sep : <a href=\"list#T\">T</a>[A]) -> <a href=\"list#T\">T</a>[A]",
          "loc": { "line": 816, "column": 8 },
        },
        {
          "name": "intersperse",
          "docstring": " Insert separator to the list.\n\n # Example\n\n ```\n let ls = from_array([\"1\", \"2\", \"3\", \"4\", \"5\"]).intersperse(\"|\")\n println(ls) // output: from_array([\"1\", \"|\", \"2\", \"|\", \"3\", \"|\", \"4\", \"|\", \"5\"])\n ```",
          "signature": "fn <a href=\"list#T\">T</a>::intersperse[A](self : <a href=\"list#T\">T</a>[A], separator : A) -> <a href=\"list#T\">T</a>[A]",
          "loc": { "line": 418, "column": 8 },
        },
        {
          "name": "is_empty",
          "docstring": " Check if the list is empty.",
          "signature": "fn <a href=\"list#T\">T</a>::is_empty[A](self : <a href=\"list#T\">T</a>[A]) -> Bool",
          "loc": { "line": 428, "column": 8 },
        },
        {
          "name": "is_prefix",
          "docstring": " Returns true if list starts with prefix.\n\n # Example\n\n ```\n println(of([1, 2, 3, 4, 5]).is_prefix(of([1, 2, 3])))\n // output: true\n ```",
          "signature": "fn <a href=\"list#T\">T</a>::is_prefix[A : <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>](self : <a href=\"list#T\">T</a>[A], prefix : <a href=\"list#T\">T</a>[A]) -> Bool",
          "loc": { "line": 769, "column": 8 },
        },
        {
          "name": "is_suffix",
          "docstring": " Returns true if list ends with suffix.\n\n # Example\n\n ```\n println(of([1, 2, 3, 4, 5]).is_suffix(of([3, 4, 5])))\n // output: true\n ```",
          "signature": "fn <a href=\"list#T\">T</a>::is_suffix[A : <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>](self : <a href=\"list#T\">T</a>[A], suffix : <a href=\"list#T\">T</a>[A]) -> Bool",
          "loc": { "line": 801, "column": 8 },
        },
        {
          "name": "iter",
          "docstring": "",
          "signature": "fn <a href=\"list#T\">T</a>::iter[A](self : <a href=\"list#T\">T</a>[A]) -> <a href=\"moonbitlang/core/builtin#Iter\">Iter</a>[A]",
          "loc": { "line": 825, "column": 8 },
        },
        {
          "name": "iter2",
          "docstring": "",
          "signature": "fn <a href=\"list#T\">T</a>::iter2[A](self : <a href=\"list#T\">T</a>[A]) -> <a href=\"moonbitlang/core/builtin#Iter2\">Iter2</a>[Int, A]",
          "loc": { "line": 841, "column": 8 },
        },
        {
          "name": "last",
          "docstring": " Last element of the list.\n\n # Example\n\n ```\n println(of([1, 2, 3, 4, 5]).last())\n // output: 5\n ```\n @alert unsafe \"Panic if the list is empty\"",
          "signature": "fn <a href=\"list#T\">T</a>::last[A](self : <a href=\"list#T\">T</a>[A]) -> A",
          "loc": { "line": 215, "column": 8 },
        },
        {
          "name": "length",
          "docstring": " Get the length of the list.",
          "signature": "fn <a href=\"list#T\">T</a>::length[A](self : <a href=\"list#T\">T</a>[A]) -> Int",
          "loc": { "line": 41, "column": 8 },
        },
        {
          "name": "lookup",
          "docstring": " Looks up a key in an association list.\n\n # Example\n\n ```\n let ls = from_array([(1, \"a\"), (2, \"b\"), (3, \"c\")])\n ls.lookup(3) // output: Some(\"c\")\n ```",
          "signature": "fn <a href=\"list#T\">T</a>::lookup[A : <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>, B](self : <a href=\"list#T\">T</a>[(A, B)], v : A) -> B?",
          "loc": { "line": 671, "column": 8 },
        },
        {
          "name": "map",
          "docstring": " Maps the list.\n\n # Example\n\n ```\n println(@immut/list.of([1, 2, 3, 4, 5]).map(fn(x){ x * 2}))\n // output: of([2, 4, 6, 8, 10])\n ```",
          "signature": "fn <a href=\"list#T\">T</a>::map[A, B](self : <a href=\"list#T\">T</a>[A], f : (A) -> B) -> <a href=\"list#T\">T</a>[B]",
          "loc": { "line": 91, "column": 8 },
        },
        {
          "name": "mapi",
          "docstring": " Maps the list with index.",
          "signature": "fn <a href=\"list#T\">T</a>::mapi[A, B](self : <a href=\"list#T\">T</a>[A], f : (Int, A) -> B) -> <a href=\"list#T\">T</a>[B]",
          "loc": { "line": 99, "column": 8 },
        },
        {
          "name": "maximum",
          "docstring": " Get maximum element of the list.\n @alert unsafe \"Panic if the list is empty\"",
          "signature": "fn <a href=\"list#T\">T</a>::maximum[A : <a href=\"moonbitlang/core/builtin#Compare\">Compare</a> + <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>](self : <a href=\"list#T\">T</a>[A]) -> A",
          "loc": { "line": 471, "column": 8 },
        },
        {
          "name": "minimum",
          "docstring": " Get minimum element of the list.\n @alert unsafe \"Panic if the list is empty\"",
          "signature": "fn <a href=\"list#T\">T</a>::minimum[A : <a href=\"moonbitlang/core/builtin#Compare\">Compare</a> + <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>](self : <a href=\"list#T\">T</a>[A]) -> A",
          "loc": { "line": 488, "column": 8 },
        },
        {
          "name": "nth",
          "docstring": " Get nth element of the list or None if the index is out of bounds",
          "signature": "fn <a href=\"list#T\">T</a>::nth[A](self : <a href=\"list#T\">T</a>[A], n : Int) -> A?",
          "loc": { "line": 387, "column": 8 },
        },
        {
          "name": "nth_exn",
          "docstring": " Get nth element of the list\n @alert unsafe \"Panic if the index is out of bounds\"",
          "signature": "fn <a href=\"list#T\">T</a>::nth_exn[A](self : <a href=\"list#T\">T</a>[A], n : Int) -> A",
          "loc": { "line": 378, "column": 8 },
        },
        {
          "name": "of",
          "docstring": "",
          "signature": "fn <a href=\"list#T\">T</a>::of[A](arr : <a href=\"moonbitlang/core/array#FixedArray\">FixedArray</a>[A]) -> <a href=\"list#T\">T</a>[A]",
          "loc": { "line": 861, "column": 11 },
        },
        {
          "name": "op_add",
          "docstring": " Concatenate two lists.\n\n `a + b` equal to `a.concat(b)`",
          "signature": "fn <a href=\"list#T\">T</a>::op_add[A](self : <a href=\"list#T\">T</a>[A], other : <a href=\"list#T\">T</a>[A]) -> <a href=\"list#T\">T</a>[A]",
          "loc": { "line": 525, "column": 8 },
        },
        {
          "name": "op_equal",
          "docstring": "",
          "signature": "fn <a href=\"list#T\">T</a>::op_equal[A : <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>](<a href=\"list#T\">T</a>[A], <a href=\"list#T\">T</a>[A]) -> Bool",
          "loc": { "line": 5, "column": 10 },
        },
        {
          "name": "output",
          "docstring": "",
          "signature": "fn <a href=\"list#T\">T</a>::output[A : <a href=\"moonbitlang/core/builtin#Show\">Show</a>](xs : <a href=\"list#T\">T</a>[A], logger : <a href=\"moonbitlang/core/builtin#Logger\">Logger</a>) -> Unit",
          "loc": { "line": 7, "column": 39 },
        },
        {
          "name": "remove",
          "docstring": " Removes the first occurrence of the specified element from the list, if it is present.\n\n # Example\n\n ```\n println(of([1, 2, 3, 4, 5]).remove(3))\n // output: from_array([1, 2, 4, 5])\n ```",
          "signature": "fn <a href=\"list#T\">T</a>::remove[A : <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>](self : <a href=\"list#T\">T</a>[A], elem : A) -> <a href=\"list#T\">T</a>[A]",
          "loc": { "line": 749, "column": 8 },
        },
        {
          "name": "remove_at",
          "docstring": " Removes the element at the specified index in the list.\n\n # Example\n\n ```\n println(of([1, 2, 3, 4, 5]).remove_at(2))\n // output: from_array([1, 2, 4, 5])\n ```",
          "signature": "fn <a href=\"list#T\">T</a>::remove_at[A](self : <a href=\"list#T\">T</a>[A], index : Int) -> <a href=\"list#T\">T</a>[A]",
          "loc": { "line": 732, "column": 8 },
        },
        {
          "name": "rev",
          "docstring": " Reverse the list.\n\n # Example\n\n ```\n println(@list.of([1, 2, 3, 4, 5]).rev())\n // output: from_array([5, 4, 3, 2, 1])\n ```",
          "signature": "fn <a href=\"list#T\">T</a>::rev[A](self : <a href=\"list#T\">T</a>[A]) -> <a href=\"list#T\">T</a>[A]",
          "loc": { "line": 262, "column": 8 },
        },
        {
          "name": "scan_left",
          "docstring": " Fold a list and return a list of successive reduced values from the left\n\n # Example\n\n ```\n let ls = of([1, 2, 3, 4, 5])\n ls.scan_left(fn(acc, x) { acc + x }, init=0)\n ```",
          "signature": "fn <a href=\"list#T\">T</a>::scan_left[A, E](self : <a href=\"list#T\">T</a>[A], f : (E, A) -> E, init~ : E) -> <a href=\"list#T\">T</a>[E]",
          "loc": { "line": 634, "column": 8 },
        },
        {
          "name": "scan_right",
          "docstring": " Fold a list and return a list of successive reduced values from the right\n\n Note that the order of parameters on the accumulating function are reversed.\n\n # Example\n ```\n let ls = of([1, 2, 3, 4, 5])\n ls.scan_right(fn(x, acc) { acc + x }, init=0)\n ```",
          "signature": "fn <a href=\"list#T\">T</a>::scan_right[A, B](self : <a href=\"list#T\">T</a>[A], f : (A, B) -> B, init~ : B) -> <a href=\"list#T\">T</a>[B]",
          "loc": { "line": 653, "column": 8 },
        },
        {
          "name": "sort",
          "docstring": " Sort the list in ascending order.\n\n # Example\n\n ```\n let ls = sort(from_array([1,123,52,3,6,0,-6,-76]))\n println(ls) // output: from_array([-76, -6, 0, 1, 3, 6, 52, 123])\n ```",
          "signature": "fn <a href=\"list#T\">T</a>::sort[A : <a href=\"moonbitlang/core/builtin#Compare\">Compare</a> + <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>](self : <a href=\"list#T\">T</a>[A]) -> <a href=\"list#T\">T</a>[A]",
          "loc": { "line": 511, "column": 8 },
        },
        {
          "name": "tail",
          "docstring": " Tail of the list.\n\n # Example\n\n ```\n println(of([1, 2, 3, 4, 5]).tail())\n // output: from_array([2, 3, 4, 5])\n ```",
          "signature": "fn <a href=\"list#T\">T</a>::tail[A](self : <a href=\"list#T\">T</a>[A]) -> <a href=\"list#T\">T</a>[A]",
          "loc": { "line": 166, "column": 8 },
        },
        {
          "name": "take",
          "docstring": " Take first n elements of the list.\n\n # Example\n\n ```\n of([1, 2, 3, 4, 5]).take(3)\n ```",
          "signature": "fn <a href=\"list#T\">T</a>::take[A](self : <a href=\"list#T\">T</a>[A], n : Int) -> <a href=\"list#T\">T</a>[A]",
          "loc": { "line": 559, "column": 8 },
        },
        {
          "name": "take_while",
          "docstring": " Take the longest prefix of a list of elements that satisfies a given predicate.\n\n # Example\n\n ```\n from_array([1, 2, 3, 4]).take_while(fn(x) { x < 3 })\n ```",
          "signature": "fn <a href=\"list#T\">T</a>::take_while[A](self : <a href=\"list#T\">T</a>[A], p : (A) -> Bool) -> <a href=\"list#T\">T</a>[A]",
          "loc": { "line": 605, "column": 8 },
        },
        {
          "name": "to_array",
          "docstring": " Convert list to array.",
          "signature": "fn <a href=\"list#T\">T</a>::to_array[A](self : <a href=\"list#T\">T</a>[A]) -> <a href=\"moonbitlang/core/array#Array\">Array</a>[A]",
          "loc": { "line": 111, "column": 8 },
        },
        {
          "name": "to_string",
          "docstring": "",
          "signature": "fn <a href=\"list#T\">T</a>::to_string[A : <a href=\"moonbitlang/core/builtin#Show\">Show</a>](xs : <a href=\"list#T\">T</a>[A]) -> String",
          "loc": { "line": 20, "column": 11 },
        },
        {
          "name": "zip",
          "docstring": " Zip two lists.\n\n # Example\n\n ```\n let r = zip(of([1, 2, 3, 4, 5]), from_array([6, 7, 8, 9, 10]))\n println(r) // output: from_array([(1, 6), (2, 7), (3, 8), (4, 9), (5, 10)]\n ```\n\n @alert unsafe \"Panic if the two lists have different lengths.\"",
          "signature": "fn <a href=\"list#T\">T</a>::zip[A, B](self : <a href=\"list#T\">T</a>[A], other : <a href=\"list#T\">T</a>[B]) -> <a href=\"list#T\">T</a>[(A, B)]",
          "loc": { "line": 334, "column": 8 },
        },
      ],
      "impls": [
        {
          "name": "output",
          "docstring": "",
          "signature": "impl <a href=\"moonbitlang/core/builtin#Show\">Show</a> for <a href=\"list#T\">T</a> with output[A : <a href=\"moonbitlang/core/builtin#Show\">Show</a>](xs : <a href=\"list#T\">T</a>[A], logger : <a href=\"moonbitlang/core/builtin#Logger\">Logger</a>) -> Unit",
          "loc": { "line": 7, "column": 39 },
        },
      ],
    },
    {
      "name": "ADSR",
      "docstring": " # Title \n \n An ADSR volume envelop\n \n The envelope starts at zero volume, \n then raises to the peak volume over the attack time, \n lowers to the sustain volume during the decay time, \n remains at the sustain volume during the sustain time, \n and finally fades to zero volume during the release time.  \n Duration of each phase is specified in frames (1/60th of a second).",
      "signature": "pub(readonly) struct ADSR {\n  sustain : UInt\n  release : UInt\n  decay : UInt\n  attack : UInt\n}",
      "loc": { "line": 317, "column": 22 },
      "methods": [
        {
          "name": "new",
          "docstring": " An ADSR volume envelop\n \n The envelope starts at zero volume, \n then raises to the peak volume over the attack time, \n lowers to the sustain volume during the decay time, \n remains at the sustain volume during the sustain time, \n and finally fades to zero volume during the release time.  \n Duration of each phase is specified in frames (1/60th of a second).",
          "signature": "fn <a href=\"wasm4#ADSR\">ADSR</a>::new(sustain : UInt, release~ : UInt = .., decay~ : UInt = .., attack~ : UInt = ..) -> <a href=\"wasm4#ADSR\">ADSR</a>",
          "loc": { "line": 332, "column": 14 },
        },
      ],
      "impls": [],
    },
    {
      "name": "ADSRVolume",
      "docstring": " The volume of an ADSR envelope\n \n The volume used for the sustain duration, and the peak volume (default to 100 if zero) reached by the attack duration.",
      "signature": "pub(readonly) struct ADSRVolume {\n  sustain : UInt\n  peak : UInt\n}",
      "loc": { "line": 344, "column": 22 },
      "methods": [
        {
          "name": "new",
          "docstring": " The volume of an ADSR envelope\n \n The volume used for the sustain duration, and the peak volume (default to 100 if zero) reached by the attack duration.",
          "signature": "fn <a href=\"wasm4#ADSRVolume\">ADSRVolume</a>::new(sustain : UInt, peak~ : UInt = ..) -> <a href=\"wasm4#ADSRVolume\">ADSRVolume</a>",
          "loc": { "line": 352, "column": 20 },
        },
      ],
      "impls": [],
    },
    {
      "name": "BlitFlag",
      "docstring": " one_bit_per_pixel: Sprite pixel format: 1BPP or 2BPP\n flip_x: flip the sprite horizontally\n flip_y: flip the sprite vertically\n rotate: rotate the sprite anti-clockwise 90 degrees, applied after any flipping",
      "signature": "pub struct BlitFlag {\n  one_bit_per_pixel : Bool\n  flip_x : Bool\n  flip_y : Bool\n  rotate : Bool\n}",
      "loc": { "line": 207, "column": 17 },
      "methods": [],
      "impls": [],
    },
    {
      "name": "Color",
      "docstring": "",
      "signature": "type Color",
      "loc": { "line": 1, "column": 6 },
      "methods": [],
      "impls": [],
    },
    {
      "name": "GamePad",
      "docstring": "",
      "signature": "pub(readonly) struct GamePad {\n  button_1 : Bool\n  button_2 : Bool\n  button_left : Bool\n  button_right : Bool\n  button_up : Bool\n  button_down : Bool\n}",
      "loc": { "line": 60, "column": 22 },
      "methods": [
        {
          "name": "default",
          "docstring": "",
          "signature": "fn <a href=\"wasm4#GamePad\">GamePad</a>::default() -> <a href=\"wasm4#GamePad\">GamePad</a>",
          "loc": { "line": 67, "column": 14 },
        },
        {
          "name": "op_equal",
          "docstring": "",
          "signature": "fn <a href=\"wasm4#GamePad\">GamePad</a>::op_equal(<a href=\"wasm4#GamePad\">GamePad</a>, <a href=\"wasm4#GamePad\">GamePad</a>) -> Bool",
          "loc": { "line": 67, "column": 10 },
        },
      ],
      "impls": [],
    },
    {
      "name": "Mouse",
      "docstring": "",
      "signature": "pub(readonly) struct Mouse {\n  x : Int\n  y : Int\n  left : Bool\n  middle : Bool\n  right : Bool\n}",
      "loc": { "line": 89, "column": 22 },
      "methods": [
        {
          "name": "default",
          "docstring": "",
          "signature": "fn <a href=\"wasm4#Mouse\">Mouse</a>::default() -> <a href=\"wasm4#Mouse\">Mouse</a>",
          "loc": { "line": 95, "column": 14 },
        },
        {
          "name": "op_equal",
          "docstring": "",
          "signature": "fn <a href=\"wasm4#Mouse\">Mouse</a>::op_equal(<a href=\"wasm4#Mouse\">Mouse</a>, <a href=\"wasm4#Mouse\">Mouse</a>) -> Bool",
          "loc": { "line": 95, "column": 10 },
        },
      ],
      "impls": [],
    },
    {
      "name": "Netplay",
      "docstring": " Status of netplay\n \n The index is from 1 to 4 (inclusive)",
      "signature": "pub(readonly) struct Netplay {\n  index : UInt\n  active : Bool\n}",
      "loc": { "line": 136, "column": 22 },
      "methods": [],
      "impls": [],
    },
    {
      "name": "Note",
      "docstring": " Notes with pitch bend\n \n @param note Specified in MIDI note format, e.g. 60 = C4, 69 = A4.  \n @param bend Bend note upwards. 0 = Nothing, 255 = One 256th away from the next note above",
      "signature": "pub(readonly) struct Note {\n  note : UInt\n  bend : UInt\n}",
      "loc": { "line": 360, "column": 22 },
      "methods": [
        {
          "name": "new",
          "docstring": " Notes with pitch bend\n \n @param note Specified in MIDI note format, e.g. 60 = C4, 69 = A4.  \n @param bend Bend note upwards. 0 = Nothing, 255 = One 256th away from the next note above",
          "signature": "fn <a href=\"wasm4#Note\">Note</a>::new(note : UInt, bend~ : UInt = ..) -> <a href=\"wasm4#Note\">Note</a>",
          "loc": { "line": 369, "column": 14 },
        },
      ],
      "impls": [],
    },
    {
      "name": "Sprite",
      "docstring": "",
      "signature": "type Sprite",
      "loc": { "line": 197, "column": 6 },
      "methods": [
        {
          "name": "blit",
          "docstring": " Copies pixels to the framebuffer.\n \n @param spritePtr raw pixel data stored in either 1BPP or 2BPP format.\n @param x X position in the destination framebuffer.\n @param y Y position in the destination framebuffer.\n @param width Width of the sprite.\n @param height Height of the sprite.\n @param flags Flags that modify behavior.",
          "signature": "fn <a href=\"wasm4#Sprite\">Sprite</a>::blit(self : <a href=\"wasm4#Sprite\">Sprite</a>, x : Int, y : Int, width : Int, height : Int, flags : <a href=\"wasm4#BlitFlag\">BlitFlag</a>) -> Unit",
          "loc": { "line": 229, "column": 8 },
        },
        {
          "name": "blit_sub",
          "docstring": " Copies a subregion within a larger sprite atlas to the framebuffer. Same as blit, but with 3 additional parameters.\n \n @param srcX Source X position of the sprite region.\n @param srcY Source Y position of the sprite region.\n @param stride Total width of the overall sprite atlas. This is typically larger than width.\n For info on other parameters, see blit().",
          "signature": "fn <a href=\"wasm4#Sprite\">Sprite</a>::blit_sub(self : <a href=\"wasm4#Sprite\">Sprite</a>, x : Int, y : Int, width : Int, height : Int, src_x : Int, src_y : Int, stride : Int, flags : <a href=\"wasm4#BlitFlag\">BlitFlag</a>) -> Unit",
          "loc": { "line": 247, "column": 8 },
        },
      ],
      "impls": [],
    },
    {
      "name": "ToneChannel",
      "docstring": "",
      "signature": "pub enum ToneChannel {\n  Pulse1\n  Pulse2\n  Triangle\n  Noise\n}",
      "loc": { "line": 389, "column": 15 },
      "methods": [],
      "impls": [],
    },
    {
      "name": "ToneFlag",
      "docstring": " Flags that modify behavior of `tone`",
      "signature": "pub(readonly) struct ToneFlag {\n  channel : <a href=\"wasm4#ToneChannel\">ToneChannel</a>\n  mode : <a href=\"wasm4#ToneMode\">ToneMode</a>\n  pan : <a href=\"wasm4#TonePan\">TonePan</a>\n}",
      "loc": { "line": 374, "column": 22 },
      "methods": [
        {
          "name": "new",
          "docstring": " Flags that modify behavior of `tone`",
          "signature": "fn <a href=\"wasm4#ToneFlag\">ToneFlag</a>::new(channel~ : <a href=\"wasm4#ToneChannel\">ToneChannel</a> = .., mode~ : <a href=\"wasm4#ToneMode\">ToneMode</a> = .., pan~ : <a href=\"wasm4#TonePan\">TonePan</a> = ..) -> <a href=\"wasm4#ToneFlag\">ToneFlag</a>",
          "loc": { "line": 381, "column": 18 },
        },
      ],
      "impls": [],
    },
    {
      "name": "ToneMode",
      "docstring": "",
      "signature": "pub enum ToneMode {\n  Duty_1_8\n  Duty_1_4\n  Duty_1_2\n  Duty_3_4\n}",
      "loc": { "line": 396, "column": 15 },
      "methods": [],
      "impls": [],
    },
    {
      "name": "TonePan",
      "docstring": "",
      "signature": "pub enum TonePan {\n  Center\n  Left\n  Right\n}",
      "loc": { "line": 403, "column": 15 },
      "methods": [],
      "impls": [],
    },
  ],
  "typealias": [],
  "values": [
    {
      "name": "disk_read",
      "docstring": " Reads up to `size` bytes from persistent storage into `bytes`.\n \n @return the number of bytes read, which may be less than `size`",
      "signature": "fn disk_read(bytes : Bytes, size : UInt) -> Int",
      "loc": { "line": 516, "column": 8 },
    },
    {
      "name": "disk_write",
      "docstring": " Writes up to `size` bytes from `bytes` into persistent storage.\n\n Any previously saved data on the disk is replaced.\n @return the number of bytes written, which may be less than `size`.",
      "signature": "fn disk_write(bytes : Bytes, size : UInt) -> Int",
      "loc": { "line": 505, "column": 8 },
    },
    {
      "name": "get_draw_colors",
      "docstring": " Gets the draw color at the given index.\n \n @param index the index of the draw color to get, from 1 to 4 (inclusive)  \n @return the index of the palette that the draw color is set to",
      "signature": "fn get_draw_colors(index : UInt) -> UInt",
      "loc": { "line": 52, "column": 8 },
    },
    {
      "name": "get_gamepad",
      "docstring": " Gets the state of the gamepads.\n \n @param index the index of the gamepad to get, from 1 to 4 (inclusive)  \n @return the state of the gamepads",
      "signature": "fn get_gamepad(index~ : UInt = ..) -> <a href=\"wasm4#GamePad\">GamePad</a>",
      "loc": { "line": 73, "column": 8 },
    },
    {
      "name": "get_mouse",
      "docstring": " Gets the state of the mouse.\n \n @return the state of the mouse",
      "signature": "fn get_mouse() -> <a href=\"wasm4#Mouse\">Mouse</a>",
      "loc": { "line": 100, "column": 8 },
    },
    {
      "name": "get_netplay",
      "docstring": " Gets the state of the netplay.\n \n @return the state of the netplay",
      "signature": "fn get_netplay() -> <a href=\"wasm4#Netplay\">Netplay</a>",
      "loc": { "line": 144, "column": 8 },
    },
    {
      "name": "get_palette",
      "docstring": " Gets the color of the palette at the given index.\n \n @param index the index of the palette to get, from 1 to 4 (inclusive)  \n @return the color at the given index",
      "signature": "fn get_palette(index : UInt) -> <a href=\"wasm4#Color\">Color</a>",
      "loc": { "line": 26, "column": 8 },
    },
    {
      "name": "get_system_hide_gamepad_overlay",
      "docstring": "",
      "signature": "fn get_system_hide_gamepad_overlay() -> Bool",
      "loc": { "line": 184, "column": 8 },
    },
    {
      "name": "get_system_preserve_framebuffer",
      "docstring": "",
      "signature": "fn get_system_preserve_framebuffer() -> Bool",
      "loc": { "line": 164, "column": 8 },
    },
    {
      "name": "hline",
      "docstring": " Draws a horizontal line between `(x, y)` and `(x + len - 1, y)`\n \n `DRAW_COLORS` color 1 is used as the line color",
      "signature": "fn hline(x : Int, y : Int, len : Int) -> Unit",
      "loc": { "line": 280, "column": 8 },
    },
    {
      "name": "line",
      "docstring": " Draws a line between two points\n \n `DRAW_COLORS` color 1 is used as the line color",
      "signature": "fn line(x1 : Int, y1 : Int, x2 : Int, y2 : Int) -> Unit",
      "loc": { "line": 275, "column": 8 },
    },
    {
      "name": "oval",
      "docstring": " Draws an oval (or circle).\n \n `DRAW_COLORS` color 1 is used as the fill color, `DRAW_COLORS` color 2 is used as the outline color.",
      "signature": "fn oval(x : Int, y : Int, width : Int, height : Int) -> Unit",
      "loc": { "line": 290, "column": 8 },
    },
    {
      "name": "rect",
      "docstring": " Draws a rectangle.\n \n `DRAW_COLORS` color 1 is used as the fill color, `DRAW_COLORS` color 2 is used as the outline color.",
      "signature": "fn rect(x : Int, y : Int, width : Int, height : Int) -> Unit",
      "loc": { "line": 295, "column": 8 },
    },
    {
      "name": "rgb",
      "docstring": "",
      "signature": "fn rgb(color : UInt) -> <a href=\"wasm4#Color\">Color</a>",
      "loc": { "line": 3, "column": 8 },
    },
    {
      "name": "set_draw_colors",
      "docstring": " Sets the draw color at the given index.\n \n @param index the index of the draw color to set, from 1 to 4 (inclusive)  \n @param palette the index of the palette to set the draw color to, from 1 to 4 (inclusive), or 0 for transparent",
      "signature": "fn set_draw_colors(palette : UInt, index~ : UInt = ..) -> Unit",
      "loc": { "line": 38, "column": 8 },
    },
    {
      "name": "set_frame_buffer",
      "docstring": " Manipulate the framebuffer directly.\n \n @param index the index of the pixel to set, from 0 to 160 * 160 (exclusive)  \n @param palette the index of the palette to set the pixel to, from 1 to 4 (inclusive)",
      "signature": "fn set_frame_buffer(index : UInt, palette : UInt) -> Unit",
      "loc": { "line": 115, "column": 8 },
    },
    {
      "name": "set_palette",
      "docstring": " Sets the color of the palette at the given index.\n \n @param index the index of the palette to set, from 1 to 4 (inclusive)  \n @param color the color to set",
      "signature": "fn set_palette(index : UInt, color : <a href=\"wasm4#Color\">Color</a>) -> Unit",
      "loc": { "line": 11, "column": 8 },
    },
    {
      "name": "set_system_hide_gamepad_overlay",
      "docstring": "",
      "signature": "fn set_system_hide_gamepad_overlay(b : Bool) -> Unit",
      "loc": { "line": 169, "column": 8 },
    },
    {
      "name": "set_system_preserve_framebuffer",
      "docstring": "",
      "signature": "fn set_system_preserve_framebuffer(b : Bool) -> Unit",
      "loc": { "line": 149, "column": 8 },
    },
    {
      "name": "sprite",
      "docstring": "",
      "signature": "fn sprite(bytes : Bytes) -> <a href=\"wasm4#Sprite\">Sprite</a>",
      "loc": { "line": 199, "column": 8 },
    },
    {
      "name": "text",
      "docstring": " Draws text using the built-in system font. The string may contain new-line (`\\n`) characters.\n \n The font is 8x8 pixels per character  \n `DRAW_COLORS` color 1 is used as the text color, `DRAW_COLORS` color 2 is used as the background color.",
      "signature": "fn text(s : String, x : Int, y : Int) -> Unit",
      "loc": { "line": 301, "column": 8 },
    },
    {
      "name": "tone",
      "docstring": " Plays a sound tone\n \n @param frequency Start frequency and optional end frequency presented in hertz  \n @param duration Duration of the tone in frames (1/60th of a second), up to 255 frames for each phase  \n @param volume Volume of the sustain and attack durations, between 0 and 100  \n @param flags Flags that modify behavior",
      "signature": "fn tone(frequency : (UInt, UInt), duration : <a href=\"wasm4#ADSR\">ADSR</a>, volume : <a href=\"wasm4#ADSRVolume\">ADSRVolume</a>, flags : <a href=\"wasm4#ToneFlag\">ToneFlag</a>) -> Unit",
      "loc": { "line": 415, "column": 8 },
    },
    {
      "name": "tone_note_mode",
      "docstring": " Plays a sound tone in note mode\n \n @param frequency Start frequency and optional end frequency presented in MIDI note  \n @param duration Duration of the tone in frames (1/60th of a second), up to 255 frames for each phase  \n @param volume Volume of the sustain and attack durations, between 0 and 100  \n @param flags Flags that modify behavior",
      "signature": "fn tone_note_mode(frequency : (<a href=\"wasm4#Note\">Note</a>, <a href=\"wasm4#Note\">Note</a>?), duration : <a href=\"wasm4#ADSR\">ADSR</a>, volume : <a href=\"wasm4#ADSRVolume\">ADSRVolume</a>, flags : <a href=\"wasm4#ToneFlag\">ToneFlag</a>) -> Unit",
      "loc": { "line": 459, "column": 8 },
    },
    {
      "name": "trace",
      "docstring": " Prints a message to the debug console",
      "signature": "fn trace(s : String) -> Unit",
      "loc": { "line": 525, "column": 8 },
    },
    {
      "name": "vline",
      "docstring": " Draws a vertical line between `(x, y)` and `(x, y + len - 1)`\n \n `DRAW_COLORS` color 1 is used as the line color",
      "signature": "fn vline(x : Int, y : Int, len : Int) -> Unit",
      "loc": { "line": 285, "column": 8 },
    },
  ],
  "misc": [],
}
