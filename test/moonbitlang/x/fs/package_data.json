{
  "readme": "",
  "name": "moonbitlang/x/fs",
  "traits": [],
  "types": [
    {
      "name": "IOError",
      "docstring": "",
      "signature": "pub(all) enum IOError {\n  NotFound(String)\n}",
      "loc": { "line": 16, "column": 16 },
      "methods": [],
      "impls": [
        {
          "docstring": "",
          "signature": "impl <a href=\"moonbitlang/core/builtin#Show\">Show</a> for <a href=\"moonbitlang/x/fs#IOError\">IOError</a>",
          "methods": [
            {
              "name": "output",
              "docstring": "",
              "signature": "fn output(self : <a href=\"moonbitlang/x/fs#IOError\">IOError</a>, logger : <a href=\"moonbitlang/core/builtin#Logger\">Logger</a>) -> Unit",
              "loc": { "line": 21, "column": 32 }
            }
          ],
          "loc": { "line": 21, "column": 1 }
        }
      ]
    }
  ],
  "typealias": [],
  "values": [
    {
      "name": "create_dir",
      "docstring": " Creates a directory at the specified path.\n Note: nested directories are not supported for native backend\n\n # Parameters\n\n - `path` : The path where the directory should be created.",
      "signature": "fn create_dir(path~ : String) -> Unit",
      "loc": { "line": 109, "column": 8 }
    },
    {
      "name": "is_dir",
      "docstring": " Checks if the given path is a directory.\n\n # Parameters\n\n - `path` : The string representing the path to be checked.\n\n # Returns\n\n - `Bool` : `true` if the path is a directory, `false` otherwise.",
      "signature": "fn is_dir(path~ : String) -> Bool!<a href=\"moonbitlang/core/error#Error\">Error</a>",
      "loc": { "line": 122, "column": 8 }
    },
    {
      "name": "is_file",
      "docstring": " Check if the given path points to a file.\n\n # Parameters\n\n - `path` : The string representing the path to be checked.\n\n # Returns\n\n - `Bool` : `true` if the path points to a file, `false` otherwise.",
      "signature": "fn is_file(path~ : String) -> Bool!<a href=\"moonbitlang/core/error#Error\">Error</a>",
      "loc": { "line": 136, "column": 8 }
    },
    {
      "name": "path_exists",
      "docstring": " Checks if a path exists.\n\n # Parameters\n - `path`: A `String` representing the file path.\n\n # Returns\n A boolean indicating whether the path exists.",
      "signature": "fn path_exists(path~ : String) -> Bool",
      "loc": { "line": 58, "column": 8 }
    },
    {
      "name": "read_dir",
      "docstring": " Reads the contents of a directory and returns an array of filenames.\n\n # Parameters\n\n - `path` : The path to the directory to be read.\n\n # Returns\n\n - An array of strings representing the file name and directory name in the directory.",
      "signature": "fn read_dir(path~ : String) -> <a href=\"moonbitlang/core/array#Array\">Array</a>[String]!<a href=\"moonbitlang/core/error#Error\">Error</a>",
      "loc": { "line": 98, "column": 8 }
    },
    {
      "name": "read_file_to_bytes",
      "docstring": " Reads the content of a file specified by the given path and returns its\n content as an array of bytes. If the file does not exist, an error is raised.\n\n # Parameters\n\n - `path` : The path to the file to be read.\n\n # Returns\n\n - An array of bytes representing the content of the file.",
      "signature": "fn read_file_to_bytes(path~ : String) -> Bytes!<a href=\"moonbitlang/core/error#Error\">Error</a>",
      "loc": { "line": 84, "column": 8 }
    },
    {
      "name": "read_file_to_string",
      "docstring": " Reads the entire contents of a file into a string.\n\n # Parameters\n - `path`: A `String` representing the file path.\n\n # Returns\n A `String` containing the file contents if the file exists, otherwise raises an error.",
      "signature": "fn read_file_to_string(path~ : String) -> String!<a href=\"moonbitlang/core/error#Error\">Error</a>",
      "loc": { "line": 69, "column": 8 }
    },
    {
      "name": "remove_dir",
      "docstring": " Removes a directory at the specified path.\n\n # Parameters\n\n - `path` : The string path to the directory that needs to be removed.",
      "signature": "fn remove_dir(path~ : String) -> Unit!<a href=\"moonbitlang/core/error#Error\">Error</a>",
      "loc": { "line": 146, "column": 8 }
    },
    {
      "name": "remove_file",
      "docstring": " Removes a file at the specified path.\n\n # Parameters\n\n - `path` : The path to the file that needs to be removed.",
      "signature": "fn remove_file(path~ : String) -> Unit!<a href=\"moonbitlang/core/error#Error\">Error</a>",
      "loc": { "line": 156, "column": 8 }
    },
    {
      "name": "write_bytes_to_file",
      "docstring": " Writes an array of bytes to a file at the specified path.\n\n # Parameters\n\n - `path` : The path to the file where the bytes will be written.\n - `content` : An array of bytes to be written to the file.",
      "signature": "fn write_bytes_to_file(path~ : String, content~ : Bytes) -> Unit",
      "loc": { "line": 47, "column": 8 }
    },
    {
      "name": "write_string_to_file",
      "docstring": " Writes a string to a file.\n\n # Parameters\n - `path`: A `String` representing the file path.\n - `content`: A `String` containing the content to be written to the file.",
      "signature": "fn write_string_to_file(path~ : String, content~ : String) -> Unit",
      "loc": { "line": 37, "column": 8 }
    }
  ],
  "misc": []
}