{
  "readme": "# Moonbit/Core Result\n\n## Overview\n`Result[T,E]` is a type used for handling computation results and errors in an explicit and declarative manner, similar to Rust (`Result<T,E>`) and OCaml (`('a, 'e) result`). \nIt is an enum with two variants: `Ok(T)`, which represents success and contains a value of type `T`, and `Err(E)`, representing error and containing an error value of type `E`. \n```moonbit\nenum Result[T, E] {\n    Ok(T)\n    Err(E)\n}\n```\n\n## Usage\n### Constructing Result\nYou can create a `Result` value using the `Ok` and `Err` constructors, remember to give proper type annotations.\n```moonbit\nlet result: Result[Int, String] = Ok(42)\nlet error: Result[Int, String] = Err(\"Error message\")\n```\n\nOr use the `ok` and `err` functions to create a `Result` value.\n```moonbit\nlet result : Result[String, Unit] = ok(\"yes\")\nlet error : Result[Int, String] = err(\"error\")\n```\n\n### The question mark operator \nMoonbit provides a way to handle `Result` values in a concise manner using the `?` operator when writing a sequence of computations that may return a `Result`, which hides the boilerplate code of unwrapping the `Result` and propagating the error. \n\n```moonbit\nfn may_fail() -> Result[Int, String] {\n    Ok(42)\n}\n\nfn print_ok() -> Result[Unit, String] {\n    let result = may_fail()\n    match result {\n        Ok(value) => {\n            print(value)\n            Ok(())\n        }\n        Err(error) => Err(error)\n    }\n}\n// The above code can be written as:\nfn print_ok() -> Result[Unit, String] {\n    let value = may_fail()?\n    print(value)\n    Ok(())\n}\n```\nEnding expression with `?` will automatically unwrap the `Result`, if the result is `Err`, it will returned early from the function with the error value.\n\n### Querying variant\nYou can check the variant of a `Result` using the `is_ok` and `is_err` methods.\n```moonbit\nlet result: Result[Int, String] = Ok(42)\nlet is_ok = result.is_ok() // true\nlet is_err = result.is_err() // false\n```\n\n### Extracting values\nYou can extract the value from a `Result` using the `match` expression (Pattern Matching).\n```moonbit\nmatch result {\n    Ok(value) => print(value)\n    Err(error) => ()\n}\n```\n\nOr using the `unwrap` method, which will panic if the result is `Err` and return the value if it is `Ok`.\n```moonbit\nlet result: Result[Int, String] = Ok(42)\nlet value = result.unwrap() // 42\n```\n\nA safe alternative is the `or` method, which returns the value if the result is `Ok` or a default value if it is `Err`.\n```moonbit\nlet result: Result[Int, String] = Err(\"error\")\nlet value = result.or(0) // 0\n```\n\nThere is a lazy version of `or` called `or_else`, which takes a function that returns a default value.\n```moonbit\nlet result: Result[Int, String] = Err(\"error\")\nlet value = result.or_else(fn() { 0 }) // 0\n```\n\n### Transforming values\nTo transform values inside a `Result`, you can use the `map` method, which applies a function to the value if the result is `Ok`,\nand remains unchanged if it is `Err`.\n```moonbit\nlet result: Result[Int, String] = Ok(42)\nlet new_result = result.map(fn(x) { x + 1 }) // Ok(43)\n```\n\nA dual method to `map` is `map_err`, which applies a function to the error value if the result is `Err`, and remains unchanged if it is `Ok`.\n```moonbit\nlet result: Result[Int, String] = Err(\"error\")\nlet new_result = result.map_err(fn(x) { x + \"!\" }) // Err(\"error!\")\n```\n\nYou can turn a `Result[T, E]` into a `Option[T]` by using the method `to_option`, which returns `Some(value)` if the result is `Ok`, and `None` if it is `Err`.\n```moonbit\nlet result: Result[Int, String] = Ok(42)\nlet option = result.to_option() // Some(42)\nlet result1: Result[Int, String] = Err(\"error\")\nlet option1 = result1.to_option() // None\n```\n\n### Monadic operations\nMoonbit provides monadic operations for `Result`, such as `flatten` and `bind`, which allow chaining of computations that return `Result`.\n```moonbit\nlet result: Result[Result[Int, String], String] = Ok(Ok(42))\nlet flattened = result.flatten() // Ok(42)\n```\n\nThe `bind` method is similar to `map`, but the function passed to it should return a `Result` value. \n```moonbit\nlet result: Result[Int, String] = Ok(42)\nlet new_result = result.bind(fn(x) { Ok(x + 1) }) // Ok(43)\n```\n",
  "name": "moonbitlang/core/result",
  "traits": [],
  "types": [],
  "typealias": [],
  "values": [
    {
      "name": "err",
      "docstring": "\n Create an `Err` of type `E`.\n\n # Example\n\n ```\n let x: Result[Int, String] = Err(\"error\")\n assert_eq!(x, Err(\"error\"))\n ```",
      "signature": "fn err[T, E](value : E) -> <a href=\"moonbitlang/core/result#Result\">Result</a>[T, E]",
      "loc": { "line": 76, "column": 8 }
    },
    {
      "name": "ok",
      "docstring": "\n Create an `Ok` of type `T`.\n\n # Example\n\n ```\n let x: Result[String, Unit] = Ok(\"yes\")\n assert_true!(x.is_ok())\n ```",
      "signature": "fn ok[T, E](value : T) -> <a href=\"moonbitlang/core/result#Result\">Result</a>[T, E]",
      "loc": { "line": 94, "column": 8 }
    },
    {
      "name": "wrap0",
      "docstring": "",
      "signature": "fn wrap0[T, E : <a href=\"moonbitlang/core/error#Error\">Error</a>](f~ : () -> T!E) -> <a href=\"moonbitlang/core/result#Result\">Result</a>[T, E]",
      "loc": { "line": 381, "column": 8 }
    },
    {
      "name": "wrap1",
      "docstring": "",
      "signature": "fn wrap1[T, A, E : <a href=\"moonbitlang/core/error#Error\">Error</a>](f~ : (A) -> T!E, a : A) -> <a href=\"moonbitlang/core/result#Result\">Result</a>[T, E]",
      "loc": { "line": 390, "column": 8 }
    },
    {
      "name": "wrap2",
      "docstring": "",
      "signature": "fn wrap2[T, A, B, E : <a href=\"moonbitlang/core/error#Error\">Error</a>](f~ : (A, B) -> T!E, a : A, b : B) -> <a href=\"moonbitlang/core/result#Result\">Result</a>[T, E]",
      "loc": { "line": 399, "column": 8 }
    }
  ],
  "misc": [
    {
      "name": "Result",
      "impls": [
        {
          "name": "arbitrary",
          "docstring": "",
          "signature": "impl <a href=\"moonbitlang/core/quickcheck#Arbitrary\">@moonbitlang/core/quickcheck.Arbitrary</a> for <a href=\"moonbitlang/core/result#Result\">Result</a> with arbitrary[T : <a href=\"moonbitlang/core/quickcheck#Arbitrary\">@moonbitlang/core/quickcheck.Arbitrary</a>, E : <a href=\"moonbitlang/core/quickcheck#Arbitrary\">@moonbitlang/core/quickcheck.Arbitrary</a>](size : Int, rs : <a href=\"moonbitlang/core/quickcheck/splitmix#RandomState\">@moonbitlang/core/quickcheck/splitmix.RandomState</a>) -> <a href=\"moonbitlang/core/result#Result\">Result</a>[T, E]",
          "loc": { "line": 415, "column": 8 }
        }
      ],
      "methods": [
        {
          "name": "arbitrary",
          "docstring": "",
          "signature": "fn <a href=\"moonbitlang/core/result#Result\">Result</a>::arbitrary[T : <a href=\"moonbitlang/core/quickcheck#Arbitrary\">@moonbitlang/core/quickcheck.Arbitrary</a>, E : <a href=\"moonbitlang/core/quickcheck#Arbitrary\">@moonbitlang/core/quickcheck.Arbitrary</a>](size : Int, rs : <a href=\"moonbitlang/core/quickcheck/splitmix#RandomState\">@moonbitlang/core/quickcheck/splitmix.RandomState</a>) -> <a href=\"moonbitlang/core/result#Result\">Result</a>[T, E]",
          "loc": { "line": 415, "column": 8 }
        },
        {
          "name": "bind",
          "docstring": "\n Binds a result to a function that returns another result.\n\n # Example\n\n ```\n let x: Result[Int, String] = Ok(6)\n let y = x.bind(fn(v : Int) { Ok(v * 7) })\n assert_eq!(y, Ok(42))\n ```",
          "signature": "fn <a href=\"moonbitlang/core/result#Result\">Result</a>::bind[T, E, U](self : <a href=\"moonbitlang/core/result#Result\">Result</a>[T, E], g : (T) -> <a href=\"moonbitlang/core/result#Result\">Result</a>[U, E]) -> <a href=\"moonbitlang/core/result#Result\">Result</a>[U, E]",
          "loc": { "line": 226, "column": 8 }
        },
        {
          "name": "compare",
          "docstring": "",
          "signature": "fn <a href=\"moonbitlang/core/result#Result\">Result</a>::compare[T : <a href=\"moonbitlang/core/builtin#Compare\">Compare</a> + <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>, E : <a href=\"moonbitlang/core/builtin#Compare\">Compare</a> + <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>](self : <a href=\"moonbitlang/core/result#Result\">Result</a>[T, E], other : <a href=\"moonbitlang/core/result#Result\">Result</a>[T, E]) -> Int",
          "loc": { "line": 298, "column": 8 }
        },
        {
          "name": "flatten",
          "docstring": "\n Flatten a `Result` of `Result` into a single `Result`.\n \n If the outer `Result` is an `Ok`, the inner `Result` is returned. If the outer `Result` is an `Err`, the inner `Result` is ignored and the `Err` is returned.\n\n # Example\n\n ```\n let x: Result[Result[Int, String], String] = Ok(Ok(6))\n let y = x.flatten()\n assert_eq!(y, Ok(6))\n ```",
          "signature": "fn <a href=\"moonbitlang/core/result#Result\">Result</a>::flatten[T, E](self : <a href=\"moonbitlang/core/result#Result\">Result</a>[<a href=\"moonbitlang/core/result#Result\">Result</a>[T, E], E]) -> <a href=\"moonbitlang/core/result#Result\">Result</a>[T, E]",
          "loc": { "line": 200, "column": 8 }
        },
        {
          "name": "fold",
          "docstring": "\n Folds a `Result` into a single value.\n \n If the `Result` is an `Ok`, the `ok` function is applied to the value. If the `Result` is an `Err`, the `err` function is applied to the value.\n # Example\n\n ```\n let x = Ok(6)\n let y = x.fold(fn(v : Int) -> Int { v * 7 }, fn(_e : String) -> Int { 0 })\n assert_eq!(y, 42)\n ```",
          "signature": "fn <a href=\"moonbitlang/core/result#Result\">Result</a>::fold[T, E, V](self : <a href=\"moonbitlang/core/result#Result\">Result</a>[T, E], ok : (T) -> V, err : (E) -> V) -> V",
          "loc": { "line": 253, "column": 8 }
        },
        {
          "name": "is_err",
          "docstring": "\n Check if a `Result` is an `Err`.",
          "signature": "fn <a href=\"moonbitlang/core/result#Result\">Result</a>::is_err[T, E](self : <a href=\"moonbitlang/core/result#Result\">Result</a>[T, E]) -> Bool",
          "loc": { "line": 121, "column": 8 }
        },
        {
          "name": "is_ok",
          "docstring": "\n Check if a `Result` is an `Ok`.",
          "signature": "fn <a href=\"moonbitlang/core/result#Result\">Result</a>::is_ok[T, E](self : <a href=\"moonbitlang/core/result#Result\">Result</a>[T, E]) -> Bool",
          "loc": { "line": 105, "column": 8 }
        },
        {
          "name": "map",
          "docstring": "\n Maps the value of a Result if it is `Ok` into another, otherwise returns the `Err` value unchanged.\n\n # Example\n\n ```\n let x: Result[Int, Unit] = Ok(6)\n let y = x.map(fn (v : Int) { v * 7 })\n assert_eq!(y, Ok(42))\n ```",
          "signature": "fn <a href=\"moonbitlang/core/result#Result\">Result</a>::map[T, E, U](self : <a href=\"moonbitlang/core/result#Result\">Result</a>[T, E], f : (T) -> U) -> <a href=\"moonbitlang/core/result#Result\">Result</a>[U, E]",
          "loc": { "line": 25, "column": 8 }
        },
        {
          "name": "map_err",
          "docstring": "\n Maps the value of a Result if it is `Err` into another, otherwise returns the `Ok` value unchanged.\n\n # Example\n\n ```\n let x: Result[Int, String] = Err(\"error\")\n let y = x.map_err(fn (v : String) { v + \"!\" })\n assert_eq!(y, Err(\"error!\"))\n ```",
          "signature": "fn <a href=\"moonbitlang/core/result#Result\">Result</a>::map_err[T, E, F](self : <a href=\"moonbitlang/core/result#Result\">Result</a>[T, E], f : (E) -> F) -> <a href=\"moonbitlang/core/result#Result\">Result</a>[T, F]",
          "loc": { "line": 51, "column": 8 }
        },
        {
          "name": "or",
          "docstring": "\n Return the inner `Ok` value, if it exists, otherwise return the provided default.\n\n # Example\n\n ```\n let x: Result[Int, String] = Ok(6)\n let y = x.or(0)\n assert_eq!(y, 6)\n ```",
          "signature": "fn <a href=\"moonbitlang/core/result#Result\">Result</a>::or[T, E](self : <a href=\"moonbitlang/core/result#Result\">Result</a>[T, E], default : T) -> T",
          "loc": { "line": 145, "column": 8 }
        },
        {
          "name": "or_else",
          "docstring": "\n Return the inner `Ok` value, if it exists, otherwise return the provided default.\n\n Default is lazily evaluated.\n # Example\n\n ```\n let x: Result[Int, String] = Ok(6)\n let y = x.or_else(fn() { 0 })\n assert_eq!(y, 6)\n ```",
          "signature": "fn <a href=\"moonbitlang/core/result#Result\">Result</a>::or_else[T, E](self : <a href=\"moonbitlang/core/result#Result\">Result</a>[T, E], default : () -> T) -> T",
          "loc": { "line": 172, "column": 8 }
        },
        {
          "name": "to_option",
          "docstring": "\n Converts a `Result` to an `Option`.\n \n Converts `Ok` to `Some` and `Err` to `None`.\n\n # Example\n\n ```\n let x: Result[Int, String] = Ok(6)\n let y = x.to_option()\n assert_eq!(y, Some(6))\n ```",
          "signature": "fn <a href=\"moonbitlang/core/result#Result\">Result</a>::to_option[T, E](self : <a href=\"moonbitlang/core/result#Result\">Result</a>[T, E]) -> T?",
          "loc": { "line": 281, "column": 8 }
        },
        {
          "name": "to_string",
          "docstring": "",
          "signature": "fn <a href=\"moonbitlang/core/result#Result\">Result</a>::to_string[T : <a href=\"moonbitlang/core/builtin#Show\">Show</a>, E : <a href=\"moonbitlang/core/builtin#Show\">Show</a>](self : <a href=\"moonbitlang/core/result#Result\">Result</a>[T, E]) -> String",
          "loc": { "line": 334, "column": 8 }
        },
        {
          "name": "unwrap",
          "docstring": "",
          "signature": "fn <a href=\"moonbitlang/core/result#Result\">Result</a>::unwrap[T, E](self : <a href=\"moonbitlang/core/result#Result\">Result</a>[T, E]) -> T",
          "loc": { "line": 326, "column": 8 }
        },
        {
          "name": "unwrap_or_error",
          "docstring": "",
          "signature": "fn <a href=\"moonbitlang/core/result#Result\">Result</a>::unwrap_or_error[T, E : <a href=\"moonbitlang/core/error#Error\">Error</a>](self : <a href=\"moonbitlang/core/result#Result\">Result</a>[T, E]) -> T!E",
          "loc": { "line": 359, "column": 8 }
        }
      ]
    }
  ]
}