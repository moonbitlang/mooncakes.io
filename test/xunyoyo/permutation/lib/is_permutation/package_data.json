{
  "readme": "# Next Permutation\n\n这是一个用Moonbit语言实现的`is_permutation`函数，用于检查一个数组是否为另一个数组的排列。\n\n## 功能\n\n`is_permutation`函数检查一个数组是否为另一个数组的排列。如果给定数组是另一个数组的排列，则返回`true`，反之，返回`false`。\n\n## 使用方法\n\n### 直接比较\n\n```moonbit\nfn main {\n  let a = [1, 2, 3, 4]\n  let b = [3, 1, 4, 2]\n  let result = is_permutation(a, b)\n  println(result) // 输出: true\n}\n```\n\n### 范围比较\n\n`start1`表示第一个数组的起始位置，`start2`表示第二个数组的起始位置，`end1`表示第一个数组的终止位置，数组下标前闭后开。\n\n```moonbit\nfn main {\n  let a = [1, 2, 3, 4]\n  let b = [3, 1, 4, 2]\n  let result = is_permutation(a, b, start1=0, end1=3, start2=0)\n  println(result) // 输出: false\n}\n```",
  "name": "xunyoyo/permutation/lib/is_permutation",
  "traits": [],
  "types": [],
  "typealias": [],
  "values": [
    {
      "name": "is_permutation",
      "docstring": " |\n 检查两个数组是否为排列。\n\n # Example\n ```\n let a = [1, 2, 3, 4]\n let b = [3, 1, 4, 2]\n let result = is_permutation(a, b)\n println(result) // 输出: true\n ```\n @alert unsafe \"如果数组长度不一致，将返回 false。\"",
      "signature": "fn is_permutation[T : <a href=\"moonbitlang/core/builtin#Compare\">Compare</a> + <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>](arr1 : <a href=\"moonbitlang/core/array#Array\">Array</a>[T], arr2 : <a href=\"moonbitlang/core/array#Array\">Array</a>[T], start1~ : Int = .., end1~ : Int = .., start2~ : Int = ..) -> Bool",
      "loc": { "line": 31, "column": 8 }
    }
  ],
  "misc": []
}