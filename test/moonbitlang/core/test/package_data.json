{
  "readme": "",
  "name": "moonbitlang/core/test",
  "traits": [],
  "types": [
    {
      "name": "T",
      "docstring": "",
      "signature": "pub(all) struct T {\n  name : String\n  buffer : <a href=\"moonbitlang/core/builtin#StringBuilder\">StringBuilder</a>\n}",
      "loc": { "line": 16, "column": 17 },
      "methods": [
        {
          "name": "snapshot",
          "docstring": "",
          "signature": "fn <a href=\"moonbitlang/core/test#T\">T</a>::snapshot(self : <a href=\"moonbitlang/core/test#T\">T</a>, filename~ : String, loc~ : <a href=\"moonbitlang/core/builtin#SourceLoc\">SourceLoc</a> = _, args_loc~ : <a href=\"moonbitlang/core/builtin#ArgsLoc\">ArgsLoc</a> = _) -> Unit!<a href=\"moonbitlang/core/builtin#SnapshotError\">SnapshotError</a>",
          "loc": { "line": 131, "column": 8 }
        },
        {
          "name": "write",
          "docstring": "",
          "signature": "fn <a href=\"moonbitlang/core/test#T\">T</a>::write(self : <a href=\"moonbitlang/core/test#T\">T</a>, obj : <a href=\"moonbitlang/core/builtin#Show\">Show</a>) -> Unit",
          "loc": { "line": 120, "column": 8 }
        },
        {
          "name": "writeln",
          "docstring": "",
          "signature": "fn <a href=\"moonbitlang/core/test#T\">T</a>::writeln(self : <a href=\"moonbitlang/core/test#T\">T</a>, obj : <a href=\"moonbitlang/core/builtin#Show\">Show</a>) -> Unit",
          "loc": { "line": 125, "column": 8 }
        }
      ],
      "impls": []
    }
  ],
  "typealias": [],
  "values": [
    {
      "name": "eq",
      "docstring": "\n @alert deprecated \"Use built-in `assert_eq` instead\"",
      "signature": "fn eq[T : <a href=\"moonbitlang/core/builtin#Show\">Show</a> + <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>](a : T, b : T, loc~ : <a href=\"moonbitlang/core/builtin#SourceLoc\">SourceLoc</a> = _) -> Unit!<a href=\"moonbitlang/core/error#Error\">Error</a>",
      "loc": { "line": 24, "column": 8 }
    },
    {
      "name": "fail",
      "docstring": "",
      "signature": "fn fail[T](msg : String, loc~ : <a href=\"moonbitlang/core/builtin#SourceLoc\">SourceLoc</a> = _) -> T!<a href=\"moonbitlang/core/error#Error\">Error</a>",
      "loc": { "line": 115, "column": 8 }
    },
    {
      "name": "is",
      "docstring": "\n @alert deprecated \"Use `same_object` instead\"",
      "signature": "fn is[T : <a href=\"moonbitlang/core/builtin#Show\">Show</a>](a : T, b : T, loc~ : <a href=\"moonbitlang/core/builtin#SourceLoc\">SourceLoc</a> = _) -> Unit!<a href=\"moonbitlang/core/error#Error\">Error</a>",
      "loc": { "line": 86, "column": 8 }
    },
    {
      "name": "is_false",
      "docstring": "\n @alert deprecated \"Use built-in `assert_false` instead\"",
      "signature": "fn is_false(x : Bool, loc~ : <a href=\"moonbitlang/core/builtin#SourceLoc\">SourceLoc</a> = _) -> Unit!<a href=\"moonbitlang/core/error#Error\">Error</a>",
      "loc": { "line": 53, "column": 8 }
    },
    {
      "name": "is_not",
      "docstring": "\n Assert referential inequality of two values.\n\n Returns Ok if the two arguments are NOT the same object by reference, using\n `physical_equal`; raise an Error otherwise. Certain objects may be equal\n by value, but they are different objects in the memory. This function\n checks the latter.\n\n # Examples\n\n ```\n let a = \"4\" + \"2\"\n let b = \"4\" + \"2\"\n @test.is_not!(a, b)\n @test.same_object!(a, a)\n ```",
      "signature": "fn is_not[T : <a href=\"moonbitlang/core/builtin#Show\">Show</a>](a : T, b : T, loc~ : <a href=\"moonbitlang/core/builtin#SourceLoc\">SourceLoc</a> = _) -> Unit!<a href=\"moonbitlang/core/error#Error\">Error</a>",
      "loc": { "line": 106, "column": 8 }
    },
    {
      "name": "is_true",
      "docstring": "\n @alert deprecated \"Use built-in `assert_true` instead\"",
      "signature": "fn is_true(x : Bool, loc~ : <a href=\"moonbitlang/core/builtin#SourceLoc\">SourceLoc</a> = _) -> Unit!<a href=\"moonbitlang/core/error#Error\">Error</a>",
      "loc": { "line": 44, "column": 8 }
    },
    {
      "name": "ne",
      "docstring": "\n @alert deprecated \"Use built-in `assert_not_eq` instead\"",
      "signature": "fn ne[T : <a href=\"moonbitlang/core/builtin#Show\">Show</a> + <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>](a : T, b : T, loc~ : <a href=\"moonbitlang/core/builtin#SourceLoc\">SourceLoc</a> = _) -> Unit!<a href=\"moonbitlang/core/error#Error\">Error</a>",
      "loc": { "line": 34, "column": 8 }
    },
    {
      "name": "same_object",
      "docstring": "\n Assert referential equality of two values.\n\n Returns Ok if the two arguments are the same object by reference, using\n `physical_equal`; raise an Error otherwise. Certain objects may be equal by\n value, but they are different objects in the memory. This function checks\n the latter.\n\n # Examples\n\n ```\n let a = \"4\" + \"2\"\n let b = \"4\" + \"2\"\n @test.same_object!(a, a)\n @test.is_not!(a, b)\n ```",
      "signature": "fn same_object[T : <a href=\"moonbitlang/core/builtin#Show\">Show</a>](a : T, b : T, loc~ : <a href=\"moonbitlang/core/builtin#SourceLoc\">SourceLoc</a> = _) -> Unit!<a href=\"moonbitlang/core/error#Error\">Error</a>",
      "loc": { "line": 76, "column": 8 }
    }
  ],
  "misc": []
}