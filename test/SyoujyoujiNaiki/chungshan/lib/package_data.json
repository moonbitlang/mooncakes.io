{
  "readme": "",
  "name": "SyoujyoujiNaiki/chungshan/lib",
  "traits": [],
  "types": [
    {
      "name": "BytesLenErr",
      "docstring": " Error type for Chungshan contains a Int indicating an incorrect bytes array length",
      "signature": "type BytesLenErr",
      "loc": { "line": 2, "column": 7 },
      "methods": [],
      "impls": [
        {
          "docstring": "",
          "signature": "impl <a href=\"moonbitlang/core/builtin#Show\">Show</a> for <a href=\"SyoujyoujiNaiki/chungshan/lib#BytesLenErr\">BytesLenErr</a>",
          "methods": [
            {
              "name": "output",
              "docstring": "automatically derived",
              "signature": "fn output(<a href=\"SyoujyoujiNaiki/chungshan/lib#BytesLenErr\">BytesLenErr</a>, <a href=\"moonbitlang/core/builtin#Logger\">Logger</a>) -> Unit",
              "loc": { "line": 2, "column": 30 }
            }
          ],
          "loc": { "line": 2, "column": 30 }
        }
      ]
    }
  ],
  "typealias": [],
  "values": [
    {
      "name": "byte_array_to_double",
      "docstring": " Convert a 8 bytes long FixedArray[Byte] into an Double **with* a length check.\n The result is either an Double or an BytesLenErr which requires error handling.\n \n # Example\n \n ```\n [b'\\x11', b'\\x45', b'\\x14', b'\\x19', b'\\x19', b'\\x81', b'\\x00', b'\\x00'] |> byte_array_to_double\n ```",
      "signature": "fn byte_array_to_double(bs : <a href=\"moonbitlang/core/array#FixedArray\">FixedArray</a>[Byte]) -> Double!<a href=\"SyoujyoujiNaiki/chungshan/lib#BytesLenErr\">BytesLenErr</a>",
      "loc": { "line": 151, "column": 8 }
    },
    {
      "name": "byte_array_to_double_raw",
      "docstring": " Convert a 8 bytes long FixedArray[Byte] into an Double **without** a length check.\n This function does not check the input so take the risk at your own.\n \n # Example\n \n ```\n [b'\\x11', b'\\x45', b'\\x14', b'\\x19', b'\\x19', b'\\x81', b'\\x00', b'\\x00'] |> byte_array_to_double_raw\n ```",
      "signature": "fn byte_array_to_double_raw(bs : <a href=\"moonbitlang/core/array#FixedArray\">FixedArray</a>[Byte]) -> Double",
      "loc": { "line": 167, "column": 8 }
    },
    {
      "name": "byte_array_to_float",
      "docstring": " Convert a 4 bytes long FixedArray[Byte] into an Float **with** a length check.\n The result is either an Float or an BytesLenErr which requires error handling.\n \n # Example\n \n ```\n [b'\\x11', b'\\x45', b'\\x14', b'\\x00'] |> byte_array_to_float\n ```",
      "signature": "fn byte_array_to_float(bs : <a href=\"moonbitlang/core/array#FixedArray\">FixedArray</a>[Byte]) -> Float!<a href=\"SyoujyoujiNaiki/chungshan/lib#BytesLenErr\">BytesLenErr</a>",
      "loc": { "line": 190, "column": 8 }
    },
    {
      "name": "byte_array_to_float_raw",
      "docstring": " Convert a 4 bytes long FixedArray[Byte] into an Float **without** a length check.\n This function does not check the input so take the risk at your own.\n \n # Example\n \n ```\n [b'\\x11', b'\\x45', b'\\x14', b'\\x00'] |> byte_array_to_float_raw\n ```",
      "signature": "fn byte_array_to_float_raw(bs : <a href=\"moonbitlang/core/array#FixedArray\">FixedArray</a>[Byte]) -> Float",
      "loc": { "line": 206, "column": 8 }
    },
    {
      "name": "byte_array_to_int",
      "docstring": " Convert a 4 bytes long FixedArray[Byte] into an Int **with** a length check.\n The result is either an Int or an BytesLenErr which requires error handling.\n \n # Example\n \n ```\n [b'\\x11', b'\\x45', b'\\x14', b'\\x00'] |> byte_array_to_int\n ```",
      "signature": "fn byte_array_to_int(bs : <a href=\"moonbitlang/core/array#FixedArray\">FixedArray</a>[Byte]) -> Int!<a href=\"SyoujyoujiNaiki/chungshan/lib#BytesLenErr\">BytesLenErr</a>",
      "loc": { "line": 229, "column": 8 }
    },
    {
      "name": "byte_array_to_int64",
      "docstring": " Convert a 8 bytes long FixedArray[Byte] into an Int64 **with* a length check.\n The result is either an Int64 or an BytesLenErr which requires error handling.\n \n # Example\n \n ```\n [b'\\x11', b'\\x45', b'\\x14', b'\\x19', b'\\x19', b'\\x81', b'\\x00', b'\\x00'] |> byte_array_to_int64\n ```",
      "signature": "fn byte_array_to_int64(bs : <a href=\"moonbitlang/core/array#FixedArray\">FixedArray</a>[Byte]) -> Int64!<a href=\"SyoujyoujiNaiki/chungshan/lib#BytesLenErr\">BytesLenErr</a>",
      "loc": { "line": 268, "column": 8 }
    },
    {
      "name": "byte_array_to_int64_raw",
      "docstring": " Convert a 8 bytes long FixedArray[Byte] into an Int64 **without** a length check.\n This function does not check the input so take the risk at your own.\n \n # Example\n \n ```\n [b'\\x11', b'\\x45', b'\\x14', b'\\x19', b'\\x19', b'\\x81', b'\\x00', b'\\x00'] |> byte_array_to_int64_raw\n ```",
      "signature": "fn byte_array_to_int64_raw(bs : <a href=\"moonbitlang/core/array#FixedArray\">FixedArray</a>[Byte]) -> Int64",
      "loc": { "line": 284, "column": 8 }
    },
    {
      "name": "byte_array_to_int_raw",
      "docstring": " Convert a 4 bytes long FixedArray[Byte] into an Int **without** a length check.\n This function does not check the input so take the risk at your own.\n \n # Example\n \n ```\n [b'\\x11', b'\\x45', b'\\x14', b'\\x00'] |> byte_array_to_int_raw\n ```",
      "signature": "fn byte_array_to_int_raw(bs : <a href=\"moonbitlang/core/array#FixedArray\">FixedArray</a>[Byte]) -> Int",
      "loc": { "line": 245, "column": 8 }
    },
    {
      "name": "byte_array_to_uint",
      "docstring": " Convert a 4 bytes long FixedArray[Byte] into an UInt **with** a length check.\n The result is either an UInt or an BytesLenErr which requires error handling.\n \n # Example\n \n ```\n [b'\\x11', b'\\x45', b'\\x14', b'\\x00'] |> byte_array_to_uint\n ```",
      "signature": "fn byte_array_to_uint(bs : <a href=\"moonbitlang/core/array#FixedArray\">FixedArray</a>[Byte]) -> UInt!<a href=\"SyoujyoujiNaiki/chungshan/lib#BytesLenErr\">BytesLenErr</a>",
      "loc": { "line": 104, "column": 8 }
    },
    {
      "name": "byte_array_to_uint64",
      "docstring": " Convert a 8 bytes long FixedArray[Byte] into an UInt64 **with* a length check.\n The result is either an UInt64 or an BytesLenErr which requires error handling.\n \n # Example\n \n ```\n [b'\\x11', b'\\x45', b'\\x14', b'\\x19', b'\\x19', b'\\x81', b'\\x00', b'\\x00'] |> byte_array_to_uint64\n ```",
      "signature": "fn byte_array_to_uint64(bs : <a href=\"moonbitlang/core/array#FixedArray\">FixedArray</a>[Byte]) -> UInt64!<a href=\"SyoujyoujiNaiki/chungshan/lib#BytesLenErr\">BytesLenErr</a>",
      "loc": { "line": 31, "column": 8 }
    },
    {
      "name": "byte_array_to_uint64_raw",
      "docstring": " Convert a 8 bytes long FixedArray[Byte] into an UInt64 **without** a length check.\n This function does not check the input so take the risk at your own.\n \n # Example\n \n ```\n [b'\\x11', b'\\x45', b'\\x14', b'\\x19', b'\\x19', b'\\x81', b'\\x00', b'\\x00'] |> byte_array_to_uint64_raw\n ```",
      "signature": "fn byte_array_to_uint64_raw(bs : <a href=\"moonbitlang/core/array#FixedArray\">FixedArray</a>[Byte]) -> UInt64",
      "loc": { "line": 62, "column": 8 }
    },
    {
      "name": "byte_array_to_uint_raw",
      "docstring": " Convert a 4 bytes long FixedArray[Byte] into an UInt **without** a length check.\n This function does not check the input so take the risk at your own.\n \n # Example\n \n ```\n [b'\\x11', b'\\x45', b'\\x14', b'\\x00'] |> byte_array_to_uint_raw\n ```",
      "signature": "fn byte_array_to_uint_raw(bs : <a href=\"moonbitlang/core/array#FixedArray\">FixedArray</a>[Byte]) -> UInt",
      "loc": { "line": 124, "column": 8 }
    },
    {
      "name": "double_to_byte_array",
      "docstring": " Convert a Double into a 8 bytes long FixedArray[Byte]\n \n # Example\n \n ```\n double_number |> double_to_byte_array\n ```",
      "signature": "fn double_to_byte_array(f : Double) -> <a href=\"moonbitlang/core/array#FixedArray\">FixedArray</a>[Byte]",
      "loc": { "line": 139, "column": 8 }
    },
    {
      "name": "float_to_byte_array",
      "docstring": " Convert a Float into a 4 bytes long FixedArray[Byte]\n \n # Example\n \n ```\n float_number |> float_to_byte_array\n ```",
      "signature": "fn float_to_byte_array(f : Float) -> <a href=\"moonbitlang/core/array#FixedArray\">FixedArray</a>[Byte]",
      "loc": { "line": 178, "column": 8 }
    },
    {
      "name": "int64_to_byte_array",
      "docstring": " Convert an Int64 into a 8 bytes long FixedArray[Byte].\n \n # Example\n \n ```\n int64_number |> int64_to_byte_array\n ```",
      "signature": "fn int64_to_byte_array(i : Int64) -> <a href=\"moonbitlang/core/array#FixedArray\">FixedArray</a>[Byte]",
      "loc": { "line": 256, "column": 8 }
    },
    {
      "name": "int_to_byte_array",
      "docstring": " Convert an Int into a 4 bytes long FixedArray[Byte].\n \n # Example\n \n ```\n int_number |> int_to_byte_array\n ```",
      "signature": "fn int_to_byte_array(i : Int) -> <a href=\"moonbitlang/core/array#FixedArray\">FixedArray</a>[Byte]",
      "loc": { "line": 217, "column": 8 }
    },
    {
      "name": "uint64_to_byte_array",
      "docstring": " Convert an UInt64 into a 8 bytes long FixedArray[Byte].\n \n # Example\n \n ```\n uint64_number |> uint64_to_byte_array\n ```",
      "signature": "fn uint64_to_byte_array(i : UInt64) -> <a href=\"moonbitlang/core/array#FixedArray\">FixedArray</a>[Byte]",
      "loc": { "line": 11, "column": 8 }
    },
    {
      "name": "uint_to_byte_array",
      "docstring": " Convert an UInt into a 4 bytes long FixedArray[Byte].\n \n # Example\n \n ```\n uint_number |> uint_to_byte_array\n ```",
      "signature": "fn uint_to_byte_array(i : UInt) -> <a href=\"moonbitlang/core/array#FixedArray\">FixedArray</a>[Byte]",
      "loc": { "line": 88, "column": 8 }
    }
  ],
  "misc": []
}